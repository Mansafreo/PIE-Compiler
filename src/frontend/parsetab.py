
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEQleftGTLTGEQLEQleftPLUSMINUSleftMULDIVMODrightUMINUSnonassocLOWER_THAN_ELSEnonassocKEYWORD_ELSEAND ASSIGN CHAR_LITERAL COLON COMMA COMMENT DIV DOT EQ FLOAT_LITERAL GEQ GT IDENTIFIER INT_LITERAL KEYWORD_ARRAY KEYWORD_BOOL KEYWORD_BREAK KEYWORD_CASE KEYWORD_CHAR KEYWORD_CONTINUE KEYWORD_DEFAULT KEYWORD_DICT KEYWORD_DO KEYWORD_ELSE KEYWORD_EXIT KEYWORD_FALSE KEYWORD_FILE KEYWORD_FLOAT KEYWORD_FOR KEYWORD_IF KEYWORD_INT KEYWORD_NULL KEYWORD_REGEX KEYWORD_RETURN KEYWORD_SOCKET KEYWORD_STRING KEYWORD_SWITCH KEYWORD_TRUE KEYWORD_VOID KEYWORD_WHILE LBRACE LBRACKET LEQ LPAREN LT MINUS MOD MUL NEQ OR PLUS RBRACE RBRACKET RPAREN SEMICOLON STRING_LITERAL SYSTEM_ARR_AVG SYSTEM_ARR_CONTAINS SYSTEM_ARR_INDEXOF SYSTEM_ARR_POP SYSTEM_ARR_PUSH SYSTEM_ARR_SIZE SYSTEM_EXIT SYSTEM_INPUT SYSTEM_OUTPUT SYSTEM_SLEEPprogram : statement_listfunction_definition : type_specifier IDENTIFIER LPAREN params RPAREN block_statementparams : param_list\n                  | emptyparam_list : param\n                      | param_list COMMA paramparam : type_specifier IDENTIFIERstatement_list : statement\n                         | statement_list statementstatement : declaration_statement\n                    | assignment_statement\n                    | if_statement\n                    | while_statement\n                    | do_while_statement\n                    | for_statement\n                    | switch_statement\n                    | break_statement\n                    | return_statement\n                    | function_call_statement\n                    | block_statement\n                    | function_definitiondo_while_statement : KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLONswitch_statement : KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACEcase_list : case_clause\n                     | case_list case_clausecase_clause : KEYWORD_CASE expression COLON statement_list\n                       | KEYWORD_DEFAULT COLON statement_listbreak_statement : KEYWORD_BREAK SEMICOLONdeclaration_statement : type_specifier IDENTIFIER SEMICOLON\n                                | type_specifier IDENTIFIER ASSIGN expression SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLONtype_specifier : primitive_type\n                         | array_typeprimitive_type : KEYWORD_INT\n                          | KEYWORD_FLOAT\n                          | KEYWORD_CHAR\n                          | KEYWORD_VOID\n                          | KEYWORD_STRING\n                          | KEYWORD_BOOL\n                          | KEYWORD_FILE\n                          | KEYWORD_SOCKET\n                          | KEYWORD_DICT\n                          | KEYWORD_REGEX\n                          | KEYWORD_ARRAYarray_type : primitive_type LBRACKET RBRACKETassignment_statement : left_hand_side ASSIGN expression SEMICOLONleft_hand_side : IDENTIFIER\n                         | subscript_accessassignment_statement_no_semi : left_hand_side ASSIGN expressionif_statement : KEYWORD_IF LPAREN expression RPAREN statement %prec LOWER_THAN_ELSE\n                        | KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statementwhile_statement : KEYWORD_WHILE LPAREN expression RPAREN statementfor_statement : KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statementfor_init : assignment_statement_no_semi SEMICOLON\n                    | declaration_statement\n                    | SEMICOLONexpression_statement : expression SEMICOLON\n                               | SEMICOLONexpression_opt : expression\n                         | assignment_statement_no_semi\n                         | emptyempty :return_statement : KEYWORD_RETURN SEMICOLON\n                           | KEYWORD_RETURN expression SEMICOLONfunction_call_statement : function_call SEMICOLONfunction_call : IDENTIFIER LPAREN argument_list RPAREN\n                        | IDENTIFIER LPAREN RPAREN\n                        | SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN\n                        | SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN\n                        | SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN\n                        | KEYWORD_EXIT LPAREN RPAREN\n                        | SYSTEM_SLEEP LPAREN expression RPAREN\n                        | SYSTEM_ARR_PUSH LPAREN expression COMMA expression RPAREN\n                        | SYSTEM_ARR_POP LPAREN expression RPAREN\n                        | SYSTEM_ARR_SIZE LPAREN expression RPAREN\n                        | SYSTEM_ARR_CONTAINS LPAREN expression COMMA expression RPAREN\n                        | SYSTEM_ARR_INDEXOF LPAREN expression COMMA expression RPAREN\n                        | SYSTEM_ARR_AVG LPAREN expression RPAREN\n                        | SYSTEM_ARR_AVG LPAREN expression COMMA expression RPARENargument_list : expression\n                        | argument_list COMMA expressionblock_statement : LBRACE RBRACE\n                          | LBRACE statement_list RBRACEinitializer_list : LBRACKET expression_list_opt RBRACKETexpression_list_opt : expression_list\n                               | emptyexpression_list : expression\n                           | expression_list COMMA expressionexpression : logical_expression\n                      | initializer_listlogical_expression : equality_expression\n                             | logical_expression AND equality_expression\n                             | logical_expression OR equality_expressionequality_expression : relational_expression\n                               | equality_expression EQ relational_expression\n                               | equality_expression NEQ relational_expressionrelational_expression : additive_expression\n                                | relational_expression GT additive_expression\n                                | relational_expression LT additive_expression\n                                | relational_expression GEQ additive_expression\n                                | relational_expression LEQ additive_expressionadditive_expression : multiplicative_expression\n                              | additive_expression PLUS multiplicative_expression\n                              | additive_expression MINUS multiplicative_expressionmultiplicative_expression : unary_expression\n                                    | multiplicative_expression MUL unary_expression\n                                    | multiplicative_expression DIV unary_expression\n                                    | multiplicative_expression MOD unary_expressionunary_expression : primary_expression\n                           | MINUS unary_expression %prec UMINUSprimary_expression : IDENTIFIER\n                             | INT_LITERAL\n                             | FLOAT_LITERAL\n                             | STRING_LITERAL\n                             | CHAR_LITERAL\n                             | KEYWORD_TRUE\n                             | KEYWORD_FALSE\n                             | KEYWORD_NULL\n                             | LPAREN expression RPAREN\n                             | function_call\n                             | subscript_access\n                             | dictionary_literaldictionary_literal : LBRACE key_value_list_opt RBRACEkey_value_list_opt : key_value_list\n                              | emptykey_value_list : key_value\n                          | key_value_list COMMA key_valuekey_value : expression COLON expressionsubscript_access : IDENTIFIER LBRACKET expression RBRACKET'
    
_lr_action_items = {'KEYWORD_IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,63,64,65,90,102,122,123,170,171,172,213,216,221,222,236,240,242,257,258,259,260,261,262,265,267,268,269,270,272,],[19,19,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,19,19,-9,-86,19,-28,-67,-69,-29,-87,-68,-50,19,19,-30,-35,-54,-56,-31,-2,19,-33,-34,-55,-22,19,-23,19,-32,-57,19,19,19,]),'KEYWORD_WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,59,62,63,64,65,90,102,122,123,170,171,172,213,216,221,222,236,240,242,257,258,259,260,261,262,265,267,268,269,270,272,],[20,20,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,20,20,-9,113,-86,20,-28,-67,-69,-29,-87,-68,-50,20,20,-30,-35,-54,-56,-31,-2,20,-33,-34,-55,-22,20,-23,20,-32,-57,20,20,20,]),'KEYWORD_DO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,63,64,65,90,102,122,123,170,171,172,213,216,221,222,236,240,242,257,258,259,260,261,262,265,267,268,269,270,272,],[21,21,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,21,21,-9,-86,21,-28,-67,-69,-29,-87,-68,-50,21,21,-30,-35,-54,-56,-31,-2,21,-33,-34,-55,-22,21,-23,21,-32,-57,21,21,21,]),'KEYWORD_FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,63,64,65,90,102,122,123,170,171,172,213,216,221,222,236,240,242,257,258,259,260,261,262,265,267,268,269,270,272,],[22,22,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,22,22,-9,-86,22,-28,-67,-69,-29,-87,-68,-50,22,22,-30,-35,-54,-56,-31,-2,22,-33,-34,-55,-22,22,-23,22,-32,-57,22,22,22,]),'KEYWORD_SWITCH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,63,64,65,90,102,122,123,170,171,172,213,216,221,222,236,240,242,257,258,259,260,261,262,265,267,268,269,270,272,],[23,23,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,23,23,-9,-86,23,-28,-67,-69,-29,-87,-68,-50,23,23,-30,-35,-54,-56,-31,-2,23,-33,-34,-55,-22,23,-23,23,-32,-57,23,23,23,]),'KEYWORD_BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,63,64,65,90,102,122,123,170,171,172,213,216,221,222,236,240,242,257,258,259,260,261,262,265,267,268,269,270,272,],[25,25,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,25,25,-9,-86,25,-28,-67,-69,-29,-87,-68,-50,25,25,-30,-35,-54,-56,-31,-2,25,-33,-34,-55,-22,25,-23,25,-32,-57,25,25,25,]),'KEYWORD_RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,63,64,65,90,102,122,123,170,171,172,213,216,221,222,236,240,242,257,258,259,260,261,262,265,267,268,269,270,272,],[26,26,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,26,26,-9,-86,26,-28,-67,-69,-29,-87,-68,-50,26,26,-30,-35,-54,-56,-31,-2,26,-33,-34,-55,-22,26,-23,26,-32,-57,26,26,26,]),'LBRACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,93,95,96,97,98,99,100,101,102,103,104,114,115,117,122,123,124,125,126,127,132,133,134,135,136,137,138,139,140,168,170,171,172,173,180,181,183,189,201,202,206,209,210,212,213,215,216,218,221,222,224,236,240,242,247,250,257,258,259,260,261,262,265,267,268,269,270,272,],[24,24,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,24,24,89,-9,89,89,89,89,89,89,-86,24,-28,-67,89,89,89,89,-69,89,89,89,89,89,89,89,89,-29,89,89,89,-60,-59,-87,-68,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-50,24,24,89,-58,89,226,89,89,89,89,89,89,89,-30,89,-35,24,-54,-56,89,-31,-2,24,89,89,-33,-34,-55,-22,24,-23,24,-32,-57,24,24,24,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,24,26,28,29,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,60,61,62,63,64,65,70,74,85,89,90,92,93,95,96,97,98,99,100,101,102,103,104,114,115,117,119,122,123,124,125,126,127,132,133,134,135,136,137,138,139,140,148,162,168,170,171,172,173,180,181,189,201,202,206,209,210,212,213,215,216,221,222,224,236,240,242,247,250,257,258,259,260,261,262,265,267,268,269,270,272,],[17,17,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,53,17,17,77,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-9,77,77,77,77,77,120,77,-86,17,-28,-67,77,77,77,77,-69,149,77,77,77,77,77,77,77,77,-29,77,77,178,-60,-59,182,-87,-68,77,77,77,77,77,77,77,77,77,77,77,77,77,-49,217,77,-50,17,17,77,-58,77,77,77,77,77,77,77,77,-30,77,-35,-54,-56,178,-31,-2,17,77,77,-33,-34,-55,-22,17,-23,17,-32,-57,17,17,17,]),'SYSTEM_INPUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,93,95,96,97,98,99,100,101,102,103,104,114,115,117,122,123,124,125,126,127,132,133,134,135,136,137,138,139,140,168,170,171,172,173,180,181,189,201,202,206,209,210,212,213,215,216,221,222,224,236,240,242,247,250,257,258,259,260,261,262,265,267,268,269,270,272,],[31,31,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,31,31,31,-9,31,31,31,31,31,31,-86,31,-28,-67,31,31,31,31,-69,31,31,31,31,31,31,31,31,-29,31,31,31,-60,-59,-87,-68,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-50,31,31,31,-58,31,31,31,31,31,31,31,31,-30,31,-35,-54,-56,31,-31,-2,31,31,31,-33,-34,-55,-22,31,-23,31,-32,-57,31,31,31,]),'SYSTEM_OUTPUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,93,95,96,97,98,99,100,101,102,103,104,114,115,117,122,123,124,125,126,127,132,133,134,135,136,137,138,139,140,168,170,171,172,173,180,181,189,201,202,206,209,210,212,213,215,216,221,222,224,236,240,242,247,250,257,258,259,260,261,262,265,267,268,269,270,272,],[32,32,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,32,32,32,-9,32,32,32,32,32,32,-86,32,-28,-67,32,32,32,32,-69,32,32,32,32,32,32,32,32,-29,32,32,32,-60,-59,-87,-68,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-50,32,32,32,-58,32,32,32,32,32,32,32,32,-30,32,-35,-54,-56,32,-31,-2,32,32,32,-33,-34,-55,-22,32,-23,32,-32,-57,32,32,32,]),'KEYWORD_EXIT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,93,95,96,97,98,99,100,101,102,103,104,114,115,117,122,123,124,125,126,127,132,133,134,135,136,137,138,139,140,168,170,171,172,173,180,181,189,201,202,206,209,210,212,213,215,216,221,222,224,236,240,242,247,250,257,258,259,260,261,262,265,267,268,269,270,272,],[33,33,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,33,33,33,-9,33,33,33,33,33,33,-86,33,-28,-67,33,33,33,33,-69,33,33,33,33,33,33,33,33,-29,33,33,33,-60,-59,-87,-68,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-50,33,33,33,-58,33,33,33,33,33,33,33,33,-30,33,-35,-54,-56,33,-31,-2,33,33,33,-33,-34,-55,-22,33,-23,33,-32,-57,33,33,33,]),'SYSTEM_SLEEP':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,93,95,96,97,98,99,100,101,102,103,104,114,115,117,122,123,124,125,126,127,132,133,134,135,136,137,138,139,140,168,170,171,172,173,180,181,189,201,202,206,209,210,212,213,215,216,221,222,224,236,240,242,247,250,257,258,259,260,261,262,265,267,268,269,270,272,],[34,34,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,34,34,34,-9,34,34,34,34,34,34,-86,34,-28,-67,34,34,34,34,-69,34,34,34,34,34,34,34,34,-29,34,34,34,-60,-59,-87,-68,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-50,34,34,34,-58,34,34,34,34,34,34,34,34,-30,34,-35,-54,-56,34,-31,-2,34,34,34,-33,-34,-55,-22,34,-23,34,-32,-57,34,34,34,]),'SYSTEM_ARR_PUSH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,93,95,96,97,98,99,100,101,102,103,104,114,115,117,122,123,124,125,126,127,132,133,134,135,136,137,138,139,140,168,170,171,172,173,180,181,189,201,202,206,209,210,212,213,215,216,221,222,224,236,240,242,247,250,257,258,259,260,261,262,265,267,268,269,270,272,],[35,35,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,35,35,35,-9,35,35,35,35,35,35,-86,35,-28,-67,35,35,35,35,-69,35,35,35,35,35,35,35,35,-29,35,35,35,-60,-59,-87,-68,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-50,35,35,35,-58,35,35,35,35,35,35,35,35,-30,35,-35,-54,-56,35,-31,-2,35,35,35,-33,-34,-55,-22,35,-23,35,-32,-57,35,35,35,]),'SYSTEM_ARR_POP':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,93,95,96,97,98,99,100,101,102,103,104,114,115,117,122,123,124,125,126,127,132,133,134,135,136,137,138,139,140,168,170,171,172,173,180,181,189,201,202,206,209,210,212,213,215,216,221,222,224,236,240,242,247,250,257,258,259,260,261,262,265,267,268,269,270,272,],[36,36,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,36,36,36,-9,36,36,36,36,36,36,-86,36,-28,-67,36,36,36,36,-69,36,36,36,36,36,36,36,36,-29,36,36,36,-60,-59,-87,-68,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-50,36,36,36,-58,36,36,36,36,36,36,36,36,-30,36,-35,-54,-56,36,-31,-2,36,36,36,-33,-34,-55,-22,36,-23,36,-32,-57,36,36,36,]),'SYSTEM_ARR_SIZE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,93,95,96,97,98,99,100,101,102,103,104,114,115,117,122,123,124,125,126,127,132,133,134,135,136,137,138,139,140,168,170,171,172,173,180,181,189,201,202,206,209,210,212,213,215,216,221,222,224,236,240,242,247,250,257,258,259,260,261,262,265,267,268,269,270,272,],[37,37,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,37,37,37,-9,37,37,37,37,37,37,-86,37,-28,-67,37,37,37,37,-69,37,37,37,37,37,37,37,37,-29,37,37,37,-60,-59,-87,-68,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-50,37,37,37,-58,37,37,37,37,37,37,37,37,-30,37,-35,-54,-56,37,-31,-2,37,37,37,-33,-34,-55,-22,37,-23,37,-32,-57,37,37,37,]),'SYSTEM_ARR_CONTAINS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,93,95,96,97,98,99,100,101,102,103,104,114,115,117,122,123,124,125,126,127,132,133,134,135,136,137,138,139,140,168,170,171,172,173,180,181,189,201,202,206,209,210,212,213,215,216,221,222,224,236,240,242,247,250,257,258,259,260,261,262,265,267,268,269,270,272,],[38,38,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,38,38,38,-9,38,38,38,38,38,38,-86,38,-28,-67,38,38,38,38,-69,38,38,38,38,38,38,38,38,-29,38,38,38,-60,-59,-87,-68,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-50,38,38,38,-58,38,38,38,38,38,38,38,38,-30,38,-35,-54,-56,38,-31,-2,38,38,38,-33,-34,-55,-22,38,-23,38,-32,-57,38,38,38,]),'SYSTEM_ARR_INDEXOF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,93,95,96,97,98,99,100,101,102,103,104,114,115,117,122,123,124,125,126,127,132,133,134,135,136,137,138,139,140,168,170,171,172,173,180,181,189,201,202,206,209,210,212,213,215,216,221,222,224,236,240,242,247,250,257,258,259,260,261,262,265,267,268,269,270,272,],[39,39,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,39,39,39,-9,39,39,39,39,39,39,-86,39,-28,-67,39,39,39,39,-69,39,39,39,39,39,39,39,39,-29,39,39,39,-60,-59,-87,-68,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-50,39,39,39,-58,39,39,39,39,39,39,39,39,-30,39,-35,-54,-56,39,-31,-2,39,39,39,-33,-34,-55,-22,39,-23,39,-32,-57,39,39,39,]),'SYSTEM_ARR_AVG':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,93,95,96,97,98,99,100,101,102,103,104,114,115,117,122,123,124,125,126,127,132,133,134,135,136,137,138,139,140,168,170,171,172,173,180,181,189,201,202,206,209,210,212,213,215,216,221,222,224,236,240,242,247,250,257,258,259,260,261,262,265,267,268,269,270,272,],[40,40,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,40,40,40,-9,40,40,40,40,40,40,-86,40,-28,-67,40,40,40,40,-69,40,40,40,40,40,40,40,40,-29,40,40,40,-60,-59,-87,-68,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-50,40,40,40,-58,40,40,40,40,40,40,40,40,-30,40,-35,-54,-56,40,-31,-2,40,40,40,-33,-34,-55,-22,40,-23,40,-32,-57,40,40,40,]),'KEYWORD_INT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,102,105,122,123,170,171,172,203,204,213,216,219,221,222,236,240,242,257,258,259,260,261,262,265,267,268,269,270,272,],[41,41,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,41,41,-9,41,-86,41,-28,-67,-69,-29,41,-87,-68,-50,41,41,41,41,-30,-35,41,-54,-56,-31,-2,41,-33,-34,-55,-22,41,-23,41,-32,-57,41,41,41,]),'KEYWORD_FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,102,105,122,123,170,171,172,203,204,213,216,219,221,222,236,240,242,257,258,259,260,261,262,265,267,268,269,270,272,],[42,42,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,42,42,-9,42,-86,42,-28,-67,-69,-29,42,-87,-68,-50,42,42,42,42,-30,-35,42,-54,-56,-31,-2,42,-33,-34,-55,-22,42,-23,42,-32,-57,42,42,42,]),'KEYWORD_CHAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,102,105,122,123,170,171,172,203,204,213,216,219,221,222,236,240,242,257,258,259,260,261,262,265,267,268,269,270,272,],[43,43,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,43,43,-9,43,-86,43,-28,-67,-69,-29,43,-87,-68,-50,43,43,43,43,-30,-35,43,-54,-56,-31,-2,43,-33,-34,-55,-22,43,-23,43,-32,-57,43,43,43,]),'KEYWORD_VOID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,102,105,122,123,170,171,172,203,204,213,216,219,221,222,236,240,242,257,258,259,260,261,262,265,267,268,269,270,272,],[44,44,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,44,44,-9,44,-86,44,-28,-67,-69,-29,44,-87,-68,-50,44,44,44,44,-30,-35,44,-54,-56,-31,-2,44,-33,-34,-55,-22,44,-23,44,-32,-57,44,44,44,]),'KEYWORD_STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,102,105,122,123,170,171,172,203,204,213,216,219,221,222,236,240,242,257,258,259,260,261,262,265,267,268,269,270,272,],[45,45,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,45,45,-9,45,-86,45,-28,-67,-69,-29,45,-87,-68,-50,45,45,45,45,-30,-35,45,-54,-56,-31,-2,45,-33,-34,-55,-22,45,-23,45,-32,-57,45,45,45,]),'KEYWORD_BOOL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,102,105,122,123,170,171,172,203,204,213,216,219,221,222,236,240,242,257,258,259,260,261,262,265,267,268,269,270,272,],[46,46,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,46,46,-9,46,-86,46,-28,-67,-69,-29,46,-87,-68,-50,46,46,46,46,-30,-35,46,-54,-56,-31,-2,46,-33,-34,-55,-22,46,-23,46,-32,-57,46,46,46,]),'KEYWORD_FILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,102,105,122,123,170,171,172,203,204,213,216,219,221,222,236,240,242,257,258,259,260,261,262,265,267,268,269,270,272,],[47,47,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,47,47,-9,47,-86,47,-28,-67,-69,-29,47,-87,-68,-50,47,47,47,47,-30,-35,47,-54,-56,-31,-2,47,-33,-34,-55,-22,47,-23,47,-32,-57,47,47,47,]),'KEYWORD_SOCKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,102,105,122,123,170,171,172,203,204,213,216,219,221,222,236,240,242,257,258,259,260,261,262,265,267,268,269,270,272,],[48,48,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,48,48,-9,48,-86,48,-28,-67,-69,-29,48,-87,-68,-50,48,48,48,48,-30,-35,48,-54,-56,-31,-2,48,-33,-34,-55,-22,48,-23,48,-32,-57,48,48,48,]),'KEYWORD_DICT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,102,105,122,123,170,171,172,203,204,213,216,219,221,222,236,240,242,257,258,259,260,261,262,265,267,268,269,270,272,],[49,49,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,49,49,-9,49,-86,49,-28,-67,-69,-29,49,-87,-68,-50,49,49,49,49,-30,-35,49,-54,-56,-31,-2,49,-33,-34,-55,-22,49,-23,49,-32,-57,49,49,49,]),'KEYWORD_REGEX':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,102,105,122,123,170,171,172,203,204,213,216,219,221,222,236,240,242,257,258,259,260,261,262,265,267,268,269,270,272,],[50,50,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,50,50,-9,50,-86,50,-28,-67,-69,-29,50,-87,-68,-50,50,50,50,50,-30,-35,50,-54,-56,-31,-2,50,-33,-34,-55,-22,50,-23,50,-32,-57,50,50,50,]),'KEYWORD_ARRAY':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,102,105,122,123,170,171,172,203,204,213,216,219,221,222,236,240,242,257,258,259,260,261,262,265,267,268,269,270,272,],[51,51,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,51,51,-9,51,-86,51,-28,-67,-69,-29,51,-87,-68,-50,51,51,51,51,-30,-35,51,-54,-56,-31,-2,51,-33,-34,-55,-22,51,-23,51,-32,-57,51,51,51,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,52,62,64,65,90,102,122,123,170,213,216,221,222,236,240,257,258,259,260,262,267,268,],[0,-1,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-9,-86,-28,-67,-69,-29,-87,-68,-50,-30,-35,-54,-56,-31,-2,-33,-34,-55,-22,-23,-32,-57,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,24,52,62,63,64,65,67,68,69,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,102,107,122,123,141,143,144,145,146,151,167,169,170,184,185,186,187,188,190,191,192,193,194,195,196,197,198,199,200,205,207,208,211,213,216,221,222,228,229,236,240,245,246,249,251,252,253,254,255,257,258,259,260,262,263,267,268,270,271,272,],[-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,62,-9,-86,122,-28,-67,-93,-94,-95,-98,-101,-106,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,-124,-125,-126,-66,-69,-29,-71,-87,-68,-114,200,-128,-129,-130,-75,-70,-133,-50,-96,-97,-99,-100,-88,-102,-103,-104,-105,-107,-108,-110,-111,-112,-123,-127,-76,-78,-79,-82,-30,-35,-54,-56,-131,-132,-31,-2,262,-24,-72,-73,-77,-80,-81,-83,-33,-34,-55,-22,-23,-25,-32,-57,-27,-74,-26,]),'KEYWORD_CASE':([3,4,5,6,7,8,9,10,11,12,13,14,15,52,62,64,65,90,102,122,123,170,213,216,221,222,226,236,240,245,246,257,258,259,260,262,263,267,268,270,272,],[-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-9,-86,-28,-67,-69,-29,-87,-68,-50,-30,-35,-54,-56,247,-31,-2,247,-24,-33,-34,-55,-22,-23,-25,-32,-57,-27,-26,]),'KEYWORD_DEFAULT':([3,4,5,6,7,8,9,10,11,12,13,14,15,52,62,64,65,90,102,122,123,170,213,216,221,222,226,236,240,245,246,257,258,259,260,262,263,267,268,270,272,],[-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-9,-86,-28,-67,-69,-29,-87,-68,-50,-30,-35,-54,-56,248,-31,-2,248,-24,-33,-34,-55,-22,-23,-25,-32,-57,-27,-26,]),'KEYWORD_ELSE':([4,5,6,7,8,9,10,11,12,13,14,15,62,64,65,90,102,122,123,170,213,216,221,222,236,240,257,258,259,260,262,267,268,],[-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-86,-28,-67,-69,-29,-87,-68,-50,-30,-35,242,-56,-31,-2,-33,-34,-55,-22,-23,-32,-57,]),'ASSIGN':([17,18,30,53,118,120,161,169,178,179,182,214,],[-51,56,-52,103,181,-51,215,-133,-51,-52,103,237,]),'LPAREN':([17,19,20,22,23,26,31,32,33,34,35,36,37,38,39,40,53,54,55,56,57,58,61,70,74,77,85,89,93,95,96,97,98,99,100,101,102,103,104,113,114,115,117,124,125,126,127,132,133,134,135,136,137,138,139,140,168,173,178,180,181,189,201,202,206,209,210,212,213,215,216,224,236,247,250,257,258,267,],[54,57,58,60,61,85,92,93,94,95,96,97,98,99,100,101,105,85,85,85,85,85,85,85,85,54,85,85,85,85,85,85,85,85,85,85,-29,85,85,173,85,-60,-59,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,54,-58,85,85,85,85,85,85,85,85,-30,85,-35,85,-31,85,85,-33,-34,-32,]),'LBRACKET':([17,26,28,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,61,70,77,85,89,93,95,96,97,98,99,100,101,102,103,104,114,115,117,120,168,173,178,180,181,182,189,201,202,206,209,210,212,213,215,216,224,236,237,247,250,257,258,267,],[55,70,91,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,104,70,70,70,70,70,70,70,55,70,70,70,70,70,70,70,70,70,70,-29,70,70,70,-60,-59,55,70,70,55,-58,70,104,70,70,70,70,70,70,70,-30,70,-35,70,-31,70,70,70,-33,-34,-32,]),'SEMICOLON':([25,26,27,53,60,66,67,68,69,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,102,107,110,114,115,116,117,141,151,159,161,167,169,174,175,176,177,178,179,180,182,184,185,186,187,188,190,191,192,193,194,195,196,197,198,199,200,205,207,208,211,213,214,216,225,236,238,239,243,249,251,252,253,254,255,256,257,258,267,271,],[64,65,90,102,115,123,-93,-94,-95,-98,-101,-106,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,-124,-125,-126,-29,-71,170,-66,-60,180,-59,-114,-75,213,216,-70,-133,224,-63,-64,-65,-115,-125,-58,102,-96,-97,-99,-100,-88,-102,-103,-104,-105,-107,-108,-110,-111,-112,-123,-127,-76,-78,-79,-82,-30,236,-35,-53,-31,257,258,260,-72,-73,-77,-80,-81,-83,267,-33,-34,-32,-74,]),'MINUS':([26,54,55,56,57,58,61,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,93,95,96,97,98,99,100,101,102,103,104,107,114,115,117,124,125,126,127,132,133,134,135,136,137,138,139,140,141,151,167,168,169,173,178,179,180,181,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,206,207,208,209,210,211,212,213,215,216,224,236,247,249,250,251,252,253,254,255,257,258,267,271,],[74,74,74,74,74,74,74,74,137,-106,74,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,74,-124,-125,-126,74,74,74,74,74,74,74,74,74,-29,74,74,-71,74,-60,-59,74,74,74,74,74,74,74,74,74,74,74,74,74,-114,-75,-70,74,-133,74,-115,-125,-58,74,74,137,137,137,137,-107,-108,-110,-111,-112,-123,-127,74,74,-76,74,-78,-79,74,74,-82,74,-30,74,-35,74,-31,74,-72,74,-73,-77,-80,-81,-83,-33,-34,-32,-74,]),'INT_LITERAL':([26,54,55,56,57,58,61,70,74,85,89,93,95,96,97,98,99,100,101,102,103,104,114,115,117,124,125,126,127,132,133,134,135,136,137,138,139,140,168,173,180,181,189,201,202,206,209,210,212,213,215,216,224,236,247,250,257,258,267,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-29,78,78,78,-60,-59,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-58,78,78,78,78,78,78,78,78,-30,78,-35,78,-31,78,78,-33,-34,-32,]),'FLOAT_LITERAL':([26,54,55,56,57,58,61,70,74,85,89,93,95,96,97,98,99,100,101,102,103,104,114,115,117,124,125,126,127,132,133,134,135,136,137,138,139,140,168,173,180,181,189,201,202,206,209,210,212,213,215,216,224,236,247,250,257,258,267,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-29,79,79,79,-60,-59,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-58,79,79,79,79,79,79,79,79,-30,79,-35,79,-31,79,79,-33,-34,-32,]),'STRING_LITERAL':([26,54,55,56,57,58,61,70,74,85,89,93,95,96,97,98,99,100,101,102,103,104,114,115,117,124,125,126,127,132,133,134,135,136,137,138,139,140,168,173,180,181,189,201,202,206,209,210,212,213,215,216,224,236,247,250,257,258,267,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-29,80,80,80,-60,-59,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-58,80,80,80,80,80,80,80,80,-30,80,-35,80,-31,80,80,-33,-34,-32,]),'CHAR_LITERAL':([26,54,55,56,57,58,61,70,74,85,89,93,95,96,97,98,99,100,101,102,103,104,114,115,117,124,125,126,127,132,133,134,135,136,137,138,139,140,168,173,180,181,189,201,202,206,209,210,212,213,215,216,224,236,247,250,257,258,267,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-29,81,81,81,-60,-59,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-58,81,81,81,81,81,81,81,81,-30,81,-35,81,-31,81,81,-33,-34,-32,]),'KEYWORD_TRUE':([26,54,55,56,57,58,61,70,74,85,89,93,95,96,97,98,99,100,101,102,103,104,114,115,117,124,125,126,127,132,133,134,135,136,137,138,139,140,168,173,180,181,189,201,202,206,209,210,212,213,215,216,224,236,247,250,257,258,267,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-29,82,82,82,-60,-59,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-58,82,82,82,82,82,82,82,82,-30,82,-35,82,-31,82,82,-33,-34,-32,]),'KEYWORD_FALSE':([26,54,55,56,57,58,61,70,74,85,89,93,95,96,97,98,99,100,101,102,103,104,114,115,117,124,125,126,127,132,133,134,135,136,137,138,139,140,168,173,180,181,189,201,202,206,209,210,212,213,215,216,224,236,247,250,257,258,267,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-29,83,83,83,-60,-59,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-58,83,83,83,83,83,83,83,83,-30,83,-35,83,-31,83,83,-33,-34,-32,]),'KEYWORD_NULL':([26,54,55,56,57,58,61,70,74,85,89,93,95,96,97,98,99,100,101,102,103,104,114,115,117,124,125,126,127,132,133,134,135,136,137,138,139,140,168,173,180,181,189,201,202,206,209,210,212,213,215,216,224,236,247,250,257,258,267,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-29,84,84,84,-60,-59,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-58,84,84,84,84,84,84,84,84,-30,84,-35,84,-31,84,84,-33,-34,-32,]),'RPAREN':([28,29,41,42,43,44,45,46,47,48,49,50,51,54,67,68,69,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,94,105,106,107,108,111,112,121,141,142,148,151,152,154,155,158,163,164,165,166,167,169,175,176,177,178,179,184,185,186,187,188,190,191,192,193,194,195,196,197,198,199,200,205,207,208,211,217,220,223,224,225,230,231,232,233,234,235,241,244,249,251,252,253,254,255,266,271,],[-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,107,-93,-94,-95,-98,-101,-106,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,-124,-125,-126,151,-66,167,-71,-84,171,172,183,-114,199,-49,-75,205,207,208,211,218,-3,-4,-5,-70,-133,-63,-64,-65,-115,-125,-96,-97,-99,-100,-88,-102,-103,-104,-105,-107,-108,-110,-111,-112,-123,-127,-76,-78,-79,-82,-7,-85,243,-66,-53,249,251,252,253,254,255,-6,261,-72,-73,-77,-80,-81,-83,271,-74,]),'COMMA':([28,29,41,42,43,44,45,46,47,48,49,50,51,67,68,69,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,106,107,108,129,131,141,144,146,148,149,150,151,153,156,157,158,164,166,167,169,184,185,186,187,188,190,191,192,193,194,195,196,197,198,199,200,205,207,208,211,217,220,227,228,229,231,241,249,251,252,253,254,255,271,],[-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-93,-94,-95,-98,-101,-106,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,-124,-125,-126,168,-71,-84,189,-91,-114,201,-130,-49,203,204,-75,206,209,210,212,219,-5,-70,-133,-96,-97,-99,-100,-88,-102,-103,-104,-105,-107,-108,-110,-111,-112,-123,-127,-76,-78,-79,-82,-7,-85,-92,-131,-132,250,-6,-72,-73,-77,-80,-81,-83,-74,]),'RBRACKET':([67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,91,104,107,109,128,129,130,131,141,151,160,167,169,184,185,186,187,188,190,191,192,193,194,195,196,197,198,199,200,205,207,208,211,227,249,251,252,253,254,255,271,],[-93,-94,-95,-66,-98,-101,-106,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,-124,-125,-126,148,161,-71,169,188,-89,-90,-91,-114,-75,214,-70,-133,-96,-97,-99,-100,-88,-102,-103,-104,-105,-107,-108,-110,-111,-112,-123,-127,-76,-78,-79,-82,-92,-72,-73,-77,-80,-81,-83,-74,]),'COLON':([67,68,69,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,107,141,147,151,167,169,184,185,186,187,188,190,191,192,193,194,195,196,197,198,199,200,205,207,208,211,248,249,251,252,253,254,255,264,271,],[-93,-94,-95,-98,-101,-106,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,-124,-125,-126,-71,-114,202,-75,-70,-133,-96,-97,-99,-100,-88,-102,-103,-104,-105,-107,-108,-110,-111,-112,-123,-127,-76,-78,-79,-82,265,-72,-73,-77,-80,-81,-83,269,-74,]),'AND':([67,69,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,107,141,151,167,169,178,179,184,185,186,187,190,191,192,193,194,195,196,197,198,199,200,205,207,208,211,249,251,252,253,254,255,271,],[124,-95,-98,-101,-106,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,-124,-125,-126,-71,-114,-75,-70,-133,-115,-125,-96,-97,-99,-100,-102,-103,-104,-105,-107,-108,-110,-111,-112,-123,-127,-76,-78,-79,-82,-72,-73,-77,-80,-81,-83,-74,]),'OR':([67,69,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,107,141,151,167,169,178,179,184,185,186,187,190,191,192,193,194,195,196,197,198,199,200,205,207,208,211,249,251,252,253,254,255,271,],[125,-95,-98,-101,-106,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,-124,-125,-126,-71,-114,-75,-70,-133,-115,-125,-96,-97,-99,-100,-102,-103,-104,-105,-107,-108,-110,-111,-112,-123,-127,-76,-78,-79,-82,-72,-73,-77,-80,-81,-83,-74,]),'EQ':([69,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,107,141,151,167,169,178,179,184,185,186,187,190,191,192,193,194,195,196,197,198,199,200,205,207,208,211,249,251,252,253,254,255,271,],[126,-98,-101,-106,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,-124,-125,-126,-71,-114,-75,-70,-133,-115,-125,126,126,-99,-100,-102,-103,-104,-105,-107,-108,-110,-111,-112,-123,-127,-76,-78,-79,-82,-72,-73,-77,-80,-81,-83,-74,]),'NEQ':([69,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,107,141,151,167,169,178,179,184,185,186,187,190,191,192,193,194,195,196,197,198,199,200,205,207,208,211,249,251,252,253,254,255,271,],[127,-98,-101,-106,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,-124,-125,-126,-71,-114,-75,-70,-133,-115,-125,127,127,-99,-100,-102,-103,-104,-105,-107,-108,-110,-111,-112,-123,-127,-76,-78,-79,-82,-72,-73,-77,-80,-81,-83,-74,]),'GT':([71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,107,141,151,167,169,178,179,186,187,190,191,192,193,194,195,196,197,198,199,200,205,207,208,211,249,251,252,253,254,255,271,],[132,-101,-106,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,-124,-125,-126,-71,-114,-75,-70,-133,-115,-125,132,132,-102,-103,-104,-105,-107,-108,-110,-111,-112,-123,-127,-76,-78,-79,-82,-72,-73,-77,-80,-81,-83,-74,]),'LT':([71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,107,141,151,167,169,178,179,186,187,190,191,192,193,194,195,196,197,198,199,200,205,207,208,211,249,251,252,253,254,255,271,],[133,-101,-106,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,-124,-125,-126,-71,-114,-75,-70,-133,-115,-125,133,133,-102,-103,-104,-105,-107,-108,-110,-111,-112,-123,-127,-76,-78,-79,-82,-72,-73,-77,-80,-81,-83,-74,]),'GEQ':([71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,107,141,151,167,169,178,179,186,187,190,191,192,193,194,195,196,197,198,199,200,205,207,208,211,249,251,252,253,254,255,271,],[134,-101,-106,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,-124,-125,-126,-71,-114,-75,-70,-133,-115,-125,134,134,-102,-103,-104,-105,-107,-108,-110,-111,-112,-123,-127,-76,-78,-79,-82,-72,-73,-77,-80,-81,-83,-74,]),'LEQ':([71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,107,141,151,167,169,178,179,186,187,190,191,192,193,194,195,196,197,198,199,200,205,207,208,211,249,251,252,253,254,255,271,],[135,-101,-106,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,-124,-125,-126,-71,-114,-75,-70,-133,-115,-125,135,135,-102,-103,-104,-105,-107,-108,-110,-111,-112,-123,-127,-76,-78,-79,-82,-72,-73,-77,-80,-81,-83,-74,]),'PLUS':([72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,107,141,151,167,169,178,179,190,191,192,193,194,195,196,197,198,199,200,205,207,208,211,249,251,252,253,254,255,271,],[136,-106,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,-124,-125,-126,-71,-114,-75,-70,-133,-115,-125,136,136,136,136,-107,-108,-110,-111,-112,-123,-127,-76,-78,-79,-82,-72,-73,-77,-80,-81,-83,-74,]),'MUL':([73,75,76,77,78,79,80,81,82,83,84,86,87,88,107,141,151,167,169,178,179,194,195,196,197,198,199,200,205,207,208,211,249,251,252,253,254,255,271,],[138,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,-124,-125,-126,-71,-114,-75,-70,-133,-115,-125,138,138,-110,-111,-112,-123,-127,-76,-78,-79,-82,-72,-73,-77,-80,-81,-83,-74,]),'DIV':([73,75,76,77,78,79,80,81,82,83,84,86,87,88,107,141,151,167,169,178,179,194,195,196,197,198,199,200,205,207,208,211,249,251,252,253,254,255,271,],[139,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,-124,-125,-126,-71,-114,-75,-70,-133,-115,-125,139,139,-110,-111,-112,-123,-127,-76,-78,-79,-82,-72,-73,-77,-80,-81,-83,-74,]),'MOD':([73,75,76,77,78,79,80,81,82,83,84,86,87,88,107,141,151,167,169,178,179,194,195,196,197,198,199,200,205,207,208,211,249,251,252,253,254,255,271,],[140,-109,-113,-115,-116,-117,-118,-119,-120,-121,-122,-124,-125,-126,-71,-114,-75,-70,-133,-115,-125,140,140,-110,-111,-112,-123,-127,-76,-78,-79,-82,-72,-73,-77,-80,-81,-83,-74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,24,265,269,],[2,63,270,272,]),'statement':([0,2,21,24,63,171,172,242,261,265,269,270,272,],[3,52,59,3,52,221,222,259,268,3,3,52,52,]),'declaration_statement':([0,2,21,24,60,63,171,172,242,261,265,269,270,272,],[4,4,4,4,117,4,4,4,4,4,4,4,4,4,]),'assignment_statement':([0,2,21,24,63,171,172,242,261,265,269,270,272,],[5,5,5,5,5,5,5,5,5,5,5,5,5,]),'if_statement':([0,2,21,24,63,171,172,242,261,265,269,270,272,],[6,6,6,6,6,6,6,6,6,6,6,6,6,]),'while_statement':([0,2,21,24,63,171,172,242,261,265,269,270,272,],[7,7,7,7,7,7,7,7,7,7,7,7,7,]),'do_while_statement':([0,2,21,24,63,171,172,242,261,265,269,270,272,],[8,8,8,8,8,8,8,8,8,8,8,8,8,]),'for_statement':([0,2,21,24,63,171,172,242,261,265,269,270,272,],[9,9,9,9,9,9,9,9,9,9,9,9,9,]),'switch_statement':([0,2,21,24,63,171,172,242,261,265,269,270,272,],[10,10,10,10,10,10,10,10,10,10,10,10,10,]),'break_statement':([0,2,21,24,63,171,172,242,261,265,269,270,272,],[11,11,11,11,11,11,11,11,11,11,11,11,11,]),'return_statement':([0,2,21,24,63,171,172,242,261,265,269,270,272,],[12,12,12,12,12,12,12,12,12,12,12,12,12,]),'function_call_statement':([0,2,21,24,63,171,172,242,261,265,269,270,272,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'block_statement':([0,2,21,24,63,171,172,218,242,261,265,269,270,272,],[14,14,14,14,14,14,14,240,14,14,14,14,14,14,]),'function_definition':([0,2,21,24,63,171,172,242,261,265,269,270,272,],[15,15,15,15,15,15,15,15,15,15,15,15,15,]),'type_specifier':([0,2,21,24,60,63,105,171,172,203,204,219,242,261,265,269,270,272,],[16,16,16,16,119,16,162,16,16,230,231,162,16,16,16,16,16,16,]),'left_hand_side':([0,2,21,24,60,63,114,171,172,224,242,261,265,269,270,272,],[18,18,18,18,118,18,118,18,18,118,18,18,18,18,18,18,]),'function_call':([0,2,21,24,26,54,55,56,57,58,61,63,70,74,85,89,93,95,96,97,98,99,100,101,103,104,114,124,125,126,127,132,133,134,135,136,137,138,139,140,168,171,172,173,181,189,201,202,206,209,210,212,215,224,242,247,250,261,265,269,270,272,],[27,27,27,27,86,86,86,86,86,86,86,27,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,27,27,86,86,86,86,86,86,86,86,86,86,86,27,86,86,27,27,27,27,27,]),'primitive_type':([0,2,21,24,60,63,105,171,172,203,204,219,242,261,265,269,270,272,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'array_type':([0,2,21,24,60,63,105,171,172,203,204,219,242,261,265,269,270,272,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'subscript_access':([0,2,21,24,26,54,55,56,57,58,60,61,63,70,74,85,89,93,95,96,97,98,99,100,101,103,104,114,124,125,126,127,132,133,134,135,136,137,138,139,140,168,171,172,173,181,189,201,202,206,209,210,212,215,224,242,247,250,261,265,269,270,272,],[30,30,30,30,87,87,87,87,87,87,30,87,30,87,87,87,87,87,87,87,87,87,87,87,87,87,87,179,87,87,87,87,87,87,87,87,87,87,87,87,87,87,30,30,87,87,87,87,87,87,87,87,87,87,179,30,87,87,30,30,30,30,30,]),'expression':([26,54,55,56,57,58,61,70,85,89,93,95,96,97,98,99,100,101,103,104,114,168,173,181,189,201,202,206,209,210,212,215,224,247,250,],[66,108,109,110,111,112,121,131,142,147,150,152,153,154,155,156,157,158,159,160,175,220,223,225,227,147,229,232,233,234,235,239,175,264,266,]),'logical_expression':([26,54,55,56,57,58,61,70,85,89,93,95,96,97,98,99,100,101,103,104,114,168,173,181,189,201,202,206,209,210,212,215,224,247,250,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'initializer_list':([26,54,55,56,57,58,61,70,85,89,93,95,96,97,98,99,100,101,103,104,114,168,173,181,189,201,202,206,209,210,212,215,224,237,247,250,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,238,68,256,68,68,]),'equality_expression':([26,54,55,56,57,58,61,70,85,89,93,95,96,97,98,99,100,101,103,104,114,124,125,168,173,181,189,201,202,206,209,210,212,215,224,247,250,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,184,185,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'relational_expression':([26,54,55,56,57,58,61,70,85,89,93,95,96,97,98,99,100,101,103,104,114,124,125,126,127,168,173,181,189,201,202,206,209,210,212,215,224,247,250,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,186,187,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'additive_expression':([26,54,55,56,57,58,61,70,85,89,93,95,96,97,98,99,100,101,103,104,114,124,125,126,127,132,133,134,135,168,173,181,189,201,202,206,209,210,212,215,224,247,250,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,190,191,192,193,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'multiplicative_expression':([26,54,55,56,57,58,61,70,85,89,93,95,96,97,98,99,100,101,103,104,114,124,125,126,127,132,133,134,135,136,137,168,173,181,189,201,202,206,209,210,212,215,224,247,250,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,194,195,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'unary_expression':([26,54,55,56,57,58,61,70,74,85,89,93,95,96,97,98,99,100,101,103,104,114,124,125,126,127,132,133,134,135,136,137,138,139,140,168,173,181,189,201,202,206,209,210,212,215,224,247,250,],[75,75,75,75,75,75,75,75,141,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,196,197,198,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'primary_expression':([26,54,55,56,57,58,61,70,74,85,89,93,95,96,97,98,99,100,101,103,104,114,124,125,126,127,132,133,134,135,136,137,138,139,140,168,173,181,189,201,202,206,209,210,212,215,224,247,250,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'dictionary_literal':([26,54,55,56,57,58,61,70,74,85,89,93,95,96,97,98,99,100,101,103,104,114,124,125,126,127,132,133,134,135,136,137,138,139,140,168,173,181,189,201,202,206,209,210,212,215,224,247,250,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'argument_list':([54,],[106,]),'for_init':([60,],[114,]),'assignment_statement_no_semi':([60,114,224,],[116,176,176,]),'expression_list_opt':([70,],[128,]),'expression_list':([70,],[129,]),'empty':([70,89,105,114,224,],[130,145,165,177,177,]),'key_value_list_opt':([89,],[143,]),'key_value_list':([89,],[144,]),'key_value':([89,201,],[146,228,]),'params':([105,],[163,]),'param_list':([105,],[164,]),'param':([105,219,],[166,241,]),'expression_opt':([114,224,],[174,244,]),'case_list':([226,],[245,]),'case_clause':([226,245,],[246,263,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',346),
  ('function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement','function_definition',6,'p_function_definition','parser.py',350),
  ('params -> param_list','params',1,'p_params','parser.py',358),
  ('params -> empty','params',1,'p_params','parser.py',359),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',366),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',367),
  ('param -> type_specifier IDENTIFIER','param',2,'p_param','parser.py',374),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',378),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',379),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',386),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',387),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',388),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',389),
  ('statement -> do_while_statement','statement',1,'p_statement','parser.py',390),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',391),
  ('statement -> switch_statement','statement',1,'p_statement','parser.py',392),
  ('statement -> break_statement','statement',1,'p_statement','parser.py',393),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',394),
  ('statement -> function_call_statement','statement',1,'p_statement','parser.py',395),
  ('statement -> block_statement','statement',1,'p_statement','parser.py',396),
  ('statement -> function_definition','statement',1,'p_statement','parser.py',397),
  ('do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON','do_while_statement',7,'p_do_while_statement','parser.py',401),
  ('switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE','switch_statement',7,'p_switch_statement','parser.py',405),
  ('case_list -> case_clause','case_list',1,'p_case_list','parser.py',409),
  ('case_list -> case_list case_clause','case_list',2,'p_case_list','parser.py',410),
  ('case_clause -> KEYWORD_CASE expression COLON statement_list','case_clause',4,'p_case_clause','parser.py',417),
  ('case_clause -> KEYWORD_DEFAULT COLON statement_list','case_clause',3,'p_case_clause','parser.py',418),
  ('break_statement -> KEYWORD_BREAK SEMICOLON','break_statement',2,'p_break_statement','parser.py',425),
  ('declaration_statement -> type_specifier IDENTIFIER SEMICOLON','declaration_statement',3,'p_declaration_statement','parser.py',429),
  ('declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON','declaration_statement',5,'p_declaration_statement','parser.py',430),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON','declaration_statement',6,'p_declaration_statement','parser.py',431),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON','declaration_statement',8,'p_declaration_statement','parser.py',432),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON','declaration_statement',7,'p_declaration_statement','parser.py',433),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON','declaration_statement',7,'p_declaration_statement','parser.py',434),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON','declaration_statement',5,'p_declaration_statement','parser.py',435),
  ('type_specifier -> primitive_type','type_specifier',1,'p_type_specifier','parser.py',456),
  ('type_specifier -> array_type','type_specifier',1,'p_type_specifier','parser.py',457),
  ('primitive_type -> KEYWORD_INT','primitive_type',1,'p_primitive_type','parser.py',461),
  ('primitive_type -> KEYWORD_FLOAT','primitive_type',1,'p_primitive_type','parser.py',462),
  ('primitive_type -> KEYWORD_CHAR','primitive_type',1,'p_primitive_type','parser.py',463),
  ('primitive_type -> KEYWORD_VOID','primitive_type',1,'p_primitive_type','parser.py',464),
  ('primitive_type -> KEYWORD_STRING','primitive_type',1,'p_primitive_type','parser.py',465),
  ('primitive_type -> KEYWORD_BOOL','primitive_type',1,'p_primitive_type','parser.py',466),
  ('primitive_type -> KEYWORD_FILE','primitive_type',1,'p_primitive_type','parser.py',467),
  ('primitive_type -> KEYWORD_SOCKET','primitive_type',1,'p_primitive_type','parser.py',468),
  ('primitive_type -> KEYWORD_DICT','primitive_type',1,'p_primitive_type','parser.py',469),
  ('primitive_type -> KEYWORD_REGEX','primitive_type',1,'p_primitive_type','parser.py',470),
  ('primitive_type -> KEYWORD_ARRAY','primitive_type',1,'p_primitive_type','parser.py',471),
  ('array_type -> primitive_type LBRACKET RBRACKET','array_type',3,'p_array_type','parser.py',476),
  ('assignment_statement -> left_hand_side ASSIGN expression SEMICOLON','assignment_statement',4,'p_assignment_statement','parser.py',480),
  ('left_hand_side -> IDENTIFIER','left_hand_side',1,'p_left_hand_side','parser.py',484),
  ('left_hand_side -> subscript_access','left_hand_side',1,'p_left_hand_side','parser.py',485),
  ('assignment_statement_no_semi -> left_hand_side ASSIGN expression','assignment_statement_no_semi',3,'p_assignment_statement_no_semi','parser.py',492),
  ('if_statement -> KEYWORD_IF LPAREN expression RPAREN statement','if_statement',5,'p_if_statement','parser.py',496),
  ('if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement','if_statement',7,'p_if_statement','parser.py',497),
  ('while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement','while_statement',5,'p_while_statement','parser.py',504),
  ('for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement','for_statement',8,'p_for_statement','parser.py',508),
  ('for_init -> assignment_statement_no_semi SEMICOLON','for_init',2,'p_for_init','parser.py',512),
  ('for_init -> declaration_statement','for_init',1,'p_for_init','parser.py',513),
  ('for_init -> SEMICOLON','for_init',1,'p_for_init','parser.py',514),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',523),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_expression_statement','parser.py',524),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','parser.py',531),
  ('expression_opt -> assignment_statement_no_semi','expression_opt',1,'p_expression_opt','parser.py',532),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parser.py',533),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',537),
  ('return_statement -> KEYWORD_RETURN SEMICOLON','return_statement',2,'p_return_statement','parser.py',541),
  ('return_statement -> KEYWORD_RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',542),
  ('function_call_statement -> function_call SEMICOLON','function_call_statement',2,'p_function_call_statement','parser.py',549),
  ('function_call -> IDENTIFIER LPAREN argument_list RPAREN','function_call',4,'p_function_call','parser.py',553),
  ('function_call -> IDENTIFIER LPAREN RPAREN','function_call',3,'p_function_call','parser.py',554),
  ('function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN','function_call',6,'p_function_call','parser.py',555),
  ('function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN','function_call',6,'p_function_call','parser.py',556),
  ('function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN','function_call',8,'p_function_call','parser.py',557),
  ('function_call -> KEYWORD_EXIT LPAREN RPAREN','function_call',3,'p_function_call','parser.py',558),
  ('function_call -> SYSTEM_SLEEP LPAREN expression RPAREN','function_call',4,'p_function_call','parser.py',559),
  ('function_call -> SYSTEM_ARR_PUSH LPAREN expression COMMA expression RPAREN','function_call',6,'p_function_call','parser.py',560),
  ('function_call -> SYSTEM_ARR_POP LPAREN expression RPAREN','function_call',4,'p_function_call','parser.py',561),
  ('function_call -> SYSTEM_ARR_SIZE LPAREN expression RPAREN','function_call',4,'p_function_call','parser.py',562),
  ('function_call -> SYSTEM_ARR_CONTAINS LPAREN expression COMMA expression RPAREN','function_call',6,'p_function_call','parser.py',563),
  ('function_call -> SYSTEM_ARR_INDEXOF LPAREN expression COMMA expression RPAREN','function_call',6,'p_function_call','parser.py',564),
  ('function_call -> SYSTEM_ARR_AVG LPAREN expression RPAREN','function_call',4,'p_function_call','parser.py',565),
  ('function_call -> SYSTEM_ARR_AVG LPAREN expression COMMA expression RPAREN','function_call',6,'p_function_call','parser.py',566),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',597),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','parser.py',598),
  ('block_statement -> LBRACE RBRACE','block_statement',2,'p_block_statement','parser.py',605),
  ('block_statement -> LBRACE statement_list RBRACE','block_statement',3,'p_block_statement','parser.py',606),
  ('initializer_list -> LBRACKET expression_list_opt RBRACKET','initializer_list',3,'p_initializer_list','parser.py',613),
  ('expression_list_opt -> expression_list','expression_list_opt',1,'p_expression_list_opt','parser.py',617),
  ('expression_list_opt -> empty','expression_list_opt',1,'p_expression_list_opt','parser.py',618),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',625),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',626),
  ('expression -> logical_expression','expression',1,'p_expression','parser.py',633),
  ('expression -> initializer_list','expression',1,'p_expression','parser.py',634),
  ('logical_expression -> equality_expression','logical_expression',1,'p_logical_expression','parser.py',638),
  ('logical_expression -> logical_expression AND equality_expression','logical_expression',3,'p_logical_expression','parser.py',639),
  ('logical_expression -> logical_expression OR equality_expression','logical_expression',3,'p_logical_expression','parser.py',640),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','parser.py',647),
  ('equality_expression -> equality_expression EQ relational_expression','equality_expression',3,'p_equality_expression','parser.py',648),
  ('equality_expression -> equality_expression NEQ relational_expression','equality_expression',3,'p_equality_expression','parser.py',649),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression','parser.py',656),
  ('relational_expression -> relational_expression GT additive_expression','relational_expression',3,'p_relational_expression','parser.py',657),
  ('relational_expression -> relational_expression LT additive_expression','relational_expression',3,'p_relational_expression','parser.py',658),
  ('relational_expression -> relational_expression GEQ additive_expression','relational_expression',3,'p_relational_expression','parser.py',659),
  ('relational_expression -> relational_expression LEQ additive_expression','relational_expression',3,'p_relational_expression','parser.py',660),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','parser.py',667),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',668),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',669),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','parser.py',676),
  ('multiplicative_expression -> multiplicative_expression MUL unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',677),
  ('multiplicative_expression -> multiplicative_expression DIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',678),
  ('multiplicative_expression -> multiplicative_expression MOD unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',679),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','parser.py',686),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','parser.py',687),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','parser.py',694),
  ('primary_expression -> INT_LITERAL','primary_expression',1,'p_primary_expression','parser.py',695),
  ('primary_expression -> FLOAT_LITERAL','primary_expression',1,'p_primary_expression','parser.py',696),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','parser.py',697),
  ('primary_expression -> CHAR_LITERAL','primary_expression',1,'p_primary_expression','parser.py',698),
  ('primary_expression -> KEYWORD_TRUE','primary_expression',1,'p_primary_expression','parser.py',699),
  ('primary_expression -> KEYWORD_FALSE','primary_expression',1,'p_primary_expression','parser.py',700),
  ('primary_expression -> KEYWORD_NULL','primary_expression',1,'p_primary_expression','parser.py',701),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','parser.py',702),
  ('primary_expression -> function_call','primary_expression',1,'p_primary_expression','parser.py',703),
  ('primary_expression -> subscript_access','primary_expression',1,'p_primary_expression','parser.py',704),
  ('primary_expression -> dictionary_literal','primary_expression',1,'p_primary_expression','parser.py',705),
  ('dictionary_literal -> LBRACE key_value_list_opt RBRACE','dictionary_literal',3,'p_dictionary_literal','parser.py',719),
  ('key_value_list_opt -> key_value_list','key_value_list_opt',1,'p_key_value_list_opt','parser.py',723),
  ('key_value_list_opt -> empty','key_value_list_opt',1,'p_key_value_list_opt','parser.py',724),
  ('key_value_list -> key_value','key_value_list',1,'p_key_value_list','parser.py',731),
  ('key_value_list -> key_value_list COMMA key_value','key_value_list',3,'p_key_value_list','parser.py',732),
  ('key_value -> expression COLON expression','key_value',3,'p_key_value','parser.py',739),
  ('subscript_access -> IDENTIFIER LBRACKET expression RBRACKET','subscript_access',4,'p_subscript_access','parser.py',743),
]
