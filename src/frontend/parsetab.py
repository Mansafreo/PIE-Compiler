
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEQleftGTLTGEQLEQleftPLUSMINUSleftMULDIVMODrightUMINUSnonassocLOWER_THAN_ELSEnonassocKEYWORD_ELSEAND ASSIGN CHAR_LITERAL COLON COMMA COMMENT DIV DOT EQ FLOAT_LITERAL GEQ GT IDENTIFIER INT_LITERAL KEYWORD_BOOL KEYWORD_BREAK KEYWORD_CASE KEYWORD_CHAR KEYWORD_CONTINUE KEYWORD_DEFAULT KEYWORD_DICT KEYWORD_DO KEYWORD_ELSE KEYWORD_EXIT KEYWORD_FALSE KEYWORD_FILE KEYWORD_FLOAT KEYWORD_FOR KEYWORD_IF KEYWORD_INT KEYWORD_NULL KEYWORD_RETURN KEYWORD_SOCKET KEYWORD_STRING KEYWORD_SWITCH KEYWORD_TRUE KEYWORD_VOID KEYWORD_WHILE LBRACE LBRACKET LEQ LPAREN LT MINUS MOD MUL NEQ OR PLUS RBRACE RBRACKET RPAREN SEMICOLON STRING_LITERAL SYSTEM_EXIT SYSTEM_INPUT SYSTEM_OUTPUTprogram : statement_listfunction_definition : type_specifier IDENTIFIER LPAREN params RPAREN block_statementparams : param_list\n                  | emptyparam_list : param\n                      | param_list COMMA paramparam : type_specifier IDENTIFIERstatement_list : statement\n                         | statement_list statementstatement : declaration_statement\n                    | assignment_statement\n                    | if_statement\n                    | while_statement\n                    | do_while_statement\n                    | for_statement\n                    | switch_statement\n                    | break_statement\n                    | return_statement\n                    | function_call_statement\n                    | block_statement\n                    | function_definitiondo_while_statement : KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLONswitch_statement : KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACEcase_list : case_clause\n                     | case_list case_clausecase_clause : KEYWORD_CASE expression COLON statement_list\n                       | KEYWORD_DEFAULT COLON statement_listbreak_statement : KEYWORD_BREAK SEMICOLONdeclaration_statement : type_specifier IDENTIFIER SEMICOLON\n                                | type_specifier IDENTIFIER ASSIGN expression SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLONtype_specifier : primitive_type\n                         | array_typeprimitive_type : KEYWORD_INT\n                          | KEYWORD_FLOAT\n                          | KEYWORD_CHAR\n                          | KEYWORD_VOID\n                          | KEYWORD_STRING\n                          | KEYWORD_BOOL\n                          | KEYWORD_FILE\n                          | KEYWORD_SOCKET\n                          | KEYWORD_DICTarray_type : primitive_type LBRACKET RBRACKETassignment_statement : left_hand_side ASSIGN expression SEMICOLONleft_hand_side : IDENTIFIER\n                         | subscript_accessassignment_statement_no_semi : left_hand_side ASSIGN expressionif_statement : KEYWORD_IF LPAREN expression RPAREN statement %prec LOWER_THAN_ELSE\n                        | KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statementwhile_statement : KEYWORD_WHILE LPAREN expression RPAREN statementfor_statement : KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statementfor_init : assignment_statement_no_semi SEMICOLON\n                    | declaration_statement\n                    | SEMICOLONexpression_statement : expression SEMICOLON\n                               | SEMICOLONexpression_opt : expression\n                         | assignment_statement_no_semi\n                         | emptyempty :return_statement : KEYWORD_RETURN SEMICOLON\n                           | KEYWORD_RETURN expression SEMICOLONfunction_call_statement : function_call SEMICOLONfunction_call : IDENTIFIER LPAREN argument_list RPAREN\n                        | IDENTIFIER LPAREN RPAREN\n                        | SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN\n                        | SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN\n                        | SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN\n                        | KEYWORD_EXIT LPAREN RPARENargument_list : expression\n                        | argument_list COMMA expressionblock_statement : LBRACE RBRACE\n                          | LBRACE statement_list RBRACEinitializer_list : LBRACE expression_list_opt RBRACEexpression_list_opt : expression_list\n                               | emptyexpression_list : expression\n                           | expression_list COMMA expressionexpression : logical_expression\n                      | initializer_listlogical_expression : equality_expression\n                             | logical_expression AND equality_expression\n                             | logical_expression OR equality_expressionequality_expression : relational_expression\n                               | equality_expression EQ relational_expression\n                               | equality_expression NEQ relational_expressionrelational_expression : additive_expression\n                                | relational_expression GT additive_expression\n                                | relational_expression LT additive_expression\n                                | relational_expression GEQ additive_expression\n                                | relational_expression LEQ additive_expressionadditive_expression : multiplicative_expression\n                              | additive_expression PLUS multiplicative_expression\n                              | additive_expression MINUS multiplicative_expressionmultiplicative_expression : unary_expression\n                                    | multiplicative_expression MUL unary_expression\n                                    | multiplicative_expression DIV unary_expression\n                                    | multiplicative_expression MOD unary_expressionunary_expression : primary_expression\n                           | MINUS unary_expression %prec UMINUSprimary_expression : IDENTIFIER\n                             | INT_LITERAL\n                             | FLOAT_LITERAL\n                             | STRING_LITERAL\n                             | CHAR_LITERAL\n                             | KEYWORD_TRUE\n                             | KEYWORD_FALSE\n                             | KEYWORD_NULL\n                             | LPAREN expression RPAREN\n                             | function_call\n                             | subscript_access\n                             | dictionary_literaldictionary_literal : LBRACE key_value_list_opt RBRACEkey_value_list_opt : key_value_list\n                              | emptykey_value_list : key_value\n                          | key_value_list COMMA key_valuekey_value : expression COLON expressionsubscript_access : IDENTIFIER LBRACKET expression RBRACKET'

_lr_action_items = {'KEYWORD_IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,53,54,55,56,80,85,105,106,145,146,147,182,189,190,200,203,205,215,218,219,220,221,224,226,227,228,230,],[19,19,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,19,19,-9,-73,19,-28,-62,-64,-29,-74,-63,-45,19,19,-30,-49,-51,-31,-2,19,-32,-50,-22,19,-23,19,-52,19,19,19,]),'KEYWORD_WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,50,53,54,55,56,80,85,105,106,145,146,147,182,189,190,200,203,205,215,218,219,220,221,224,226,227,228,230,],[20,20,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,20,20,-9,96,-73,20,-28,-62,-64,-29,-74,-63,-45,20,20,-30,-49,-51,-31,-2,20,-32,-50,-22,20,-23,20,-52,20,20,20,]),'KEYWORD_DO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,53,54,55,56,80,85,105,106,145,146,147,182,189,190,200,203,205,215,218,219,220,221,224,226,227,228,230,],[21,21,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,21,21,-9,-73,21,-28,-62,-64,-29,-74,-63,-45,21,21,-30,-49,-51,-31,-2,21,-32,-50,-22,21,-23,21,-52,21,21,21,]),'KEYWORD_FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,53,54,55,56,80,85,105,106,145,146,147,182,189,190,200,203,205,215,218,219,220,221,224,226,227,228,230,],[22,22,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,22,22,-9,-73,22,-28,-62,-64,-29,-74,-63,-45,22,22,-30,-49,-51,-31,-2,22,-32,-50,-22,22,-23,22,-52,22,22,22,]),'KEYWORD_SWITCH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,53,54,55,56,80,85,105,106,145,146,147,182,189,190,200,203,205,215,218,219,220,221,224,226,227,228,230,],[23,23,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,23,23,-9,-73,23,-28,-62,-64,-29,-74,-63,-45,23,23,-30,-49,-51,-31,-2,23,-32,-50,-22,23,-23,23,-52,23,23,23,]),'KEYWORD_BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,53,54,55,56,80,85,105,106,145,146,147,182,189,190,200,203,205,215,218,219,220,221,224,226,227,228,230,],[25,25,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,25,25,-9,-73,25,-28,-62,-64,-29,-74,-63,-45,25,25,-30,-49,-51,-31,-2,25,-32,-50,-22,25,-23,25,-52,25,25,25,]),'KEYWORD_RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,53,54,55,56,80,85,105,106,145,146,147,182,189,190,200,203,205,215,218,219,220,221,224,226,227,228,230,],[26,26,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,26,26,-9,-73,26,-28,-62,-64,-29,-74,-63,-45,26,26,-30,-49,-51,-31,-2,26,-32,-50,-22,26,-23,26,-52,26,26,26,]),'LBRACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,43,45,46,47,48,49,52,53,54,55,56,61,65,76,80,83,85,86,87,97,98,100,105,106,107,108,109,110,118,119,120,121,122,123,124,125,126,128,143,145,146,147,148,155,156,158,165,166,167,182,184,186,189,190,192,200,202,203,205,210,213,215,218,219,220,221,224,226,227,228,230,],[24,24,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,24,24,61,-9,61,61,61,61,61,61,-73,24,-28,-62,61,128,61,-64,61,-29,61,61,61,-55,-54,-74,-63,128,128,128,128,128,128,128,128,128,128,128,128,128,61,61,-45,24,24,61,-53,61,194,61,61,61,-30,202,24,-49,-51,61,-31,61,-2,24,61,61,-32,-50,-22,24,-23,24,-52,24,24,24,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,24,26,28,29,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,51,52,53,54,55,56,61,65,76,80,82,83,85,86,87,97,98,100,102,105,106,107,108,109,110,118,119,120,121,122,123,124,125,126,128,130,137,143,145,146,147,148,155,156,165,166,167,182,189,190,192,200,202,203,205,210,213,215,218,219,220,221,224,226,227,228,230,],[17,17,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,44,17,17,68,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-9,68,68,68,68,68,103,68,-73,17,-28,-62,68,68,68,-64,131,68,-29,68,68,153,-55,-54,157,-74,-63,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-44,185,68,-45,17,17,68,-53,68,68,68,68,-30,-49,-51,153,-31,68,-2,17,68,68,-32,-50,-22,17,-23,17,-52,17,17,17,]),'SYSTEM_INPUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,43,45,46,47,48,49,52,53,54,55,56,61,65,76,80,83,85,86,87,97,98,100,105,106,107,108,109,110,118,119,120,121,122,123,124,125,126,128,143,145,146,147,148,155,156,165,166,167,182,189,190,192,200,202,203,205,210,213,215,218,219,220,221,224,226,227,228,230,],[31,31,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,31,31,31,-9,31,31,31,31,31,31,-73,31,-28,-62,31,31,31,-64,31,-29,31,31,31,-55,-54,-74,-63,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-45,31,31,31,-53,31,31,31,31,-30,-49,-51,31,-31,31,-2,31,31,31,-32,-50,-22,31,-23,31,-52,31,31,31,]),'SYSTEM_OUTPUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,43,45,46,47,48,49,52,53,54,55,56,61,65,76,80,83,85,86,87,97,98,100,105,106,107,108,109,110,118,119,120,121,122,123,124,125,126,128,143,145,146,147,148,155,156,165,166,167,182,189,190,192,200,202,203,205,210,213,215,218,219,220,221,224,226,227,228,230,],[32,32,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,32,32,32,-9,32,32,32,32,32,32,-73,32,-28,-62,32,32,32,-64,32,-29,32,32,32,-55,-54,-74,-63,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-45,32,32,32,-53,32,32,32,32,-30,-49,-51,32,-31,32,-2,32,32,32,-32,-50,-22,32,-23,32,-52,32,32,32,]),'KEYWORD_EXIT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,43,45,46,47,48,49,52,53,54,55,56,61,65,76,80,83,85,86,87,97,98,100,105,106,107,108,109,110,118,119,120,121,122,123,124,125,126,128,143,145,146,147,148,155,156,165,166,167,182,189,190,192,200,202,203,205,210,213,215,218,219,220,221,224,226,227,228,230,],[33,33,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,33,33,33,-9,33,33,33,33,33,33,-73,33,-28,-62,33,33,33,-64,33,-29,33,33,33,-55,-54,-74,-63,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-45,33,33,33,-53,33,33,33,33,-30,-49,-51,33,-31,33,-2,33,33,33,-32,-50,-22,33,-23,33,-52,33,33,33,]),'KEYWORD_INT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,51,53,54,55,56,80,85,88,105,106,145,146,147,180,181,182,187,189,190,200,203,205,215,218,219,220,221,224,226,227,228,230,],[34,34,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,34,34,-9,34,-73,34,-28,-62,-64,-29,34,-74,-63,-45,34,34,34,34,-30,34,-49,-51,-31,-2,34,-32,-50,-22,34,-23,34,-52,34,34,34,]),'KEYWORD_FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,51,53,54,55,56,80,85,88,105,106,145,146,147,180,181,182,187,189,190,200,203,205,215,218,219,220,221,224,226,227,228,230,],[35,35,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,35,35,-9,35,-73,35,-28,-62,-64,-29,35,-74,-63,-45,35,35,35,35,-30,35,-49,-51,-31,-2,35,-32,-50,-22,35,-23,35,-52,35,35,35,]),'KEYWORD_CHAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,51,53,54,55,56,80,85,88,105,106,145,146,147,180,181,182,187,189,190,200,203,205,215,218,219,220,221,224,226,227,228,230,],[36,36,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,36,36,-9,36,-73,36,-28,-62,-64,-29,36,-74,-63,-45,36,36,36,36,-30,36,-49,-51,-31,-2,36,-32,-50,-22,36,-23,36,-52,36,36,36,]),'KEYWORD_VOID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,51,53,54,55,56,80,85,88,105,106,145,146,147,180,181,182,187,189,190,200,203,205,215,218,219,220,221,224,226,227,228,230,],[37,37,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,37,37,-9,37,-73,37,-28,-62,-64,-29,37,-74,-63,-45,37,37,37,37,-30,37,-49,-51,-31,-2,37,-32,-50,-22,37,-23,37,-52,37,37,37,]),'KEYWORD_STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,51,53,54,55,56,80,85,88,105,106,145,146,147,180,181,182,187,189,190,200,203,205,215,218,219,220,221,224,226,227,228,230,],[38,38,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,38,38,-9,38,-73,38,-28,-62,-64,-29,38,-74,-63,-45,38,38,38,38,-30,38,-49,-51,-31,-2,38,-32,-50,-22,38,-23,38,-52,38,38,38,]),'KEYWORD_BOOL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,51,53,54,55,56,80,85,88,105,106,145,146,147,180,181,182,187,189,190,200,203,205,215,218,219,220,221,224,226,227,228,230,],[39,39,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,39,39,-9,39,-73,39,-28,-62,-64,-29,39,-74,-63,-45,39,39,39,39,-30,39,-49,-51,-31,-2,39,-32,-50,-22,39,-23,39,-52,39,39,39,]),'KEYWORD_FILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,51,53,54,55,56,80,85,88,105,106,145,146,147,180,181,182,187,189,190,200,203,205,215,218,219,220,221,224,226,227,228,230,],[40,40,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,40,40,-9,40,-73,40,-28,-62,-64,-29,40,-74,-63,-45,40,40,40,40,-30,40,-49,-51,-31,-2,40,-32,-50,-22,40,-23,40,-52,40,40,40,]),'KEYWORD_SOCKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,51,53,54,55,56,80,85,88,105,106,145,146,147,180,181,182,187,189,190,200,203,205,215,218,219,220,221,224,226,227,228,230,],[41,41,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,41,41,-9,41,-73,41,-28,-62,-64,-29,41,-74,-63,-45,41,41,41,41,-30,41,-49,-51,-31,-2,41,-32,-50,-22,41,-23,41,-52,41,41,41,]),'KEYWORD_DICT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,51,53,54,55,56,80,85,88,105,106,145,146,147,180,181,182,187,189,190,200,203,205,215,218,219,220,221,224,226,227,228,230,],[42,42,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,42,42,-9,42,-73,42,-28,-62,-64,-29,42,-74,-63,-45,42,42,42,42,-30,42,-49,-51,-31,-2,42,-32,-50,-22,42,-23,42,-52,42,42,42,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,43,53,55,56,80,85,105,106,145,182,189,190,200,203,215,218,219,221,226,],[0,-1,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-9,-73,-28,-62,-64,-29,-74,-63,-45,-30,-49,-51,-31,-2,-32,-50,-22,-23,-52,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,24,43,53,54,55,56,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,77,78,79,80,85,90,105,106,111,112,113,114,115,116,117,127,128,133,142,144,145,159,160,161,162,163,164,168,169,170,171,172,173,174,175,176,177,179,182,189,190,195,196,197,200,202,203,208,209,212,214,215,216,217,218,219,221,222,226,228,229,230,],[-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,53,-9,-73,105,-28,-62,-80,-81,-82,-61,-85,-88,-93,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,-111,-112,-113,-64,-29,-66,-74,-63,163,164,-76,-77,-115,-78,-117,-101,-61,-70,-65,-120,-45,-83,-84,-86,-87,-75,-114,-89,-90,-91,-92,-94,-95,-97,-98,-99,-116,-110,-30,-49,-51,-79,-118,-119,-31,-61,-2,221,-24,-67,-68,-32,-77,-78,-50,-22,-23,-25,-52,-27,-69,-26,]),'KEYWORD_CASE':([3,4,5,6,7,8,9,10,11,12,13,14,15,43,53,55,56,80,85,105,106,145,182,189,190,194,200,203,208,209,215,218,219,221,222,226,228,230,],[-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-9,-73,-28,-62,-64,-29,-74,-63,-45,-30,-49,-51,210,-31,-2,210,-24,-32,-50,-22,-23,-25,-52,-27,-26,]),'KEYWORD_DEFAULT':([3,4,5,6,7,8,9,10,11,12,13,14,15,43,53,55,56,80,85,105,106,145,182,189,190,194,200,203,208,209,215,218,219,221,222,226,228,230,],[-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-9,-73,-28,-62,-64,-29,-74,-63,-45,-30,-49,-51,211,-31,-2,211,-24,-32,-50,-22,-23,-25,-52,-27,-26,]),'KEYWORD_ELSE':([4,5,6,7,8,9,10,11,12,13,14,15,53,55,56,80,85,105,106,145,182,189,190,200,203,215,218,219,221,226,],[-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-73,-28,-62,-64,-29,-74,-63,-45,-30,205,-51,-31,-2,-32,-50,-22,-23,-52,]),'ASSIGN':([17,18,30,44,101,103,136,144,153,154,157,],[-46,47,-47,86,156,-46,184,-120,-46,-47,86,]),'LPAREN':([17,19,20,22,23,26,31,32,33,44,45,46,47,48,49,52,61,65,68,76,83,85,86,87,96,97,98,100,107,108,109,110,118,119,120,121,122,123,124,125,126,128,143,148,153,155,156,165,166,167,182,192,200,202,210,213,215,],[45,48,49,51,52,76,82,83,84,88,76,76,76,76,76,76,76,76,45,76,76,-29,76,76,148,76,-55,-54,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,45,-53,76,76,76,76,-30,76,-31,76,76,76,-32,]),'LBRACKET':([17,28,34,35,36,37,38,39,40,41,42,44,68,103,153,157,],[46,81,-35,-36,-37,-38,-39,-40,-41,-42,-43,87,46,46,46,87,]),'SEMICOLON':([25,26,27,44,51,57,58,59,60,62,63,64,66,67,68,69,70,71,72,73,74,75,77,78,79,85,90,93,97,98,99,100,127,133,134,142,144,149,150,151,152,153,154,155,157,159,160,161,162,163,164,168,169,170,171,172,173,174,175,176,179,182,183,193,200,201,206,212,214,215,229,],[55,56,80,85,98,106,-80,-81,-82,-85,-88,-93,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,-111,-112,-113,-29,-66,145,-61,-55,155,-54,-101,-70,182,-65,-120,192,-58,-59,-60,-102,-112,-53,85,-83,-84,-86,-87,-75,-114,-89,-90,-91,-92,-94,-95,-97,-98,-99,-110,-30,200,-48,-31,215,219,-67,-68,-32,-69,]),'MINUS':([26,45,46,47,48,49,52,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,86,87,90,97,98,100,107,108,109,110,118,119,120,121,122,123,124,125,126,127,128,133,142,143,144,148,153,154,155,156,164,165,166,167,168,169,170,171,172,173,174,175,176,179,182,192,200,202,210,212,213,214,215,229,],[65,65,65,65,65,65,65,65,123,-93,65,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,65,-111,-112,-113,65,-29,65,65,-66,65,-55,-54,65,65,65,65,65,65,65,65,65,65,65,65,65,-101,65,-70,-65,65,-120,65,-102,-112,-53,65,-114,65,65,65,123,123,123,123,-94,-95,-97,-98,-99,-110,-30,65,-31,65,65,-67,65,-68,-32,-69,]),'INT_LITERAL':([26,45,46,47,48,49,52,61,65,76,83,85,86,87,97,98,100,107,108,109,110,118,119,120,121,122,123,124,125,126,128,143,148,155,156,165,166,167,182,192,200,202,210,213,215,],[69,69,69,69,69,69,69,69,69,69,69,-29,69,69,69,-55,-54,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-53,69,69,69,69,-30,69,-31,69,69,69,-32,]),'FLOAT_LITERAL':([26,45,46,47,48,49,52,61,65,76,83,85,86,87,97,98,100,107,108,109,110,118,119,120,121,122,123,124,125,126,128,143,148,155,156,165,166,167,182,192,200,202,210,213,215,],[70,70,70,70,70,70,70,70,70,70,70,-29,70,70,70,-55,-54,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-53,70,70,70,70,-30,70,-31,70,70,70,-32,]),'STRING_LITERAL':([26,45,46,47,48,49,52,61,65,76,83,85,86,87,97,98,100,107,108,109,110,118,119,120,121,122,123,124,125,126,128,143,148,155,156,165,166,167,182,192,200,202,210,213,215,],[71,71,71,71,71,71,71,71,71,71,71,-29,71,71,71,-55,-54,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-53,71,71,71,71,-30,71,-31,71,71,71,-32,]),'CHAR_LITERAL':([26,45,46,47,48,49,52,61,65,76,83,85,86,87,97,98,100,107,108,109,110,118,119,120,121,122,123,124,125,126,128,143,148,155,156,165,166,167,182,192,200,202,210,213,215,],[72,72,72,72,72,72,72,72,72,72,72,-29,72,72,72,-55,-54,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-53,72,72,72,72,-30,72,-31,72,72,72,-32,]),'KEYWORD_TRUE':([26,45,46,47,48,49,52,61,65,76,83,85,86,87,97,98,100,107,108,109,110,118,119,120,121,122,123,124,125,126,128,143,148,155,156,165,166,167,182,192,200,202,210,213,215,],[73,73,73,73,73,73,73,73,73,73,73,-29,73,73,73,-55,-54,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-53,73,73,73,73,-30,73,-31,73,73,73,-32,]),'KEYWORD_FALSE':([26,45,46,47,48,49,52,61,65,76,83,85,86,87,97,98,100,107,108,109,110,118,119,120,121,122,123,124,125,126,128,143,148,155,156,165,166,167,182,192,200,202,210,213,215,],[74,74,74,74,74,74,74,74,74,74,74,-29,74,74,74,-55,-54,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-53,74,74,74,74,-30,74,-31,74,74,74,-32,]),'KEYWORD_NULL':([26,45,46,47,48,49,52,61,65,76,83,85,86,87,97,98,100,107,108,109,110,118,119,120,121,122,123,124,125,126,128,143,148,155,156,165,166,167,182,192,200,202,210,213,215,],[75,75,75,75,75,75,75,75,75,75,75,-29,75,75,75,-55,-54,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-53,75,75,75,75,-30,75,-31,75,75,75,-32,]),'RPAREN':([28,29,34,35,36,37,38,39,40,41,42,45,58,59,60,62,63,64,66,67,68,69,70,71,72,73,74,75,77,78,79,84,88,89,90,91,94,95,104,127,129,130,133,138,139,140,141,142,144,150,151,152,153,154,159,160,161,162,163,164,168,169,170,171,172,173,174,175,176,179,185,188,191,192,193,198,199,204,207,212,214,225,229,],[-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,90,-80,-81,-82,-85,-88,-93,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,-111,-112,-113,133,-61,142,-66,-71,146,147,158,-101,179,-44,-70,186,-3,-4,-5,-65,-120,-58,-59,-60,-102,-112,-83,-84,-86,-87,-75,-114,-89,-90,-91,-92,-94,-95,-97,-98,-99,-110,-7,-72,206,-61,-48,212,214,-6,220,-67,-68,229,-69,]),'COMMA':([28,29,34,35,36,37,38,39,40,41,42,58,59,60,62,63,64,66,67,68,69,70,71,72,73,74,75,77,78,79,89,90,91,113,115,116,117,127,130,131,132,133,139,141,142,144,159,160,161,162,163,164,168,169,170,171,172,173,174,175,176,179,185,188,195,196,197,199,204,212,214,217,229,],[-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-80,-81,-82,-85,-88,-93,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,-111,-112,-113,143,-66,-71,165,166,-78,-117,-101,-44,180,181,-70,187,-5,-65,-120,-83,-84,-86,-87,-75,-114,-89,-90,-91,-92,-94,-95,-97,-98,-99,-110,-7,-72,-79,-118,-119,213,-6,-67,-68,-78,-69,]),'RBRACKET':([58,59,60,62,63,64,66,67,68,69,70,71,72,73,74,75,77,78,79,81,87,90,92,127,133,135,142,144,159,160,161,162,163,164,168,169,170,171,172,173,174,175,176,179,212,214,229,],[-80,-81,-82,-85,-88,-93,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,-111,-112,-113,130,136,-66,144,-101,-70,183,-65,-120,-83,-84,-86,-87,-75,-114,-89,-90,-91,-92,-94,-95,-97,-98,-99,-110,-67,-68,-69,]),'COLON':([58,59,60,62,63,64,66,67,68,69,70,71,72,73,74,75,77,78,79,90,116,127,133,142,144,159,160,161,162,163,164,168,169,170,171,172,173,174,175,176,178,179,211,212,214,223,229,],[-80,-81,-82,-85,-88,-93,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,-111,-112,-113,-66,167,-101,-70,-65,-120,-83,-84,-86,-87,-75,-114,-89,-90,-91,-92,-94,-95,-97,-98,-99,167,-110,224,-67,-68,227,-69,]),'AND':([58,60,62,63,64,66,67,68,69,70,71,72,73,74,75,77,78,79,90,127,133,142,144,153,154,159,160,161,162,164,168,169,170,171,172,173,174,175,176,179,212,214,229,],[107,-82,-85,-88,-93,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,-111,-112,-113,-66,-101,-70,-65,-120,-102,-112,-83,-84,-86,-87,-114,-89,-90,-91,-92,-94,-95,-97,-98,-99,-110,-67,-68,-69,]),'OR':([58,60,62,63,64,66,67,68,69,70,71,72,73,74,75,77,78,79,90,127,133,142,144,153,154,159,160,161,162,164,168,169,170,171,172,173,174,175,176,179,212,214,229,],[108,-82,-85,-88,-93,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,-111,-112,-113,-66,-101,-70,-65,-120,-102,-112,-83,-84,-86,-87,-114,-89,-90,-91,-92,-94,-95,-97,-98,-99,-110,-67,-68,-69,]),'EQ':([60,62,63,64,66,67,68,69,70,71,72,73,74,75,77,78,79,90,127,133,142,144,153,154,159,160,161,162,164,168,169,170,171,172,173,174,175,176,179,212,214,229,],[109,-85,-88,-93,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,-111,-112,-113,-66,-101,-70,-65,-120,-102,-112,109,109,-86,-87,-114,-89,-90,-91,-92,-94,-95,-97,-98,-99,-110,-67,-68,-69,]),'NEQ':([60,62,63,64,66,67,68,69,70,71,72,73,74,75,77,78,79,90,127,133,142,144,153,154,159,160,161,162,164,168,169,170,171,172,173,174,175,176,179,212,214,229,],[110,-85,-88,-93,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,-111,-112,-113,-66,-101,-70,-65,-120,-102,-112,110,110,-86,-87,-114,-89,-90,-91,-92,-94,-95,-97,-98,-99,-110,-67,-68,-69,]),'GT':([62,63,64,66,67,68,69,70,71,72,73,74,75,77,78,79,90,127,133,142,144,153,154,161,162,164,168,169,170,171,172,173,174,175,176,179,212,214,229,],[118,-88,-93,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,-111,-112,-113,-66,-101,-70,-65,-120,-102,-112,118,118,-114,-89,-90,-91,-92,-94,-95,-97,-98,-99,-110,-67,-68,-69,]),'LT':([62,63,64,66,67,68,69,70,71,72,73,74,75,77,78,79,90,127,133,142,144,153,154,161,162,164,168,169,170,171,172,173,174,175,176,179,212,214,229,],[119,-88,-93,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,-111,-112,-113,-66,-101,-70,-65,-120,-102,-112,119,119,-114,-89,-90,-91,-92,-94,-95,-97,-98,-99,-110,-67,-68,-69,]),'GEQ':([62,63,64,66,67,68,69,70,71,72,73,74,75,77,78,79,90,127,133,142,144,153,154,161,162,164,168,169,170,171,172,173,174,175,176,179,212,214,229,],[120,-88,-93,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,-111,-112,-113,-66,-101,-70,-65,-120,-102,-112,120,120,-114,-89,-90,-91,-92,-94,-95,-97,-98,-99,-110,-67,-68,-69,]),'LEQ':([62,63,64,66,67,68,69,70,71,72,73,74,75,77,78,79,90,127,133,142,144,153,154,161,162,164,168,169,170,171,172,173,174,175,176,179,212,214,229,],[121,-88,-93,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,-111,-112,-113,-66,-101,-70,-65,-120,-102,-112,121,121,-114,-89,-90,-91,-92,-94,-95,-97,-98,-99,-110,-67,-68,-69,]),'PLUS':([63,64,66,67,68,69,70,71,72,73,74,75,77,78,79,90,127,133,142,144,153,154,164,168,169,170,171,172,173,174,175,176,179,212,214,229,],[122,-93,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,-111,-112,-113,-66,-101,-70,-65,-120,-102,-112,-114,122,122,122,122,-94,-95,-97,-98,-99,-110,-67,-68,-69,]),'MUL':([64,66,67,68,69,70,71,72,73,74,75,77,78,79,90,127,133,142,144,153,154,164,172,173,174,175,176,179,212,214,229,],[124,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,-111,-112,-113,-66,-101,-70,-65,-120,-102,-112,-114,124,124,-97,-98,-99,-110,-67,-68,-69,]),'DIV':([64,66,67,68,69,70,71,72,73,74,75,77,78,79,90,127,133,142,144,153,154,164,172,173,174,175,176,179,212,214,229,],[125,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,-111,-112,-113,-66,-101,-70,-65,-120,-102,-112,-114,125,125,-97,-98,-99,-110,-67,-68,-69,]),'MOD':([64,66,67,68,69,70,71,72,73,74,75,77,78,79,90,127,133,142,144,153,154,164,172,173,174,175,176,179,212,214,229,],[126,-96,-100,-102,-103,-104,-105,-106,-107,-108,-109,-111,-112,-113,-66,-101,-70,-65,-120,-102,-112,-114,126,126,-97,-98,-99,-110,-67,-68,-69,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,24,224,227,],[2,54,228,230,]),'statement':([0,2,21,24,54,146,147,205,220,224,227,228,230,],[3,43,50,3,43,189,190,218,226,3,3,43,43,]),'declaration_statement':([0,2,21,24,51,54,146,147,205,220,224,227,228,230,],[4,4,4,4,100,4,4,4,4,4,4,4,4,4,]),'assignment_statement':([0,2,21,24,54,146,147,205,220,224,227,228,230,],[5,5,5,5,5,5,5,5,5,5,5,5,5,]),'if_statement':([0,2,21,24,54,146,147,205,220,224,227,228,230,],[6,6,6,6,6,6,6,6,6,6,6,6,6,]),'while_statement':([0,2,21,24,54,146,147,205,220,224,227,228,230,],[7,7,7,7,7,7,7,7,7,7,7,7,7,]),'do_while_statement':([0,2,21,24,54,146,147,205,220,224,227,228,230,],[8,8,8,8,8,8,8,8,8,8,8,8,8,]),'for_statement':([0,2,21,24,54,146,147,205,220,224,227,228,230,],[9,9,9,9,9,9,9,9,9,9,9,9,9,]),'switch_statement':([0,2,21,24,54,146,147,205,220,224,227,228,230,],[10,10,10,10,10,10,10,10,10,10,10,10,10,]),'break_statement':([0,2,21,24,54,146,147,205,220,224,227,228,230,],[11,11,11,11,11,11,11,11,11,11,11,11,11,]),'return_statement':([0,2,21,24,54,146,147,205,220,224,227,228,230,],[12,12,12,12,12,12,12,12,12,12,12,12,12,]),'function_call_statement':([0,2,21,24,54,146,147,205,220,224,227,228,230,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'block_statement':([0,2,21,24,54,146,147,186,205,220,224,227,228,230,],[14,14,14,14,14,14,14,203,14,14,14,14,14,14,]),'function_definition':([0,2,21,24,54,146,147,205,220,224,227,228,230,],[15,15,15,15,15,15,15,15,15,15,15,15,15,]),'type_specifier':([0,2,21,24,51,54,88,146,147,180,181,187,205,220,224,227,228,230,],[16,16,16,16,102,16,137,16,16,198,199,137,16,16,16,16,16,16,]),'left_hand_side':([0,2,21,24,51,54,97,146,147,192,205,220,224,227,228,230,],[18,18,18,18,101,18,101,18,18,101,18,18,18,18,18,18,]),'function_call':([0,2,21,24,26,45,46,47,48,49,52,54,61,65,76,83,86,87,97,107,108,109,110,118,119,120,121,122,123,124,125,126,128,143,146,147,148,156,165,166,167,192,202,205,210,213,220,224,227,228,230,],[27,27,27,27,77,77,77,77,77,77,77,27,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,27,27,77,77,77,77,77,77,77,27,77,77,27,27,27,27,27,]),'primitive_type':([0,2,21,24,51,54,88,146,147,180,181,187,205,220,224,227,228,230,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'array_type':([0,2,21,24,51,54,88,146,147,180,181,187,205,220,224,227,228,230,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'subscript_access':([0,2,21,24,26,45,46,47,48,49,51,52,54,61,65,76,83,86,87,97,107,108,109,110,118,119,120,121,122,123,124,125,126,128,143,146,147,148,156,165,166,167,192,202,205,210,213,220,224,227,228,230,],[30,30,30,30,78,78,78,78,78,78,30,78,30,78,78,78,78,78,78,154,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,30,30,78,78,78,78,78,154,78,30,78,78,30,30,30,30,30,]),'expression':([26,45,46,47,48,49,52,61,76,83,86,87,97,128,143,148,156,165,166,167,192,202,210,213,],[57,91,92,93,94,95,104,116,129,132,134,135,150,178,188,191,193,195,178,197,150,217,223,225,]),'logical_expression':([26,45,46,47,48,49,52,61,76,83,86,87,97,128,143,148,156,165,166,167,192,202,210,213,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'initializer_list':([26,45,46,47,48,49,52,61,76,83,86,87,97,128,143,148,156,165,166,167,184,192,202,210,213,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,201,59,59,59,59,]),'equality_expression':([26,45,46,47,48,49,52,61,76,83,86,87,97,107,108,128,143,148,156,165,166,167,192,202,210,213,],[60,60,60,60,60,60,60,60,60,60,60,60,60,159,160,60,60,60,60,60,60,60,60,60,60,60,]),'relational_expression':([26,45,46,47,48,49,52,61,76,83,86,87,97,107,108,109,110,128,143,148,156,165,166,167,192,202,210,213,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,161,162,62,62,62,62,62,62,62,62,62,62,62,]),'additive_expression':([26,45,46,47,48,49,52,61,76,83,86,87,97,107,108,109,110,118,119,120,121,128,143,148,156,165,166,167,192,202,210,213,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,168,169,170,171,63,63,63,63,63,63,63,63,63,63,63,]),'multiplicative_expression':([26,45,46,47,48,49,52,61,76,83,86,87,97,107,108,109,110,118,119,120,121,122,123,128,143,148,156,165,166,167,192,202,210,213,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,172,173,64,64,64,64,64,64,64,64,64,64,64,]),'unary_expression':([26,45,46,47,48,49,52,61,65,76,83,86,87,97,107,108,109,110,118,119,120,121,122,123,124,125,126,128,143,148,156,165,166,167,192,202,210,213,],[66,66,66,66,66,66,66,66,127,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,174,175,176,66,66,66,66,66,66,66,66,66,66,66,]),'primary_expression':([26,45,46,47,48,49,52,61,65,76,83,86,87,97,107,108,109,110,118,119,120,121,122,123,124,125,126,128,143,148,156,165,166,167,192,202,210,213,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'dictionary_literal':([26,45,46,47,48,49,52,61,65,76,83,86,87,97,107,108,109,110,118,119,120,121,122,123,124,125,126,128,143,148,156,165,166,167,192,202,210,213,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'argument_list':([45,],[89,]),'for_init':([51,],[97,]),'assignment_statement_no_semi':([51,97,192,],[99,151,151,]),'expression_list_opt':([61,202,],[111,111,]),'key_value_list_opt':([61,128,],[112,112,]),'expression_list':([61,202,],[113,113,]),'empty':([61,88,97,128,192,202,],[114,140,152,177,152,216,]),'key_value_list':([61,128,],[115,115,]),'key_value':([61,128,166,],[117,117,196,]),'params':([88,],[138,]),'param_list':([88,],[139,]),'param':([88,187,],[141,204,]),'expression_opt':([97,192,],[149,207,]),'case_list':([194,],[208,]),'case_clause':([194,208,],[209,222,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',243),
  ('function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement','function_definition',6,'p_function_definition','parser.py',247),
  ('params -> param_list','params',1,'p_params','parser.py',255),
  ('params -> empty','params',1,'p_params','parser.py',256),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',263),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',264),
  ('param -> type_specifier IDENTIFIER','param',2,'p_param','parser.py',271),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',275),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',276),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',283),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',284),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',285),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',286),
  ('statement -> do_while_statement','statement',1,'p_statement','parser.py',287),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',288),
  ('statement -> switch_statement','statement',1,'p_statement','parser.py',289),
  ('statement -> break_statement','statement',1,'p_statement','parser.py',290),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',291),
  ('statement -> function_call_statement','statement',1,'p_statement','parser.py',292),
  ('statement -> block_statement','statement',1,'p_statement','parser.py',293),
  ('statement -> function_definition','statement',1,'p_statement','parser.py',294),
  ('do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON','do_while_statement',7,'p_do_while_statement','parser.py',298),
  ('switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE','switch_statement',7,'p_switch_statement','parser.py',302),
  ('case_list -> case_clause','case_list',1,'p_case_list','parser.py',306),
  ('case_list -> case_list case_clause','case_list',2,'p_case_list','parser.py',307),
  ('case_clause -> KEYWORD_CASE expression COLON statement_list','case_clause',4,'p_case_clause','parser.py',314),
  ('case_clause -> KEYWORD_DEFAULT COLON statement_list','case_clause',3,'p_case_clause','parser.py',315),
  ('break_statement -> KEYWORD_BREAK SEMICOLON','break_statement',2,'p_break_statement','parser.py',322),
  ('declaration_statement -> type_specifier IDENTIFIER SEMICOLON','declaration_statement',3,'p_declaration_statement','parser.py',326),
  ('declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON','declaration_statement',5,'p_declaration_statement','parser.py',327),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON','declaration_statement',6,'p_declaration_statement','parser.py',328),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON','declaration_statement',7,'p_declaration_statement','parser.py',329),
  ('type_specifier -> primitive_type','type_specifier',1,'p_type_specifier','parser.py',340),
  ('type_specifier -> array_type','type_specifier',1,'p_type_specifier','parser.py',341),
  ('primitive_type -> KEYWORD_INT','primitive_type',1,'p_primitive_type','parser.py',345),
  ('primitive_type -> KEYWORD_FLOAT','primitive_type',1,'p_primitive_type','parser.py',346),
  ('primitive_type -> KEYWORD_CHAR','primitive_type',1,'p_primitive_type','parser.py',347),
  ('primitive_type -> KEYWORD_VOID','primitive_type',1,'p_primitive_type','parser.py',348),
  ('primitive_type -> KEYWORD_STRING','primitive_type',1,'p_primitive_type','parser.py',349),
  ('primitive_type -> KEYWORD_BOOL','primitive_type',1,'p_primitive_type','parser.py',350),
  ('primitive_type -> KEYWORD_FILE','primitive_type',1,'p_primitive_type','parser.py',351),
  ('primitive_type -> KEYWORD_SOCKET','primitive_type',1,'p_primitive_type','parser.py',352),
  ('primitive_type -> KEYWORD_DICT','primitive_type',1,'p_primitive_type','parser.py',353),
  ('array_type -> primitive_type LBRACKET RBRACKET','array_type',3,'p_array_type','parser.py',357),
  ('assignment_statement -> left_hand_side ASSIGN expression SEMICOLON','assignment_statement',4,'p_assignment_statement','parser.py',361),
  ('left_hand_side -> IDENTIFIER','left_hand_side',1,'p_left_hand_side','parser.py',365),
  ('left_hand_side -> subscript_access','left_hand_side',1,'p_left_hand_side','parser.py',366),
  ('assignment_statement_no_semi -> left_hand_side ASSIGN expression','assignment_statement_no_semi',3,'p_assignment_statement_no_semi','parser.py',373),
  ('if_statement -> KEYWORD_IF LPAREN expression RPAREN statement','if_statement',5,'p_if_statement','parser.py',377),
  ('if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement','if_statement',7,'p_if_statement','parser.py',378),
  ('while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement','while_statement',5,'p_while_statement','parser.py',385),
  ('for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement','for_statement',8,'p_for_statement','parser.py',389),
  ('for_init -> assignment_statement_no_semi SEMICOLON','for_init',2,'p_for_init','parser.py',393),
  ('for_init -> declaration_statement','for_init',1,'p_for_init','parser.py',394),
  ('for_init -> SEMICOLON','for_init',1,'p_for_init','parser.py',395),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',404),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_expression_statement','parser.py',405),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','parser.py',412),
  ('expression_opt -> assignment_statement_no_semi','expression_opt',1,'p_expression_opt','parser.py',413),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parser.py',414),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',418),
  ('return_statement -> KEYWORD_RETURN SEMICOLON','return_statement',2,'p_return_statement','parser.py',422),
  ('return_statement -> KEYWORD_RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',423),
  ('function_call_statement -> function_call SEMICOLON','function_call_statement',2,'p_function_call_statement','parser.py',430),
  ('function_call -> IDENTIFIER LPAREN argument_list RPAREN','function_call',4,'p_function_call','parser.py',434),
  ('function_call -> IDENTIFIER LPAREN RPAREN','function_call',3,'p_function_call','parser.py',435),
  ('function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN','function_call',6,'p_function_call','parser.py',436),
  ('function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN','function_call',6,'p_function_call','parser.py',437),
  ('function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN','function_call',8,'p_function_call','parser.py',438),
  ('function_call -> KEYWORD_EXIT LPAREN RPAREN','function_call',3,'p_function_call','parser.py',439),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',453),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','parser.py',454),
  ('block_statement -> LBRACE RBRACE','block_statement',2,'p_block_statement','parser.py',461),
  ('block_statement -> LBRACE statement_list RBRACE','block_statement',3,'p_block_statement','parser.py',462),
  ('initializer_list -> LBRACE expression_list_opt RBRACE','initializer_list',3,'p_initializer_list','parser.py',469),
  ('expression_list_opt -> expression_list','expression_list_opt',1,'p_expression_list_opt','parser.py',473),
  ('expression_list_opt -> empty','expression_list_opt',1,'p_expression_list_opt','parser.py',474),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',481),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',482),
  ('expression -> logical_expression','expression',1,'p_expression','parser.py',489),
  ('expression -> initializer_list','expression',1,'p_expression','parser.py',490),
  ('logical_expression -> equality_expression','logical_expression',1,'p_logical_expression','parser.py',494),
  ('logical_expression -> logical_expression AND equality_expression','logical_expression',3,'p_logical_expression','parser.py',495),
  ('logical_expression -> logical_expression OR equality_expression','logical_expression',3,'p_logical_expression','parser.py',496),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','parser.py',503),
  ('equality_expression -> equality_expression EQ relational_expression','equality_expression',3,'p_equality_expression','parser.py',504),
  ('equality_expression -> equality_expression NEQ relational_expression','equality_expression',3,'p_equality_expression','parser.py',505),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression','parser.py',512),
  ('relational_expression -> relational_expression GT additive_expression','relational_expression',3,'p_relational_expression','parser.py',513),
  ('relational_expression -> relational_expression LT additive_expression','relational_expression',3,'p_relational_expression','parser.py',514),
  ('relational_expression -> relational_expression GEQ additive_expression','relational_expression',3,'p_relational_expression','parser.py',515),
  ('relational_expression -> relational_expression LEQ additive_expression','relational_expression',3,'p_relational_expression','parser.py',516),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','parser.py',523),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',524),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',525),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','parser.py',532),
  ('multiplicative_expression -> multiplicative_expression MUL unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',533),
  ('multiplicative_expression -> multiplicative_expression DIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',534),
  ('multiplicative_expression -> multiplicative_expression MOD unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',535),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','parser.py',542),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','parser.py',543),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','parser.py',550),
  ('primary_expression -> INT_LITERAL','primary_expression',1,'p_primary_expression','parser.py',551),
  ('primary_expression -> FLOAT_LITERAL','primary_expression',1,'p_primary_expression','parser.py',552),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','parser.py',553),
  ('primary_expression -> CHAR_LITERAL','primary_expression',1,'p_primary_expression','parser.py',554),
  ('primary_expression -> KEYWORD_TRUE','primary_expression',1,'p_primary_expression','parser.py',555),
  ('primary_expression -> KEYWORD_FALSE','primary_expression',1,'p_primary_expression','parser.py',556),
  ('primary_expression -> KEYWORD_NULL','primary_expression',1,'p_primary_expression','parser.py',557),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','parser.py',558),
  ('primary_expression -> function_call','primary_expression',1,'p_primary_expression','parser.py',559),
  ('primary_expression -> subscript_access','primary_expression',1,'p_primary_expression','parser.py',560),
  ('primary_expression -> dictionary_literal','primary_expression',1,'p_primary_expression','parser.py',561),
  ('dictionary_literal -> LBRACE key_value_list_opt RBRACE','dictionary_literal',3,'p_dictionary_literal','parser.py',571),
  ('key_value_list_opt -> key_value_list','key_value_list_opt',1,'p_key_value_list_opt','parser.py',575),
  ('key_value_list_opt -> empty','key_value_list_opt',1,'p_key_value_list_opt','parser.py',576),
  ('key_value_list -> key_value','key_value_list',1,'p_key_value_list','parser.py',583),
  ('key_value_list -> key_value_list COMMA key_value','key_value_list',3,'p_key_value_list','parser.py',584),
  ('key_value -> expression COLON expression','key_value',3,'p_key_value','parser.py',591),
  ('subscript_access -> IDENTIFIER LBRACKET expression RBRACKET','subscript_access',4,'p_subscript_access','parser.py',595),
]
