
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEQleftGTLTGEQLEQleftPLUSMINUSleftMULDIVMODrightUMINUSnonassocLOWER_THAN_ELSEnonassocKEYWORD_ELSEAND ASSIGN CHAR_LITERAL COLON COMMA COMMENT DIV DOT EQ FLOAT_LITERAL GEQ GT IDENTIFIER INT_LITERAL KEYWORD_ARRAY KEYWORD_BOOL KEYWORD_BREAK KEYWORD_CASE KEYWORD_CHAR KEYWORD_CONTINUE KEYWORD_DEFAULT KEYWORD_DICT KEYWORD_DO KEYWORD_ELSE KEYWORD_EXIT KEYWORD_FALSE KEYWORD_FILE KEYWORD_FLOAT KEYWORD_FOR KEYWORD_IF KEYWORD_INT KEYWORD_NULL KEYWORD_REGEX KEYWORD_RETURN KEYWORD_SOCKET KEYWORD_STRING KEYWORD_SWITCH KEYWORD_TRUE KEYWORD_VOID KEYWORD_WHILE LBRACE LBRACKET LEQ LPAREN LT MINUS MOD MUL NEQ OR PLUS RBRACE RBRACKET RPAREN SEMICOLON STRING_LITERAL SYSTEM_ARR_AVG SYSTEM_ARR_CONTAINS SYSTEM_ARR_INDEXOF SYSTEM_ARR_POP SYSTEM_ARR_PUSH SYSTEM_ARR_SIZE SYSTEM_EXIT SYSTEM_INPUT SYSTEM_OUTPUTprogram : statement_listfunction_definition : type_specifier IDENTIFIER LPAREN params RPAREN block_statementparams : param_list\n                  | emptyparam_list : param\n                      | param_list COMMA paramparam : type_specifier IDENTIFIERstatement_list : statement\n                         | statement_list statementstatement : declaration_statement\n                    | assignment_statement\n                    | if_statement\n                    | while_statement\n                    | do_while_statement\n                    | for_statement\n                    | switch_statement\n                    | break_statement\n                    | return_statement\n                    | function_call_statement\n                    | block_statement\n                    | function_definitiondo_while_statement : KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLONswitch_statement : KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACEcase_list : case_clause\n                     | case_list case_clausecase_clause : KEYWORD_CASE expression COLON statement_list\n                       | KEYWORD_DEFAULT COLON statement_listbreak_statement : KEYWORD_BREAK SEMICOLONdeclaration_statement : type_specifier IDENTIFIER SEMICOLON\n                                | type_specifier IDENTIFIER ASSIGN expression SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLONtype_specifier : primitive_type\n                         | array_typeprimitive_type : KEYWORD_INT\n                          | KEYWORD_FLOAT\n                          | KEYWORD_CHAR\n                          | KEYWORD_VOID\n                          | KEYWORD_STRING\n                          | KEYWORD_BOOL\n                          | KEYWORD_FILE\n                          | KEYWORD_SOCKET\n                          | KEYWORD_DICT\n                          | KEYWORD_REGEX\n                          | KEYWORD_ARRAYarray_type : primitive_type LBRACKET RBRACKETassignment_statement : left_hand_side ASSIGN expression SEMICOLONleft_hand_side : IDENTIFIER\n                         | subscript_accessassignment_statement_no_semi : left_hand_side ASSIGN expressionif_statement : KEYWORD_IF LPAREN expression RPAREN statement %prec LOWER_THAN_ELSE\n                        | KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statementwhile_statement : KEYWORD_WHILE LPAREN expression RPAREN statementfor_statement : KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statementfor_init : assignment_statement_no_semi SEMICOLON\n                    | declaration_statement\n                    | SEMICOLONexpression_statement : expression SEMICOLON\n                               | SEMICOLONexpression_opt : expression\n                         | assignment_statement_no_semi\n                         | emptyempty :return_statement : KEYWORD_RETURN SEMICOLON\n                           | KEYWORD_RETURN expression SEMICOLONfunction_call_statement : function_call SEMICOLONfunction_call : IDENTIFIER LPAREN argument_list RPAREN\n                        | IDENTIFIER LPAREN RPAREN\n                        | SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN\n                        | SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN\n                        | SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN\n                        | KEYWORD_EXIT LPAREN RPAREN\n                        | SYSTEM_ARR_PUSH LPAREN expression COMMA expression RPAREN\n                        | SYSTEM_ARR_POP LPAREN expression RPAREN\n                        | SYSTEM_ARR_SIZE LPAREN expression RPAREN\n                        | SYSTEM_ARR_CONTAINS LPAREN expression COMMA expression RPAREN\n                        | SYSTEM_ARR_INDEXOF LPAREN expression COMMA expression RPAREN\n                        | SYSTEM_ARR_AVG LPAREN expression RPAREN\n                        | SYSTEM_ARR_AVG LPAREN expression COMMA expression RPARENargument_list : expression\n                        | argument_list COMMA expressionblock_statement : LBRACE RBRACE\n                          | LBRACE statement_list RBRACEinitializer_list : LBRACKET expression_list_opt RBRACKETexpression_list_opt : expression_list\n                               | emptyexpression_list : expression\n                           | expression_list COMMA expressionexpression : logical_expression\n                      | initializer_listlogical_expression : equality_expression\n                             | logical_expression AND equality_expression\n                             | logical_expression OR equality_expressionequality_expression : relational_expression\n                               | equality_expression EQ relational_expression\n                               | equality_expression NEQ relational_expressionrelational_expression : additive_expression\n                                | relational_expression GT additive_expression\n                                | relational_expression LT additive_expression\n                                | relational_expression GEQ additive_expression\n                                | relational_expression LEQ additive_expressionadditive_expression : multiplicative_expression\n                              | additive_expression PLUS multiplicative_expression\n                              | additive_expression MINUS multiplicative_expressionmultiplicative_expression : unary_expression\n                                    | multiplicative_expression MUL unary_expression\n                                    | multiplicative_expression DIV unary_expression\n                                    | multiplicative_expression MOD unary_expressionunary_expression : primary_expression\n                           | MINUS unary_expression %prec UMINUSprimary_expression : IDENTIFIER\n                             | INT_LITERAL\n                             | FLOAT_LITERAL\n                             | STRING_LITERAL\n                             | CHAR_LITERAL\n                             | KEYWORD_TRUE\n                             | KEYWORD_FALSE\n                             | KEYWORD_NULL\n                             | LPAREN expression RPAREN\n                             | function_call\n                             | subscript_access\n                             | dictionary_literaldictionary_literal : LBRACE key_value_list_opt RBRACEkey_value_list_opt : key_value_list\n                              | emptykey_value_list : key_value\n                          | key_value_list COMMA key_valuekey_value : expression COLON expressionsubscript_access : IDENTIFIER LBRACKET expression RBRACKET'
    
_lr_action_items = {'KEYWORD_IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,51,61,62,63,64,89,100,120,121,167,168,169,209,212,217,218,232,236,238,253,254,255,256,257,258,261,263,264,265,266,268,],[19,19,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,19,19,-9,-85,19,-28,-67,-69,-29,-86,-68,-50,19,19,-30,-35,-54,-56,-31,-2,19,-33,-34,-55,-22,19,-23,19,-32,-57,19,19,19,]),'KEYWORD_WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,51,58,61,62,63,64,89,100,120,121,167,168,169,209,212,217,218,232,236,238,253,254,255,256,257,258,261,263,264,265,266,268,],[20,20,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,20,20,-9,111,-85,20,-28,-67,-69,-29,-86,-68,-50,20,20,-30,-35,-54,-56,-31,-2,20,-33,-34,-55,-22,20,-23,20,-32,-57,20,20,20,]),'KEYWORD_DO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,51,61,62,63,64,89,100,120,121,167,168,169,209,212,217,218,232,236,238,253,254,255,256,257,258,261,263,264,265,266,268,],[21,21,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,21,21,-9,-85,21,-28,-67,-69,-29,-86,-68,-50,21,21,-30,-35,-54,-56,-31,-2,21,-33,-34,-55,-22,21,-23,21,-32,-57,21,21,21,]),'KEYWORD_FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,51,61,62,63,64,89,100,120,121,167,168,169,209,212,217,218,232,236,238,253,254,255,256,257,258,261,263,264,265,266,268,],[22,22,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,22,22,-9,-85,22,-28,-67,-69,-29,-86,-68,-50,22,22,-30,-35,-54,-56,-31,-2,22,-33,-34,-55,-22,22,-23,22,-32,-57,22,22,22,]),'KEYWORD_SWITCH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,51,61,62,63,64,89,100,120,121,167,168,169,209,212,217,218,232,236,238,253,254,255,256,257,258,261,263,264,265,266,268,],[23,23,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,23,23,-9,-85,23,-28,-67,-69,-29,-86,-68,-50,23,23,-30,-35,-54,-56,-31,-2,23,-33,-34,-55,-22,23,-23,23,-32,-57,23,23,23,]),'KEYWORD_BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,51,61,62,63,64,89,100,120,121,167,168,169,209,212,217,218,232,236,238,253,254,255,256,257,258,261,263,264,265,266,268,],[25,25,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,25,25,-9,-85,25,-28,-67,-69,-29,-86,-68,-50,25,25,-30,-35,-54,-56,-31,-2,25,-33,-34,-55,-22,25,-23,25,-32,-57,25,25,25,]),'KEYWORD_RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,51,61,62,63,64,89,100,120,121,167,168,169,209,212,217,218,232,236,238,253,254,255,256,257,258,261,263,264,265,266,268,],[26,26,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,26,26,-9,-85,26,-28,-67,-69,-29,-86,-68,-50,26,26,-30,-35,-54,-56,-31,-2,26,-33,-34,-55,-22,26,-23,26,-32,-57,26,26,26,]),'LBRACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,51,53,54,55,56,57,60,61,62,63,64,69,73,84,88,89,92,94,95,96,97,98,99,100,101,102,112,113,115,120,121,122,123,124,125,130,131,132,133,134,135,136,137,138,165,167,168,169,170,177,178,180,186,198,199,202,205,206,208,209,211,212,214,217,218,220,232,236,238,243,246,253,254,255,256,257,258,261,263,264,265,266,268,],[24,24,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,24,24,88,-9,88,88,88,88,88,88,-85,24,-28,-67,88,88,88,88,-69,88,88,88,88,88,88,88,-29,88,88,88,-60,-59,-86,-68,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-50,24,24,88,-58,88,222,88,88,88,88,88,88,88,-30,88,-35,24,-54,-56,88,-31,-2,24,88,88,-33,-34,-55,-22,24,-23,24,-32,-57,24,24,24,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,24,26,28,29,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,59,60,61,62,63,64,69,73,84,88,89,91,92,94,95,96,97,98,99,100,101,102,112,113,115,117,120,121,122,123,124,125,130,131,132,133,134,135,136,137,138,146,159,165,167,168,169,170,177,178,186,198,199,202,205,206,208,209,211,212,217,218,220,232,236,238,243,246,253,254,255,256,257,258,261,263,264,265,266,268,],[17,17,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,52,17,17,76,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-9,76,76,76,76,76,118,76,-85,17,-28,-67,76,76,76,76,-69,147,76,76,76,76,76,76,76,-29,76,76,175,-60,-59,179,-86,-68,76,76,76,76,76,76,76,76,76,76,76,76,76,-49,213,76,-50,17,17,76,-58,76,76,76,76,76,76,76,76,-30,76,-35,-54,-56,175,-31,-2,17,76,76,-33,-34,-55,-22,17,-23,17,-32,-57,17,17,17,]),'SYSTEM_INPUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,51,53,54,55,56,57,60,61,62,63,64,69,73,84,88,89,92,94,95,96,97,98,99,100,101,102,112,113,115,120,121,122,123,124,125,130,131,132,133,134,135,136,137,138,165,167,168,169,170,177,178,186,198,199,202,205,206,208,209,211,212,217,218,220,232,236,238,243,246,253,254,255,256,257,258,261,263,264,265,266,268,],[31,31,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,31,31,31,-9,31,31,31,31,31,31,-85,31,-28,-67,31,31,31,31,-69,31,31,31,31,31,31,31,-29,31,31,31,-60,-59,-86,-68,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-50,31,31,31,-58,31,31,31,31,31,31,31,31,-30,31,-35,-54,-56,31,-31,-2,31,31,31,-33,-34,-55,-22,31,-23,31,-32,-57,31,31,31,]),'SYSTEM_OUTPUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,51,53,54,55,56,57,60,61,62,63,64,69,73,84,88,89,92,94,95,96,97,98,99,100,101,102,112,113,115,120,121,122,123,124,125,130,131,132,133,134,135,136,137,138,165,167,168,169,170,177,178,186,198,199,202,205,206,208,209,211,212,217,218,220,232,236,238,243,246,253,254,255,256,257,258,261,263,264,265,266,268,],[32,32,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,32,32,32,-9,32,32,32,32,32,32,-85,32,-28,-67,32,32,32,32,-69,32,32,32,32,32,32,32,-29,32,32,32,-60,-59,-86,-68,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-50,32,32,32,-58,32,32,32,32,32,32,32,32,-30,32,-35,-54,-56,32,-31,-2,32,32,32,-33,-34,-55,-22,32,-23,32,-32,-57,32,32,32,]),'KEYWORD_EXIT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,51,53,54,55,56,57,60,61,62,63,64,69,73,84,88,89,92,94,95,96,97,98,99,100,101,102,112,113,115,120,121,122,123,124,125,130,131,132,133,134,135,136,137,138,165,167,168,169,170,177,178,186,198,199,202,205,206,208,209,211,212,217,218,220,232,236,238,243,246,253,254,255,256,257,258,261,263,264,265,266,268,],[33,33,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,33,33,33,-9,33,33,33,33,33,33,-85,33,-28,-67,33,33,33,33,-69,33,33,33,33,33,33,33,-29,33,33,33,-60,-59,-86,-68,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-50,33,33,33,-58,33,33,33,33,33,33,33,33,-30,33,-35,-54,-56,33,-31,-2,33,33,33,-33,-34,-55,-22,33,-23,33,-32,-57,33,33,33,]),'SYSTEM_ARR_PUSH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,51,53,54,55,56,57,60,61,62,63,64,69,73,84,88,89,92,94,95,96,97,98,99,100,101,102,112,113,115,120,121,122,123,124,125,130,131,132,133,134,135,136,137,138,165,167,168,169,170,177,178,186,198,199,202,205,206,208,209,211,212,217,218,220,232,236,238,243,246,253,254,255,256,257,258,261,263,264,265,266,268,],[34,34,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,34,34,34,-9,34,34,34,34,34,34,-85,34,-28,-67,34,34,34,34,-69,34,34,34,34,34,34,34,-29,34,34,34,-60,-59,-86,-68,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-50,34,34,34,-58,34,34,34,34,34,34,34,34,-30,34,-35,-54,-56,34,-31,-2,34,34,34,-33,-34,-55,-22,34,-23,34,-32,-57,34,34,34,]),'SYSTEM_ARR_POP':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,51,53,54,55,56,57,60,61,62,63,64,69,73,84,88,89,92,94,95,96,97,98,99,100,101,102,112,113,115,120,121,122,123,124,125,130,131,132,133,134,135,136,137,138,165,167,168,169,170,177,178,186,198,199,202,205,206,208,209,211,212,217,218,220,232,236,238,243,246,253,254,255,256,257,258,261,263,264,265,266,268,],[35,35,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,35,35,35,-9,35,35,35,35,35,35,-85,35,-28,-67,35,35,35,35,-69,35,35,35,35,35,35,35,-29,35,35,35,-60,-59,-86,-68,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-50,35,35,35,-58,35,35,35,35,35,35,35,35,-30,35,-35,-54,-56,35,-31,-2,35,35,35,-33,-34,-55,-22,35,-23,35,-32,-57,35,35,35,]),'SYSTEM_ARR_SIZE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,51,53,54,55,56,57,60,61,62,63,64,69,73,84,88,89,92,94,95,96,97,98,99,100,101,102,112,113,115,120,121,122,123,124,125,130,131,132,133,134,135,136,137,138,165,167,168,169,170,177,178,186,198,199,202,205,206,208,209,211,212,217,218,220,232,236,238,243,246,253,254,255,256,257,258,261,263,264,265,266,268,],[36,36,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,36,36,36,-9,36,36,36,36,36,36,-85,36,-28,-67,36,36,36,36,-69,36,36,36,36,36,36,36,-29,36,36,36,-60,-59,-86,-68,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-50,36,36,36,-58,36,36,36,36,36,36,36,36,-30,36,-35,-54,-56,36,-31,-2,36,36,36,-33,-34,-55,-22,36,-23,36,-32,-57,36,36,36,]),'SYSTEM_ARR_CONTAINS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,51,53,54,55,56,57,60,61,62,63,64,69,73,84,88,89,92,94,95,96,97,98,99,100,101,102,112,113,115,120,121,122,123,124,125,130,131,132,133,134,135,136,137,138,165,167,168,169,170,177,178,186,198,199,202,205,206,208,209,211,212,217,218,220,232,236,238,243,246,253,254,255,256,257,258,261,263,264,265,266,268,],[37,37,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,37,37,37,-9,37,37,37,37,37,37,-85,37,-28,-67,37,37,37,37,-69,37,37,37,37,37,37,37,-29,37,37,37,-60,-59,-86,-68,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-50,37,37,37,-58,37,37,37,37,37,37,37,37,-30,37,-35,-54,-56,37,-31,-2,37,37,37,-33,-34,-55,-22,37,-23,37,-32,-57,37,37,37,]),'SYSTEM_ARR_INDEXOF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,51,53,54,55,56,57,60,61,62,63,64,69,73,84,88,89,92,94,95,96,97,98,99,100,101,102,112,113,115,120,121,122,123,124,125,130,131,132,133,134,135,136,137,138,165,167,168,169,170,177,178,186,198,199,202,205,206,208,209,211,212,217,218,220,232,236,238,243,246,253,254,255,256,257,258,261,263,264,265,266,268,],[38,38,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,38,38,38,-9,38,38,38,38,38,38,-85,38,-28,-67,38,38,38,38,-69,38,38,38,38,38,38,38,-29,38,38,38,-60,-59,-86,-68,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-50,38,38,38,-58,38,38,38,38,38,38,38,38,-30,38,-35,-54,-56,38,-31,-2,38,38,38,-33,-34,-55,-22,38,-23,38,-32,-57,38,38,38,]),'SYSTEM_ARR_AVG':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,51,53,54,55,56,57,60,61,62,63,64,69,73,84,88,89,92,94,95,96,97,98,99,100,101,102,112,113,115,120,121,122,123,124,125,130,131,132,133,134,135,136,137,138,165,167,168,169,170,177,178,186,198,199,202,205,206,208,209,211,212,217,218,220,232,236,238,243,246,253,254,255,256,257,258,261,263,264,265,266,268,],[39,39,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,39,39,39,-9,39,39,39,39,39,39,-85,39,-28,-67,39,39,39,39,-69,39,39,39,39,39,39,39,-29,39,39,39,-60,-59,-86,-68,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-50,39,39,39,-58,39,39,39,39,39,39,39,39,-30,39,-35,-54,-56,39,-31,-2,39,39,39,-33,-34,-55,-22,39,-23,39,-32,-57,39,39,39,]),'KEYWORD_INT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,51,59,61,62,63,64,89,100,103,120,121,167,168,169,200,201,209,212,215,217,218,232,236,238,253,254,255,256,257,258,261,263,264,265,266,268,],[40,40,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,40,40,-9,40,-85,40,-28,-67,-69,-29,40,-86,-68,-50,40,40,40,40,-30,-35,40,-54,-56,-31,-2,40,-33,-34,-55,-22,40,-23,40,-32,-57,40,40,40,]),'KEYWORD_FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,51,59,61,62,63,64,89,100,103,120,121,167,168,169,200,201,209,212,215,217,218,232,236,238,253,254,255,256,257,258,261,263,264,265,266,268,],[41,41,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,41,41,-9,41,-85,41,-28,-67,-69,-29,41,-86,-68,-50,41,41,41,41,-30,-35,41,-54,-56,-31,-2,41,-33,-34,-55,-22,41,-23,41,-32,-57,41,41,41,]),'KEYWORD_CHAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,51,59,61,62,63,64,89,100,103,120,121,167,168,169,200,201,209,212,215,217,218,232,236,238,253,254,255,256,257,258,261,263,264,265,266,268,],[42,42,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,42,42,-9,42,-85,42,-28,-67,-69,-29,42,-86,-68,-50,42,42,42,42,-30,-35,42,-54,-56,-31,-2,42,-33,-34,-55,-22,42,-23,42,-32,-57,42,42,42,]),'KEYWORD_VOID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,51,59,61,62,63,64,89,100,103,120,121,167,168,169,200,201,209,212,215,217,218,232,236,238,253,254,255,256,257,258,261,263,264,265,266,268,],[43,43,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,43,43,-9,43,-85,43,-28,-67,-69,-29,43,-86,-68,-50,43,43,43,43,-30,-35,43,-54,-56,-31,-2,43,-33,-34,-55,-22,43,-23,43,-32,-57,43,43,43,]),'KEYWORD_STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,51,59,61,62,63,64,89,100,103,120,121,167,168,169,200,201,209,212,215,217,218,232,236,238,253,254,255,256,257,258,261,263,264,265,266,268,],[44,44,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,44,44,-9,44,-85,44,-28,-67,-69,-29,44,-86,-68,-50,44,44,44,44,-30,-35,44,-54,-56,-31,-2,44,-33,-34,-55,-22,44,-23,44,-32,-57,44,44,44,]),'KEYWORD_BOOL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,51,59,61,62,63,64,89,100,103,120,121,167,168,169,200,201,209,212,215,217,218,232,236,238,253,254,255,256,257,258,261,263,264,265,266,268,],[45,45,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,45,45,-9,45,-85,45,-28,-67,-69,-29,45,-86,-68,-50,45,45,45,45,-30,-35,45,-54,-56,-31,-2,45,-33,-34,-55,-22,45,-23,45,-32,-57,45,45,45,]),'KEYWORD_FILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,51,59,61,62,63,64,89,100,103,120,121,167,168,169,200,201,209,212,215,217,218,232,236,238,253,254,255,256,257,258,261,263,264,265,266,268,],[46,46,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,46,46,-9,46,-85,46,-28,-67,-69,-29,46,-86,-68,-50,46,46,46,46,-30,-35,46,-54,-56,-31,-2,46,-33,-34,-55,-22,46,-23,46,-32,-57,46,46,46,]),'KEYWORD_SOCKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,51,59,61,62,63,64,89,100,103,120,121,167,168,169,200,201,209,212,215,217,218,232,236,238,253,254,255,256,257,258,261,263,264,265,266,268,],[47,47,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,47,47,-9,47,-85,47,-28,-67,-69,-29,47,-86,-68,-50,47,47,47,47,-30,-35,47,-54,-56,-31,-2,47,-33,-34,-55,-22,47,-23,47,-32,-57,47,47,47,]),'KEYWORD_DICT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,51,59,61,62,63,64,89,100,103,120,121,167,168,169,200,201,209,212,215,217,218,232,236,238,253,254,255,256,257,258,261,263,264,265,266,268,],[48,48,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,48,48,-9,48,-85,48,-28,-67,-69,-29,48,-86,-68,-50,48,48,48,48,-30,-35,48,-54,-56,-31,-2,48,-33,-34,-55,-22,48,-23,48,-32,-57,48,48,48,]),'KEYWORD_REGEX':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,51,59,61,62,63,64,89,100,103,120,121,167,168,169,200,201,209,212,215,217,218,232,236,238,253,254,255,256,257,258,261,263,264,265,266,268,],[49,49,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,49,49,-9,49,-85,49,-28,-67,-69,-29,49,-86,-68,-50,49,49,49,49,-30,-35,49,-54,-56,-31,-2,49,-33,-34,-55,-22,49,-23,49,-32,-57,49,49,49,]),'KEYWORD_ARRAY':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,51,59,61,62,63,64,89,100,103,120,121,167,168,169,200,201,209,212,215,217,218,232,236,238,253,254,255,256,257,258,261,263,264,265,266,268,],[50,50,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,50,50,-9,50,-85,50,-28,-67,-69,-29,50,-86,-68,-50,50,50,50,50,-30,-35,50,-54,-56,-31,-2,50,-33,-34,-55,-22,50,-23,50,-32,-57,50,50,50,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,51,61,63,64,89,100,120,121,167,209,212,217,218,232,236,253,254,255,256,258,263,264,],[0,-1,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-9,-85,-28,-67,-69,-29,-86,-68,-50,-30,-35,-54,-56,-31,-2,-33,-34,-55,-22,-23,-32,-57,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,24,51,61,62,63,64,66,67,68,70,71,72,74,75,76,77,78,79,80,81,82,83,85,86,87,88,89,100,105,120,121,139,141,142,143,144,149,164,166,167,181,182,183,184,185,187,188,189,190,191,192,193,194,195,196,197,203,204,207,209,212,217,218,224,225,232,236,241,242,245,247,248,249,250,251,253,254,255,256,258,259,263,264,266,267,268,],[-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,61,-9,-85,120,-28,-67,-92,-93,-94,-97,-100,-105,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,-123,-124,-125,-66,-69,-29,-71,-86,-68,-113,197,-127,-128,-129,-75,-70,-132,-50,-95,-96,-98,-99,-87,-101,-102,-103,-104,-106,-107,-109,-110,-111,-122,-126,-77,-78,-81,-30,-35,-54,-56,-130,-131,-31,-2,258,-24,-72,-73,-76,-79,-80,-82,-33,-34,-55,-22,-23,-25,-32,-57,-27,-74,-26,]),'KEYWORD_CASE':([3,4,5,6,7,8,9,10,11,12,13,14,15,51,61,63,64,89,100,120,121,167,209,212,217,218,222,232,236,241,242,253,254,255,256,258,259,263,264,266,268,],[-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-9,-85,-28,-67,-69,-29,-86,-68,-50,-30,-35,-54,-56,243,-31,-2,243,-24,-33,-34,-55,-22,-23,-25,-32,-57,-27,-26,]),'KEYWORD_DEFAULT':([3,4,5,6,7,8,9,10,11,12,13,14,15,51,61,63,64,89,100,120,121,167,209,212,217,218,222,232,236,241,242,253,254,255,256,258,259,263,264,266,268,],[-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-9,-85,-28,-67,-69,-29,-86,-68,-50,-30,-35,-54,-56,244,-31,-2,244,-24,-33,-34,-55,-22,-23,-25,-32,-57,-27,-26,]),'KEYWORD_ELSE':([4,5,6,7,8,9,10,11,12,13,14,15,61,63,64,89,100,120,121,167,209,212,217,218,232,236,253,254,255,256,258,263,264,],[-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-85,-28,-67,-69,-29,-86,-68,-50,-30,-35,238,-56,-31,-2,-33,-34,-55,-22,-23,-32,-57,]),'ASSIGN':([17,18,30,52,116,118,158,166,175,176,179,210,],[-51,55,-52,101,178,-51,211,-132,-51,-52,101,233,]),'LPAREN':([17,19,20,22,23,26,31,32,33,34,35,36,37,38,39,52,53,54,55,56,57,60,69,73,76,84,88,92,94,95,96,97,98,99,100,101,102,111,112,113,115,122,123,124,125,130,131,132,133,134,135,136,137,138,165,170,175,177,178,186,198,199,202,205,206,208,209,211,212,220,232,243,246,253,254,263,],[53,56,57,59,60,84,91,92,93,94,95,96,97,98,99,103,84,84,84,84,84,84,84,84,53,84,84,84,84,84,84,84,84,84,-29,84,84,170,84,-60,-59,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,53,-58,84,84,84,84,84,84,84,84,-30,84,-35,84,-31,84,84,-33,-34,-32,]),'LBRACKET':([17,26,28,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,60,69,76,84,88,92,94,95,96,97,98,99,100,101,102,112,113,115,118,165,170,175,177,178,179,186,198,199,202,205,206,208,209,211,212,220,232,233,243,246,253,254,263,],[54,69,90,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,102,69,69,69,69,69,69,69,54,69,69,69,69,69,69,69,69,69,-29,69,69,69,-60,-59,54,69,69,54,-58,69,102,69,69,69,69,69,69,69,-30,69,-35,69,-31,69,69,69,-33,-34,-32,]),'SEMICOLON':([25,26,27,52,59,65,66,67,68,70,71,72,74,75,76,77,78,79,80,81,82,83,85,86,87,100,105,108,112,113,114,115,139,149,156,158,164,166,171,172,173,174,175,176,177,179,181,182,183,184,185,187,188,189,190,191,192,193,194,195,196,197,203,204,207,209,210,212,221,232,234,235,239,245,247,248,249,250,251,252,253,254,263,267,],[63,64,89,100,113,121,-92,-93,-94,-97,-100,-105,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,-123,-124,-125,-29,-71,167,-66,-60,177,-59,-113,-75,209,212,-70,-132,220,-63,-64,-65,-114,-124,-58,100,-95,-96,-98,-99,-87,-101,-102,-103,-104,-106,-107,-109,-110,-111,-122,-126,-77,-78,-81,-30,232,-35,-53,-31,253,254,256,-72,-73,-76,-79,-80,-82,263,-33,-34,-32,-74,]),'MINUS':([26,53,54,55,56,57,60,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,95,96,97,98,99,100,101,102,105,112,113,115,122,123,124,125,130,131,132,133,134,135,136,137,138,139,149,164,165,166,170,175,176,177,178,186,187,188,189,190,191,192,193,194,195,196,197,198,199,202,203,204,205,206,207,208,209,211,212,220,232,243,245,246,247,248,249,250,251,253,254,263,267,],[73,73,73,73,73,73,73,73,135,-105,73,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,73,-123,-124,-125,73,73,73,73,73,73,73,73,-29,73,73,-71,73,-60,-59,73,73,73,73,73,73,73,73,73,73,73,73,73,-113,-75,-70,73,-132,73,-114,-124,-58,73,73,135,135,135,135,-106,-107,-109,-110,-111,-122,-126,73,73,73,-77,-78,73,73,-81,73,-30,73,-35,73,-31,73,-72,73,-73,-76,-79,-80,-82,-33,-34,-32,-74,]),'INT_LITERAL':([26,53,54,55,56,57,60,69,73,84,88,92,94,95,96,97,98,99,100,101,102,112,113,115,122,123,124,125,130,131,132,133,134,135,136,137,138,165,170,177,178,186,198,199,202,205,206,208,209,211,212,220,232,243,246,253,254,263,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-29,77,77,77,-60,-59,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-58,77,77,77,77,77,77,77,77,-30,77,-35,77,-31,77,77,-33,-34,-32,]),'FLOAT_LITERAL':([26,53,54,55,56,57,60,69,73,84,88,92,94,95,96,97,98,99,100,101,102,112,113,115,122,123,124,125,130,131,132,133,134,135,136,137,138,165,170,177,178,186,198,199,202,205,206,208,209,211,212,220,232,243,246,253,254,263,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-29,78,78,78,-60,-59,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-58,78,78,78,78,78,78,78,78,-30,78,-35,78,-31,78,78,-33,-34,-32,]),'STRING_LITERAL':([26,53,54,55,56,57,60,69,73,84,88,92,94,95,96,97,98,99,100,101,102,112,113,115,122,123,124,125,130,131,132,133,134,135,136,137,138,165,170,177,178,186,198,199,202,205,206,208,209,211,212,220,232,243,246,253,254,263,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-29,79,79,79,-60,-59,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-58,79,79,79,79,79,79,79,79,-30,79,-35,79,-31,79,79,-33,-34,-32,]),'CHAR_LITERAL':([26,53,54,55,56,57,60,69,73,84,88,92,94,95,96,97,98,99,100,101,102,112,113,115,122,123,124,125,130,131,132,133,134,135,136,137,138,165,170,177,178,186,198,199,202,205,206,208,209,211,212,220,232,243,246,253,254,263,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-29,80,80,80,-60,-59,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-58,80,80,80,80,80,80,80,80,-30,80,-35,80,-31,80,80,-33,-34,-32,]),'KEYWORD_TRUE':([26,53,54,55,56,57,60,69,73,84,88,92,94,95,96,97,98,99,100,101,102,112,113,115,122,123,124,125,130,131,132,133,134,135,136,137,138,165,170,177,178,186,198,199,202,205,206,208,209,211,212,220,232,243,246,253,254,263,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-29,81,81,81,-60,-59,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-58,81,81,81,81,81,81,81,81,-30,81,-35,81,-31,81,81,-33,-34,-32,]),'KEYWORD_FALSE':([26,53,54,55,56,57,60,69,73,84,88,92,94,95,96,97,98,99,100,101,102,112,113,115,122,123,124,125,130,131,132,133,134,135,136,137,138,165,170,177,178,186,198,199,202,205,206,208,209,211,212,220,232,243,246,253,254,263,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-29,82,82,82,-60,-59,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-58,82,82,82,82,82,82,82,82,-30,82,-35,82,-31,82,82,-33,-34,-32,]),'KEYWORD_NULL':([26,53,54,55,56,57,60,69,73,84,88,92,94,95,96,97,98,99,100,101,102,112,113,115,122,123,124,125,130,131,132,133,134,135,136,137,138,165,170,177,178,186,198,199,202,205,206,208,209,211,212,220,232,243,246,253,254,263,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-29,83,83,83,-60,-59,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-58,83,83,83,83,83,83,83,83,-30,83,-35,83,-31,83,83,-33,-34,-32,]),'RPAREN':([28,29,40,41,42,43,44,45,46,47,48,49,50,53,66,67,68,70,71,72,74,75,76,77,78,79,80,81,82,83,85,86,87,93,103,104,105,106,109,110,119,139,140,146,149,151,152,155,160,161,162,163,164,166,172,173,174,175,176,181,182,183,184,185,187,188,189,190,191,192,193,194,195,196,197,203,204,207,213,216,219,220,221,226,227,228,229,230,231,237,240,245,247,248,249,250,251,262,267,],[-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,105,-92,-93,-94,-97,-100,-105,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,-123,-124,-125,149,-66,164,-71,-83,168,169,180,-113,196,-49,-75,203,204,207,214,-3,-4,-5,-70,-132,-63,-64,-65,-114,-124,-95,-96,-98,-99,-87,-101,-102,-103,-104,-106,-107,-109,-110,-111,-122,-126,-77,-78,-81,-7,-84,239,-66,-53,245,247,248,249,250,251,-6,257,-72,-73,-76,-79,-80,-82,267,-74,]),'COMMA':([28,29,40,41,42,43,44,45,46,47,48,49,50,66,67,68,70,71,72,74,75,76,77,78,79,80,81,82,83,85,86,87,104,105,106,127,129,139,142,144,146,147,148,149,150,153,154,155,161,163,164,166,181,182,183,184,185,187,188,189,190,191,192,193,194,195,196,197,203,204,207,213,216,223,224,225,227,237,245,247,248,249,250,251,267,],[-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-92,-93,-94,-97,-100,-105,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,-123,-124,-125,165,-71,-83,186,-90,-113,198,-129,-49,200,201,-75,202,205,206,208,215,-5,-70,-132,-95,-96,-98,-99,-87,-101,-102,-103,-104,-106,-107,-109,-110,-111,-122,-126,-77,-78,-81,-7,-84,-91,-130,-131,246,-6,-72,-73,-76,-79,-80,-82,-74,]),'RBRACKET':([66,67,68,69,70,71,72,74,75,76,77,78,79,80,81,82,83,85,86,87,90,102,105,107,126,127,128,129,139,149,157,164,166,181,182,183,184,185,187,188,189,190,191,192,193,194,195,196,197,203,204,207,223,245,247,248,249,250,251,267,],[-92,-93,-94,-66,-97,-100,-105,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,-123,-124,-125,146,158,-71,166,185,-88,-89,-90,-113,-75,210,-70,-132,-95,-96,-98,-99,-87,-101,-102,-103,-104,-106,-107,-109,-110,-111,-122,-126,-77,-78,-81,-91,-72,-73,-76,-79,-80,-82,-74,]),'COLON':([66,67,68,70,71,72,74,75,76,77,78,79,80,81,82,83,85,86,87,105,139,145,149,164,166,181,182,183,184,185,187,188,189,190,191,192,193,194,195,196,197,203,204,207,244,245,247,248,249,250,251,260,267,],[-92,-93,-94,-97,-100,-105,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,-123,-124,-125,-71,-113,199,-75,-70,-132,-95,-96,-98,-99,-87,-101,-102,-103,-104,-106,-107,-109,-110,-111,-122,-126,-77,-78,-81,261,-72,-73,-76,-79,-80,-82,265,-74,]),'AND':([66,68,70,71,72,74,75,76,77,78,79,80,81,82,83,85,86,87,105,139,149,164,166,175,176,181,182,183,184,187,188,189,190,191,192,193,194,195,196,197,203,204,207,245,247,248,249,250,251,267,],[122,-94,-97,-100,-105,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,-123,-124,-125,-71,-113,-75,-70,-132,-114,-124,-95,-96,-98,-99,-101,-102,-103,-104,-106,-107,-109,-110,-111,-122,-126,-77,-78,-81,-72,-73,-76,-79,-80,-82,-74,]),'OR':([66,68,70,71,72,74,75,76,77,78,79,80,81,82,83,85,86,87,105,139,149,164,166,175,176,181,182,183,184,187,188,189,190,191,192,193,194,195,196,197,203,204,207,245,247,248,249,250,251,267,],[123,-94,-97,-100,-105,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,-123,-124,-125,-71,-113,-75,-70,-132,-114,-124,-95,-96,-98,-99,-101,-102,-103,-104,-106,-107,-109,-110,-111,-122,-126,-77,-78,-81,-72,-73,-76,-79,-80,-82,-74,]),'EQ':([68,70,71,72,74,75,76,77,78,79,80,81,82,83,85,86,87,105,139,149,164,166,175,176,181,182,183,184,187,188,189,190,191,192,193,194,195,196,197,203,204,207,245,247,248,249,250,251,267,],[124,-97,-100,-105,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,-123,-124,-125,-71,-113,-75,-70,-132,-114,-124,124,124,-98,-99,-101,-102,-103,-104,-106,-107,-109,-110,-111,-122,-126,-77,-78,-81,-72,-73,-76,-79,-80,-82,-74,]),'NEQ':([68,70,71,72,74,75,76,77,78,79,80,81,82,83,85,86,87,105,139,149,164,166,175,176,181,182,183,184,187,188,189,190,191,192,193,194,195,196,197,203,204,207,245,247,248,249,250,251,267,],[125,-97,-100,-105,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,-123,-124,-125,-71,-113,-75,-70,-132,-114,-124,125,125,-98,-99,-101,-102,-103,-104,-106,-107,-109,-110,-111,-122,-126,-77,-78,-81,-72,-73,-76,-79,-80,-82,-74,]),'GT':([70,71,72,74,75,76,77,78,79,80,81,82,83,85,86,87,105,139,149,164,166,175,176,183,184,187,188,189,190,191,192,193,194,195,196,197,203,204,207,245,247,248,249,250,251,267,],[130,-100,-105,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,-123,-124,-125,-71,-113,-75,-70,-132,-114,-124,130,130,-101,-102,-103,-104,-106,-107,-109,-110,-111,-122,-126,-77,-78,-81,-72,-73,-76,-79,-80,-82,-74,]),'LT':([70,71,72,74,75,76,77,78,79,80,81,82,83,85,86,87,105,139,149,164,166,175,176,183,184,187,188,189,190,191,192,193,194,195,196,197,203,204,207,245,247,248,249,250,251,267,],[131,-100,-105,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,-123,-124,-125,-71,-113,-75,-70,-132,-114,-124,131,131,-101,-102,-103,-104,-106,-107,-109,-110,-111,-122,-126,-77,-78,-81,-72,-73,-76,-79,-80,-82,-74,]),'GEQ':([70,71,72,74,75,76,77,78,79,80,81,82,83,85,86,87,105,139,149,164,166,175,176,183,184,187,188,189,190,191,192,193,194,195,196,197,203,204,207,245,247,248,249,250,251,267,],[132,-100,-105,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,-123,-124,-125,-71,-113,-75,-70,-132,-114,-124,132,132,-101,-102,-103,-104,-106,-107,-109,-110,-111,-122,-126,-77,-78,-81,-72,-73,-76,-79,-80,-82,-74,]),'LEQ':([70,71,72,74,75,76,77,78,79,80,81,82,83,85,86,87,105,139,149,164,166,175,176,183,184,187,188,189,190,191,192,193,194,195,196,197,203,204,207,245,247,248,249,250,251,267,],[133,-100,-105,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,-123,-124,-125,-71,-113,-75,-70,-132,-114,-124,133,133,-101,-102,-103,-104,-106,-107,-109,-110,-111,-122,-126,-77,-78,-81,-72,-73,-76,-79,-80,-82,-74,]),'PLUS':([71,72,74,75,76,77,78,79,80,81,82,83,85,86,87,105,139,149,164,166,175,176,187,188,189,190,191,192,193,194,195,196,197,203,204,207,245,247,248,249,250,251,267,],[134,-105,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,-123,-124,-125,-71,-113,-75,-70,-132,-114,-124,134,134,134,134,-106,-107,-109,-110,-111,-122,-126,-77,-78,-81,-72,-73,-76,-79,-80,-82,-74,]),'MUL':([72,74,75,76,77,78,79,80,81,82,83,85,86,87,105,139,149,164,166,175,176,191,192,193,194,195,196,197,203,204,207,245,247,248,249,250,251,267,],[136,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,-123,-124,-125,-71,-113,-75,-70,-132,-114,-124,136,136,-109,-110,-111,-122,-126,-77,-78,-81,-72,-73,-76,-79,-80,-82,-74,]),'DIV':([72,74,75,76,77,78,79,80,81,82,83,85,86,87,105,139,149,164,166,175,176,191,192,193,194,195,196,197,203,204,207,245,247,248,249,250,251,267,],[137,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,-123,-124,-125,-71,-113,-75,-70,-132,-114,-124,137,137,-109,-110,-111,-122,-126,-77,-78,-81,-72,-73,-76,-79,-80,-82,-74,]),'MOD':([72,74,75,76,77,78,79,80,81,82,83,85,86,87,105,139,149,164,166,175,176,191,192,193,194,195,196,197,203,204,207,245,247,248,249,250,251,267,],[138,-108,-112,-114,-115,-116,-117,-118,-119,-120,-121,-123,-124,-125,-71,-113,-75,-70,-132,-114,-124,138,138,-109,-110,-111,-122,-126,-77,-78,-81,-72,-73,-76,-79,-80,-82,-74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,24,261,265,],[2,62,266,268,]),'statement':([0,2,21,24,62,168,169,238,257,261,265,266,268,],[3,51,58,3,51,217,218,255,264,3,3,51,51,]),'declaration_statement':([0,2,21,24,59,62,168,169,238,257,261,265,266,268,],[4,4,4,4,115,4,4,4,4,4,4,4,4,4,]),'assignment_statement':([0,2,21,24,62,168,169,238,257,261,265,266,268,],[5,5,5,5,5,5,5,5,5,5,5,5,5,]),'if_statement':([0,2,21,24,62,168,169,238,257,261,265,266,268,],[6,6,6,6,6,6,6,6,6,6,6,6,6,]),'while_statement':([0,2,21,24,62,168,169,238,257,261,265,266,268,],[7,7,7,7,7,7,7,7,7,7,7,7,7,]),'do_while_statement':([0,2,21,24,62,168,169,238,257,261,265,266,268,],[8,8,8,8,8,8,8,8,8,8,8,8,8,]),'for_statement':([0,2,21,24,62,168,169,238,257,261,265,266,268,],[9,9,9,9,9,9,9,9,9,9,9,9,9,]),'switch_statement':([0,2,21,24,62,168,169,238,257,261,265,266,268,],[10,10,10,10,10,10,10,10,10,10,10,10,10,]),'break_statement':([0,2,21,24,62,168,169,238,257,261,265,266,268,],[11,11,11,11,11,11,11,11,11,11,11,11,11,]),'return_statement':([0,2,21,24,62,168,169,238,257,261,265,266,268,],[12,12,12,12,12,12,12,12,12,12,12,12,12,]),'function_call_statement':([0,2,21,24,62,168,169,238,257,261,265,266,268,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'block_statement':([0,2,21,24,62,168,169,214,238,257,261,265,266,268,],[14,14,14,14,14,14,14,236,14,14,14,14,14,14,]),'function_definition':([0,2,21,24,62,168,169,238,257,261,265,266,268,],[15,15,15,15,15,15,15,15,15,15,15,15,15,]),'type_specifier':([0,2,21,24,59,62,103,168,169,200,201,215,238,257,261,265,266,268,],[16,16,16,16,117,16,159,16,16,226,227,159,16,16,16,16,16,16,]),'left_hand_side':([0,2,21,24,59,62,112,168,169,220,238,257,261,265,266,268,],[18,18,18,18,116,18,116,18,18,116,18,18,18,18,18,18,]),'function_call':([0,2,21,24,26,53,54,55,56,57,60,62,69,73,84,88,92,94,95,96,97,98,99,101,102,112,122,123,124,125,130,131,132,133,134,135,136,137,138,165,168,169,170,178,186,198,199,202,205,206,208,211,220,238,243,246,257,261,265,266,268,],[27,27,27,27,85,85,85,85,85,85,85,27,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,27,27,85,85,85,85,85,85,85,85,85,85,85,27,85,85,27,27,27,27,27,]),'primitive_type':([0,2,21,24,59,62,103,168,169,200,201,215,238,257,261,265,266,268,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'array_type':([0,2,21,24,59,62,103,168,169,200,201,215,238,257,261,265,266,268,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'subscript_access':([0,2,21,24,26,53,54,55,56,57,59,60,62,69,73,84,88,92,94,95,96,97,98,99,101,102,112,122,123,124,125,130,131,132,133,134,135,136,137,138,165,168,169,170,178,186,198,199,202,205,206,208,211,220,238,243,246,257,261,265,266,268,],[30,30,30,30,86,86,86,86,86,86,30,86,30,86,86,86,86,86,86,86,86,86,86,86,86,86,176,86,86,86,86,86,86,86,86,86,86,86,86,86,86,30,30,86,86,86,86,86,86,86,86,86,86,176,30,86,86,30,30,30,30,30,]),'expression':([26,53,54,55,56,57,60,69,84,88,92,94,95,96,97,98,99,101,102,112,165,170,178,186,198,199,202,205,206,208,211,220,243,246,],[65,106,107,108,109,110,119,129,140,145,148,150,151,152,153,154,155,156,157,172,216,219,221,223,145,225,228,229,230,231,235,172,260,262,]),'logical_expression':([26,53,54,55,56,57,60,69,84,88,92,94,95,96,97,98,99,101,102,112,165,170,178,186,198,199,202,205,206,208,211,220,243,246,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'initializer_list':([26,53,54,55,56,57,60,69,84,88,92,94,95,96,97,98,99,101,102,112,165,170,178,186,198,199,202,205,206,208,211,220,233,243,246,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,234,67,252,67,67,]),'equality_expression':([26,53,54,55,56,57,60,69,84,88,92,94,95,96,97,98,99,101,102,112,122,123,165,170,178,186,198,199,202,205,206,208,211,220,243,246,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,181,182,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'relational_expression':([26,53,54,55,56,57,60,69,84,88,92,94,95,96,97,98,99,101,102,112,122,123,124,125,165,170,178,186,198,199,202,205,206,208,211,220,243,246,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,183,184,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'additive_expression':([26,53,54,55,56,57,60,69,84,88,92,94,95,96,97,98,99,101,102,112,122,123,124,125,130,131,132,133,165,170,178,186,198,199,202,205,206,208,211,220,243,246,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,187,188,189,190,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'multiplicative_expression':([26,53,54,55,56,57,60,69,84,88,92,94,95,96,97,98,99,101,102,112,122,123,124,125,130,131,132,133,134,135,165,170,178,186,198,199,202,205,206,208,211,220,243,246,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,191,192,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'unary_expression':([26,53,54,55,56,57,60,69,73,84,88,92,94,95,96,97,98,99,101,102,112,122,123,124,125,130,131,132,133,134,135,136,137,138,165,170,178,186,198,199,202,205,206,208,211,220,243,246,],[74,74,74,74,74,74,74,74,139,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,193,194,195,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'primary_expression':([26,53,54,55,56,57,60,69,73,84,88,92,94,95,96,97,98,99,101,102,112,122,123,124,125,130,131,132,133,134,135,136,137,138,165,170,178,186,198,199,202,205,206,208,211,220,243,246,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'dictionary_literal':([26,53,54,55,56,57,60,69,73,84,88,92,94,95,96,97,98,99,101,102,112,122,123,124,125,130,131,132,133,134,135,136,137,138,165,170,178,186,198,199,202,205,206,208,211,220,243,246,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'argument_list':([53,],[104,]),'for_init':([59,],[112,]),'assignment_statement_no_semi':([59,112,220,],[114,173,173,]),'expression_list_opt':([69,],[126,]),'expression_list':([69,],[127,]),'empty':([69,88,103,112,220,],[128,143,162,174,174,]),'key_value_list_opt':([88,],[141,]),'key_value_list':([88,],[142,]),'key_value':([88,198,],[144,224,]),'params':([103,],[160,]),'param_list':([103,],[161,]),'param':([103,215,],[163,237,]),'expression_opt':([112,220,],[171,240,]),'case_list':([222,],[241,]),'case_clause':([222,241,],[242,259,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',332),
  ('function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement','function_definition',6,'p_function_definition','parser.py',336),
  ('params -> param_list','params',1,'p_params','parser.py',344),
  ('params -> empty','params',1,'p_params','parser.py',345),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',352),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',353),
  ('param -> type_specifier IDENTIFIER','param',2,'p_param','parser.py',360),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',364),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',365),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',372),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',373),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',374),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',375),
  ('statement -> do_while_statement','statement',1,'p_statement','parser.py',376),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',377),
  ('statement -> switch_statement','statement',1,'p_statement','parser.py',378),
  ('statement -> break_statement','statement',1,'p_statement','parser.py',379),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',380),
  ('statement -> function_call_statement','statement',1,'p_statement','parser.py',381),
  ('statement -> block_statement','statement',1,'p_statement','parser.py',382),
  ('statement -> function_definition','statement',1,'p_statement','parser.py',383),
  ('do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON','do_while_statement',7,'p_do_while_statement','parser.py',387),
  ('switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE','switch_statement',7,'p_switch_statement','parser.py',391),
  ('case_list -> case_clause','case_list',1,'p_case_list','parser.py',395),
  ('case_list -> case_list case_clause','case_list',2,'p_case_list','parser.py',396),
  ('case_clause -> KEYWORD_CASE expression COLON statement_list','case_clause',4,'p_case_clause','parser.py',403),
  ('case_clause -> KEYWORD_DEFAULT COLON statement_list','case_clause',3,'p_case_clause','parser.py',404),
  ('break_statement -> KEYWORD_BREAK SEMICOLON','break_statement',2,'p_break_statement','parser.py',411),
  ('declaration_statement -> type_specifier IDENTIFIER SEMICOLON','declaration_statement',3,'p_declaration_statement','parser.py',415),
  ('declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON','declaration_statement',5,'p_declaration_statement','parser.py',416),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON','declaration_statement',6,'p_declaration_statement','parser.py',417),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON','declaration_statement',8,'p_declaration_statement','parser.py',418),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON','declaration_statement',7,'p_declaration_statement','parser.py',419),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON','declaration_statement',7,'p_declaration_statement','parser.py',420),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON','declaration_statement',5,'p_declaration_statement','parser.py',421),
  ('type_specifier -> primitive_type','type_specifier',1,'p_type_specifier','parser.py',442),
  ('type_specifier -> array_type','type_specifier',1,'p_type_specifier','parser.py',443),
  ('primitive_type -> KEYWORD_INT','primitive_type',1,'p_primitive_type','parser.py',447),
  ('primitive_type -> KEYWORD_FLOAT','primitive_type',1,'p_primitive_type','parser.py',448),
  ('primitive_type -> KEYWORD_CHAR','primitive_type',1,'p_primitive_type','parser.py',449),
  ('primitive_type -> KEYWORD_VOID','primitive_type',1,'p_primitive_type','parser.py',450),
  ('primitive_type -> KEYWORD_STRING','primitive_type',1,'p_primitive_type','parser.py',451),
  ('primitive_type -> KEYWORD_BOOL','primitive_type',1,'p_primitive_type','parser.py',452),
  ('primitive_type -> KEYWORD_FILE','primitive_type',1,'p_primitive_type','parser.py',453),
  ('primitive_type -> KEYWORD_SOCKET','primitive_type',1,'p_primitive_type','parser.py',454),
  ('primitive_type -> KEYWORD_DICT','primitive_type',1,'p_primitive_type','parser.py',455),
  ('primitive_type -> KEYWORD_REGEX','primitive_type',1,'p_primitive_type','parser.py',456),
  ('primitive_type -> KEYWORD_ARRAY','primitive_type',1,'p_primitive_type','parser.py',457),
  ('array_type -> primitive_type LBRACKET RBRACKET','array_type',3,'p_array_type','parser.py',462),
  ('assignment_statement -> left_hand_side ASSIGN expression SEMICOLON','assignment_statement',4,'p_assignment_statement','parser.py',466),
  ('left_hand_side -> IDENTIFIER','left_hand_side',1,'p_left_hand_side','parser.py',470),
  ('left_hand_side -> subscript_access','left_hand_side',1,'p_left_hand_side','parser.py',471),
  ('assignment_statement_no_semi -> left_hand_side ASSIGN expression','assignment_statement_no_semi',3,'p_assignment_statement_no_semi','parser.py',478),
  ('if_statement -> KEYWORD_IF LPAREN expression RPAREN statement','if_statement',5,'p_if_statement','parser.py',482),
  ('if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement','if_statement',7,'p_if_statement','parser.py',483),
  ('while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement','while_statement',5,'p_while_statement','parser.py',490),
  ('for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement','for_statement',8,'p_for_statement','parser.py',494),
  ('for_init -> assignment_statement_no_semi SEMICOLON','for_init',2,'p_for_init','parser.py',498),
  ('for_init -> declaration_statement','for_init',1,'p_for_init','parser.py',499),
  ('for_init -> SEMICOLON','for_init',1,'p_for_init','parser.py',500),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',509),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_expression_statement','parser.py',510),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','parser.py',517),
  ('expression_opt -> assignment_statement_no_semi','expression_opt',1,'p_expression_opt','parser.py',518),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parser.py',519),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',523),
  ('return_statement -> KEYWORD_RETURN SEMICOLON','return_statement',2,'p_return_statement','parser.py',527),
  ('return_statement -> KEYWORD_RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',528),
  ('function_call_statement -> function_call SEMICOLON','function_call_statement',2,'p_function_call_statement','parser.py',535),
  ('function_call -> IDENTIFIER LPAREN argument_list RPAREN','function_call',4,'p_function_call','parser.py',539),
  ('function_call -> IDENTIFIER LPAREN RPAREN','function_call',3,'p_function_call','parser.py',540),
  ('function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN','function_call',6,'p_function_call','parser.py',541),
  ('function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN','function_call',6,'p_function_call','parser.py',542),
  ('function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN','function_call',8,'p_function_call','parser.py',543),
  ('function_call -> KEYWORD_EXIT LPAREN RPAREN','function_call',3,'p_function_call','parser.py',544),
  ('function_call -> SYSTEM_ARR_PUSH LPAREN expression COMMA expression RPAREN','function_call',6,'p_function_call','parser.py',545),
  ('function_call -> SYSTEM_ARR_POP LPAREN expression RPAREN','function_call',4,'p_function_call','parser.py',546),
  ('function_call -> SYSTEM_ARR_SIZE LPAREN expression RPAREN','function_call',4,'p_function_call','parser.py',547),
  ('function_call -> SYSTEM_ARR_CONTAINS LPAREN expression COMMA expression RPAREN','function_call',6,'p_function_call','parser.py',548),
  ('function_call -> SYSTEM_ARR_INDEXOF LPAREN expression COMMA expression RPAREN','function_call',6,'p_function_call','parser.py',549),
  ('function_call -> SYSTEM_ARR_AVG LPAREN expression RPAREN','function_call',4,'p_function_call','parser.py',550),
  ('function_call -> SYSTEM_ARR_AVG LPAREN expression COMMA expression RPAREN','function_call',6,'p_function_call','parser.py',551),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',580),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','parser.py',581),
  ('block_statement -> LBRACE RBRACE','block_statement',2,'p_block_statement','parser.py',588),
  ('block_statement -> LBRACE statement_list RBRACE','block_statement',3,'p_block_statement','parser.py',589),
  ('initializer_list -> LBRACKET expression_list_opt RBRACKET','initializer_list',3,'p_initializer_list','parser.py',596),
  ('expression_list_opt -> expression_list','expression_list_opt',1,'p_expression_list_opt','parser.py',600),
  ('expression_list_opt -> empty','expression_list_opt',1,'p_expression_list_opt','parser.py',601),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',608),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',609),
  ('expression -> logical_expression','expression',1,'p_expression','parser.py',616),
  ('expression -> initializer_list','expression',1,'p_expression','parser.py',617),
  ('logical_expression -> equality_expression','logical_expression',1,'p_logical_expression','parser.py',621),
  ('logical_expression -> logical_expression AND equality_expression','logical_expression',3,'p_logical_expression','parser.py',622),
  ('logical_expression -> logical_expression OR equality_expression','logical_expression',3,'p_logical_expression','parser.py',623),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','parser.py',630),
  ('equality_expression -> equality_expression EQ relational_expression','equality_expression',3,'p_equality_expression','parser.py',631),
  ('equality_expression -> equality_expression NEQ relational_expression','equality_expression',3,'p_equality_expression','parser.py',632),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression','parser.py',639),
  ('relational_expression -> relational_expression GT additive_expression','relational_expression',3,'p_relational_expression','parser.py',640),
  ('relational_expression -> relational_expression LT additive_expression','relational_expression',3,'p_relational_expression','parser.py',641),
  ('relational_expression -> relational_expression GEQ additive_expression','relational_expression',3,'p_relational_expression','parser.py',642),
  ('relational_expression -> relational_expression LEQ additive_expression','relational_expression',3,'p_relational_expression','parser.py',643),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','parser.py',650),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',651),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',652),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','parser.py',659),
  ('multiplicative_expression -> multiplicative_expression MUL unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',660),
  ('multiplicative_expression -> multiplicative_expression DIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',661),
  ('multiplicative_expression -> multiplicative_expression MOD unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',662),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','parser.py',669),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','parser.py',670),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','parser.py',677),
  ('primary_expression -> INT_LITERAL','primary_expression',1,'p_primary_expression','parser.py',678),
  ('primary_expression -> FLOAT_LITERAL','primary_expression',1,'p_primary_expression','parser.py',679),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','parser.py',680),
  ('primary_expression -> CHAR_LITERAL','primary_expression',1,'p_primary_expression','parser.py',681),
  ('primary_expression -> KEYWORD_TRUE','primary_expression',1,'p_primary_expression','parser.py',682),
  ('primary_expression -> KEYWORD_FALSE','primary_expression',1,'p_primary_expression','parser.py',683),
  ('primary_expression -> KEYWORD_NULL','primary_expression',1,'p_primary_expression','parser.py',684),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','parser.py',685),
  ('primary_expression -> function_call','primary_expression',1,'p_primary_expression','parser.py',686),
  ('primary_expression -> subscript_access','primary_expression',1,'p_primary_expression','parser.py',687),
  ('primary_expression -> dictionary_literal','primary_expression',1,'p_primary_expression','parser.py',688),
  ('dictionary_literal -> LBRACE key_value_list_opt RBRACE','dictionary_literal',3,'p_dictionary_literal','parser.py',702),
  ('key_value_list_opt -> key_value_list','key_value_list_opt',1,'p_key_value_list_opt','parser.py',706),
  ('key_value_list_opt -> empty','key_value_list_opt',1,'p_key_value_list_opt','parser.py',707),
  ('key_value_list -> key_value','key_value_list',1,'p_key_value_list','parser.py',714),
  ('key_value_list -> key_value_list COMMA key_value','key_value_list',3,'p_key_value_list','parser.py',715),
  ('key_value -> expression COLON expression','key_value',3,'p_key_value','parser.py',722),
  ('subscript_access -> IDENTIFIER LBRACKET expression RBRACKET','subscript_access',4,'p_subscript_access','parser.py',726),
]
