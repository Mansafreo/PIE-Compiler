
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEQleftGTLTGEQLEQleftPLUSMINUSleftMULDIVMODrightUMINUSnonassocLOWER_THAN_ELSEnonassocKEYWORD_ELSEAND ASSIGN CHAR_LITERAL COLON COMMA COMMENT DIV DOT EQ FLOAT_LITERAL GEQ GT IDENTIFIER INT_LITERAL KEYWORD_BOOL KEYWORD_BREAK KEYWORD_CASE KEYWORD_CHAR KEYWORD_CONTINUE KEYWORD_DEFAULT KEYWORD_DICT KEYWORD_DO KEYWORD_ELSE KEYWORD_EXIT KEYWORD_FALSE KEYWORD_FILE KEYWORD_FLOAT KEYWORD_FOR KEYWORD_IF KEYWORD_INT KEYWORD_NULL KEYWORD_RETURN KEYWORD_SOCKET KEYWORD_STRING KEYWORD_SWITCH KEYWORD_TRUE KEYWORD_VOID KEYWORD_WHILE LBRACE LBRACKET LEQ LPAREN LT MINUS MOD MUL NEQ OR PLUS RBRACE RBRACKET RPAREN SEMICOLON STRING_LITERAL SYSTEM_EXIT SYSTEM_INPUT SYSTEM_OUTPUTprogram : statement_listfunction_definition : type_specifier IDENTIFIER LPAREN params RPAREN block_statementparams : param_list\n                  | emptyparam_list : param\n                      | param_list COMMA paramparam : type_specifier IDENTIFIERstatement_list : statement\n                         | statement_list statementstatement : declaration_statement\n                    | assignment_statement\n                    | if_statement\n                    | while_statement\n                    | do_while_statement\n                    | for_statement\n                    | switch_statement\n                    | break_statement\n                    | return_statement\n                    | function_call_statement\n                    | block_statement\n                    | function_definitiondo_while_statement : KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLONswitch_statement : KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACEcase_list : case_clause\n                     | case_list case_clausecase_clause : KEYWORD_CASE expression COLON statement_list\n                       | KEYWORD_DEFAULT COLON statement_listbreak_statement : KEYWORD_BREAK SEMICOLONdeclaration_statement : type_specifier IDENTIFIER SEMICOLON\n                                | type_specifier IDENTIFIER ASSIGN expression SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLONtype_specifier : primitive_type\n                         | array_typeprimitive_type : KEYWORD_INT\n                          | KEYWORD_FLOAT\n                          | KEYWORD_CHAR\n                          | KEYWORD_VOID\n                          | KEYWORD_STRING\n                          | KEYWORD_BOOL\n                          | KEYWORD_FILE\n                          | KEYWORD_SOCKET\n                          | KEYWORD_DICTarray_type : primitive_type LBRACKET RBRACKETassignment_statement : left_hand_side ASSIGN expression SEMICOLONleft_hand_side : IDENTIFIER\n                         | subscript_accessassignment_statement_no_semi : left_hand_side ASSIGN expressionif_statement : KEYWORD_IF LPAREN expression RPAREN statement %prec LOWER_THAN_ELSE\n                        | KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statementwhile_statement : KEYWORD_WHILE LPAREN expression RPAREN statementfor_statement : KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statementfor_init : assignment_statement_no_semi SEMICOLON\n                    | declaration_statement\n                    | SEMICOLONexpression_statement : expression SEMICOLON\n                               | SEMICOLONexpression_opt : expression\n                         | assignment_statement_no_semi\n                         | emptyempty :return_statement : KEYWORD_RETURN SEMICOLON\n                           | KEYWORD_RETURN expression SEMICOLONfunction_call_statement : function_call SEMICOLONfunction_call : IDENTIFIER LPAREN argument_list RPAREN\n                        | IDENTIFIER LPAREN RPAREN\n                        | SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN\n                        | SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN\n                        | SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN\n                        | KEYWORD_EXIT LPAREN RPARENargument_list : expression\n                        | argument_list COMMA expressionblock_statement : LBRACE RBRACE\n                          | LBRACE statement_list RBRACEinitializer_list : LBRACKET expression_list_opt RBRACKETexpression_list_opt : expression_list\n                               | emptyexpression_list : expression\n                           | expression_list COMMA expressionexpression : logical_expressionlogical_expression : equality_expression\n                             | logical_expression AND equality_expression\n                             | logical_expression OR equality_expressionequality_expression : relational_expression\n                               | equality_expression EQ relational_expression\n                               | equality_expression NEQ relational_expressionrelational_expression : additive_expression\n                                | relational_expression GT additive_expression\n                                | relational_expression LT additive_expression\n                                | relational_expression GEQ additive_expression\n                                | relational_expression LEQ additive_expressionadditive_expression : multiplicative_expression\n                              | additive_expression PLUS multiplicative_expression\n                              | additive_expression MINUS multiplicative_expressionmultiplicative_expression : unary_expression\n                                    | multiplicative_expression MUL unary_expression\n                                    | multiplicative_expression DIV unary_expression\n                                    | multiplicative_expression MOD unary_expressionunary_expression : primary_expression\n                           | MINUS unary_expression %prec UMINUSprimary_expression : IDENTIFIER\n                             | INT_LITERAL\n                             | FLOAT_LITERAL\n                             | STRING_LITERAL\n                             | CHAR_LITERAL\n                             | KEYWORD_TRUE\n                             | KEYWORD_FALSE\n                             | KEYWORD_NULL\n                             | LPAREN expression RPAREN\n                             | function_call\n                             | subscript_access\n                             | dictionary_literaldictionary_literal : LBRACE key_value_list_opt RBRACEkey_value_list_opt : key_value_list\n                              | emptykey_value_list : key_value\n                          | key_value_list COMMA key_valuekey_value : expression COLON expressionsubscript_access : IDENTIFIER LBRACKET expression RBRACKET'

_lr_action_items = {'KEYWORD_IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,53,54,55,56,79,84,104,105,141,142,143,174,177,182,183,192,197,199,214,215,216,217,218,219,222,224,227,228,229,232,],[19,19,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,19,19,-9,-76,19,-28,-65,-67,-29,-77,-66,-48,19,19,-30,-35,-52,-54,-31,-2,19,-32,-33,-53,-22,19,-23,19,-34,-55,19,19,19,]),'KEYWORD_WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,50,53,54,55,56,79,84,104,105,141,142,143,174,177,182,183,192,197,199,214,215,216,217,218,219,222,224,227,228,229,232,],[20,20,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,20,20,-9,95,-76,20,-28,-65,-67,-29,-77,-66,-48,20,20,-30,-35,-52,-54,-31,-2,20,-32,-33,-53,-22,20,-23,20,-34,-55,20,20,20,]),'KEYWORD_DO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,53,54,55,56,79,84,104,105,141,142,143,174,177,182,183,192,197,199,214,215,216,217,218,219,222,224,227,228,229,232,],[21,21,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,21,21,-9,-76,21,-28,-65,-67,-29,-77,-66,-48,21,21,-30,-35,-52,-54,-31,-2,21,-32,-33,-53,-22,21,-23,21,-34,-55,21,21,21,]),'KEYWORD_FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,53,54,55,56,79,84,104,105,141,142,143,174,177,182,183,192,197,199,214,215,216,217,218,219,222,224,227,228,229,232,],[22,22,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,22,22,-9,-76,22,-28,-65,-67,-29,-77,-66,-48,22,22,-30,-35,-52,-54,-31,-2,22,-32,-33,-53,-22,22,-23,22,-34,-55,22,22,22,]),'KEYWORD_SWITCH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,53,54,55,56,79,84,104,105,141,142,143,174,177,182,183,192,197,199,214,215,216,217,218,219,222,224,227,228,229,232,],[23,23,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,23,23,-9,-76,23,-28,-65,-67,-29,-77,-66,-48,23,23,-30,-35,-52,-54,-31,-2,23,-32,-33,-53,-22,23,-23,23,-34,-55,23,23,23,]),'KEYWORD_BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,53,54,55,56,79,84,104,105,141,142,143,174,177,182,183,192,197,199,214,215,216,217,218,219,222,224,227,228,229,232,],[25,25,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,25,25,-9,-76,25,-28,-65,-67,-29,-77,-66,-48,25,25,-30,-35,-52,-54,-31,-2,25,-32,-33,-53,-22,25,-23,25,-34,-55,25,25,25,]),'KEYWORD_RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,53,54,55,56,79,84,104,105,141,142,143,174,177,182,183,192,197,199,214,215,216,217,218,219,222,224,227,228,229,232,],[26,26,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,26,26,-9,-76,26,-28,-65,-67,-29,-77,-66,-48,26,26,-30,-35,-52,-54,-31,-2,26,-32,-33,-53,-22,26,-23,26,-34,-55,26,26,26,]),'LBRACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,43,45,46,47,48,49,52,53,54,55,56,63,74,78,79,82,84,85,86,96,97,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,139,141,142,143,144,151,152,154,170,171,174,176,177,179,182,183,185,192,194,197,199,204,207,214,215,216,217,218,219,222,224,226,227,228,229,232,],[24,24,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,24,24,78,-9,78,78,78,78,78,78,-76,24,-28,-65,78,78,78,-67,78,-29,78,78,78,-58,-57,-77,-66,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-48,24,24,78,-56,78,187,78,78,-30,78,-35,24,-52,-54,78,-31,78,-2,24,78,78,-32,-33,-53,-22,24,-23,24,-34,78,-55,24,24,24,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,24,26,28,29,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,51,52,53,54,55,56,63,74,78,79,81,82,84,85,86,96,97,99,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,126,133,139,141,142,143,144,151,152,170,171,174,176,177,182,183,185,192,194,197,199,204,207,214,215,216,217,218,219,222,224,226,227,228,229,232,],[17,17,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,44,17,17,66,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-9,66,66,66,66,66,102,66,-76,17,-28,-65,66,66,66,-67,127,66,-29,66,66,149,-58,-57,153,-77,-66,66,66,66,66,66,66,66,66,66,66,66,66,66,-47,178,66,-48,17,17,66,-56,66,66,66,-30,66,-35,-52,-54,149,-31,66,-2,17,66,66,-32,-33,-53,-22,17,-23,17,-34,66,-55,17,17,17,]),'SYSTEM_INPUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,43,45,46,47,48,49,52,53,54,55,56,63,74,78,79,82,84,85,86,96,97,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,139,141,142,143,144,151,152,170,171,174,176,177,182,183,185,192,194,197,199,204,207,214,215,216,217,218,219,222,224,226,227,228,229,232,],[31,31,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,31,31,31,-9,31,31,31,31,31,31,-76,31,-28,-65,31,31,31,-67,31,-29,31,31,31,-58,-57,-77,-66,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-48,31,31,31,-56,31,31,31,-30,31,-35,-52,-54,31,-31,31,-2,31,31,31,-32,-33,-53,-22,31,-23,31,-34,31,-55,31,31,31,]),'SYSTEM_OUTPUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,43,45,46,47,48,49,52,53,54,55,56,63,74,78,79,82,84,85,86,96,97,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,139,141,142,143,144,151,152,170,171,174,176,177,182,183,185,192,194,197,199,204,207,214,215,216,217,218,219,222,224,226,227,228,229,232,],[32,32,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,32,32,32,-9,32,32,32,32,32,32,-76,32,-28,-65,32,32,32,-67,32,-29,32,32,32,-58,-57,-77,-66,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-48,32,32,32,-56,32,32,32,-30,32,-35,-52,-54,32,-31,32,-2,32,32,32,-32,-33,-53,-22,32,-23,32,-34,32,-55,32,32,32,]),'KEYWORD_EXIT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,43,45,46,47,48,49,52,53,54,55,56,63,74,78,79,82,84,85,86,96,97,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,139,141,142,143,144,151,152,170,171,174,176,177,182,183,185,192,194,197,199,204,207,214,215,216,217,218,219,222,224,226,227,228,229,232,],[33,33,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,33,33,33,-9,33,33,33,33,33,33,-76,33,-28,-65,33,33,33,-67,33,-29,33,33,33,-58,-57,-77,-66,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-48,33,33,33,-56,33,33,33,-30,33,-35,-52,-54,33,-31,33,-2,33,33,33,-32,-33,-53,-22,33,-23,33,-34,33,-55,33,33,33,]),'KEYWORD_INT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,51,53,54,55,56,79,84,87,104,105,141,142,143,172,173,174,177,180,182,183,192,197,199,214,215,216,217,218,219,222,224,227,228,229,232,],[34,34,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,34,34,-9,34,-76,34,-28,-65,-67,-29,34,-77,-66,-48,34,34,34,34,-30,-35,34,-52,-54,-31,-2,34,-32,-33,-53,-22,34,-23,34,-34,-55,34,34,34,]),'KEYWORD_FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,51,53,54,55,56,79,84,87,104,105,141,142,143,172,173,174,177,180,182,183,192,197,199,214,215,216,217,218,219,222,224,227,228,229,232,],[35,35,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,35,35,-9,35,-76,35,-28,-65,-67,-29,35,-77,-66,-48,35,35,35,35,-30,-35,35,-52,-54,-31,-2,35,-32,-33,-53,-22,35,-23,35,-34,-55,35,35,35,]),'KEYWORD_CHAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,51,53,54,55,56,79,84,87,104,105,141,142,143,172,173,174,177,180,182,183,192,197,199,214,215,216,217,218,219,222,224,227,228,229,232,],[36,36,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,36,36,-9,36,-76,36,-28,-65,-67,-29,36,-77,-66,-48,36,36,36,36,-30,-35,36,-52,-54,-31,-2,36,-32,-33,-53,-22,36,-23,36,-34,-55,36,36,36,]),'KEYWORD_VOID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,51,53,54,55,56,79,84,87,104,105,141,142,143,172,173,174,177,180,182,183,192,197,199,214,215,216,217,218,219,222,224,227,228,229,232,],[37,37,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,37,37,-9,37,-76,37,-28,-65,-67,-29,37,-77,-66,-48,37,37,37,37,-30,-35,37,-52,-54,-31,-2,37,-32,-33,-53,-22,37,-23,37,-34,-55,37,37,37,]),'KEYWORD_STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,51,53,54,55,56,79,84,87,104,105,141,142,143,172,173,174,177,180,182,183,192,197,199,214,215,216,217,218,219,222,224,227,228,229,232,],[38,38,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,38,38,-9,38,-76,38,-28,-65,-67,-29,38,-77,-66,-48,38,38,38,38,-30,-35,38,-52,-54,-31,-2,38,-32,-33,-53,-22,38,-23,38,-34,-55,38,38,38,]),'KEYWORD_BOOL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,51,53,54,55,56,79,84,87,104,105,141,142,143,172,173,174,177,180,182,183,192,197,199,214,215,216,217,218,219,222,224,227,228,229,232,],[39,39,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,39,39,-9,39,-76,39,-28,-65,-67,-29,39,-77,-66,-48,39,39,39,39,-30,-35,39,-52,-54,-31,-2,39,-32,-33,-53,-22,39,-23,39,-34,-55,39,39,39,]),'KEYWORD_FILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,51,53,54,55,56,79,84,87,104,105,141,142,143,172,173,174,177,180,182,183,192,197,199,214,215,216,217,218,219,222,224,227,228,229,232,],[40,40,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,40,40,-9,40,-76,40,-28,-65,-67,-29,40,-77,-66,-48,40,40,40,40,-30,-35,40,-52,-54,-31,-2,40,-32,-33,-53,-22,40,-23,40,-34,-55,40,40,40,]),'KEYWORD_SOCKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,51,53,54,55,56,79,84,87,104,105,141,142,143,172,173,174,177,180,182,183,192,197,199,214,215,216,217,218,219,222,224,227,228,229,232,],[41,41,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,41,41,-9,41,-76,41,-28,-65,-67,-29,41,-77,-66,-48,41,41,41,41,-30,-35,41,-52,-54,-31,-2,41,-32,-33,-53,-22,41,-23,41,-34,-55,41,41,41,]),'KEYWORD_DICT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,43,51,53,54,55,56,79,84,87,104,105,141,142,143,172,173,174,177,180,182,183,192,197,199,214,215,216,217,218,219,222,224,227,228,229,232,],[42,42,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,42,42,-9,42,-76,42,-28,-65,-67,-29,42,-77,-66,-48,42,42,42,42,-30,-35,42,-52,-54,-31,-2,42,-32,-33,-53,-22,42,-23,42,-34,-55,42,42,42,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,43,53,55,56,79,84,104,105,141,174,177,182,183,192,197,214,215,216,217,219,224,227,],[0,-1,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-9,-76,-28,-65,-67,-29,-77,-66,-48,-30,-35,-52,-54,-31,-2,-32,-33,-53,-22,-23,-34,-55,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,24,43,53,54,55,56,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,84,89,104,105,119,121,122,123,124,129,138,140,141,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,174,177,182,183,188,189,192,197,202,203,206,208,214,215,216,217,219,220,224,227,229,230,232,],[-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,53,-9,-76,104,-28,-65,-83,-84,-87,-90,-95,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,-113,-114,-115,-64,-67,-29,-69,-77,-66,-103,169,-117,-118,-119,-73,-68,-122,-48,-85,-86,-88,-89,-91,-92,-93,-94,-96,-97,-99,-100,-101,-112,-116,-30,-35,-52,-54,-120,-121,-31,-2,219,-24,-70,-71,-32,-33,-53,-22,-23,-25,-34,-55,-27,-72,-26,]),'KEYWORD_CASE':([3,4,5,6,7,8,9,10,11,12,13,14,15,43,53,55,56,79,84,104,105,141,174,177,182,183,187,192,197,202,203,214,215,216,217,219,220,224,227,229,232,],[-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-9,-76,-28,-65,-67,-29,-77,-66,-48,-30,-35,-52,-54,204,-31,-2,204,-24,-32,-33,-53,-22,-23,-25,-34,-55,-27,-26,]),'KEYWORD_DEFAULT':([3,4,5,6,7,8,9,10,11,12,13,14,15,43,53,55,56,79,84,104,105,141,174,177,182,183,187,192,197,202,203,214,215,216,217,219,220,224,227,229,232,],[-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-9,-76,-28,-65,-67,-29,-77,-66,-48,-30,-35,-52,-54,205,-31,-2,205,-24,-32,-33,-53,-22,-23,-25,-34,-55,-27,-26,]),'KEYWORD_ELSE':([4,5,6,7,8,9,10,11,12,13,14,15,53,55,56,79,84,104,105,141,174,177,182,183,192,197,214,215,216,217,219,224,227,],[-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-76,-28,-65,-67,-29,-77,-66,-48,-30,-35,199,-54,-31,-2,-32,-33,-53,-22,-23,-34,-55,]),'ASSIGN':([17,18,30,44,100,102,132,140,149,150,153,175,],[-49,47,-50,85,152,-49,176,-122,-49,-50,85,193,]),'LPAREN':([17,19,20,22,23,26,31,32,33,44,45,46,47,48,49,52,63,66,74,78,82,84,85,86,95,96,97,99,106,107,108,109,110,111,112,113,114,115,116,117,118,139,144,149,151,152,170,171,174,176,177,185,192,194,204,207,214,215,224,226,],[45,48,49,51,52,74,81,82,83,87,74,74,74,74,74,74,74,45,74,74,74,-29,74,74,144,74,-58,-57,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,45,-56,74,74,74,-30,74,-35,74,-31,74,74,74,-32,-33,-34,74,]),'LBRACKET':([17,28,34,35,36,37,38,39,40,41,42,44,66,102,149,153,176,193,],[46,80,-38,-39,-40,-41,-42,-43,-44,-45,-46,86,46,46,46,86,194,194,]),'SEMICOLON':([25,26,27,44,51,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,75,76,77,84,89,92,96,97,98,99,119,129,130,132,138,140,145,146,147,148,149,150,151,153,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,174,175,177,186,192,195,196,200,206,208,209,214,215,224,225,230,],[55,56,79,84,97,105,-83,-84,-87,-90,-95,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,-113,-114,-115,-29,-69,141,-64,-58,151,-57,-103,-73,174,177,-68,-122,185,-61,-62,-63,-104,-114,-56,84,-85,-86,-88,-89,-91,-92,-93,-94,-96,-97,-99,-100,-101,-112,-116,-30,192,-35,-51,-31,214,215,217,-70,-71,224,-32,-33,-34,-78,-72,]),'MINUS':([26,45,46,47,48,49,52,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,82,84,85,86,89,96,97,99,106,107,108,109,110,111,112,113,114,115,116,117,118,119,129,138,139,140,144,149,150,151,152,159,160,161,162,163,164,165,166,167,168,169,170,171,174,176,177,185,192,194,204,206,207,208,214,215,224,226,230,],[63,63,63,63,63,63,63,115,-95,63,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,63,-113,-114,-115,63,63,-29,63,63,-69,63,-58,-57,63,63,63,63,63,63,63,63,63,63,63,63,63,-103,-73,-68,63,-122,63,-104,-114,-56,63,115,115,115,115,-96,-97,-99,-100,-101,-112,-116,63,63,-30,63,-35,63,-31,63,63,-70,63,-71,-32,-33,-34,63,-72,]),'INT_LITERAL':([26,45,46,47,48,49,52,63,74,78,82,84,85,86,96,97,99,106,107,108,109,110,111,112,113,114,115,116,117,118,139,144,151,152,170,171,174,176,177,185,192,194,204,207,214,215,224,226,],[67,67,67,67,67,67,67,67,67,67,67,-29,67,67,67,-58,-57,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-56,67,67,67,-30,67,-35,67,-31,67,67,67,-32,-33,-34,67,]),'FLOAT_LITERAL':([26,45,46,47,48,49,52,63,74,78,82,84,85,86,96,97,99,106,107,108,109,110,111,112,113,114,115,116,117,118,139,144,151,152,170,171,174,176,177,185,192,194,204,207,214,215,224,226,],[68,68,68,68,68,68,68,68,68,68,68,-29,68,68,68,-58,-57,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-56,68,68,68,-30,68,-35,68,-31,68,68,68,-32,-33,-34,68,]),'STRING_LITERAL':([26,45,46,47,48,49,52,63,74,78,82,84,85,86,96,97,99,106,107,108,109,110,111,112,113,114,115,116,117,118,139,144,151,152,170,171,174,176,177,185,192,194,204,207,214,215,224,226,],[69,69,69,69,69,69,69,69,69,69,69,-29,69,69,69,-58,-57,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-56,69,69,69,-30,69,-35,69,-31,69,69,69,-32,-33,-34,69,]),'CHAR_LITERAL':([26,45,46,47,48,49,52,63,74,78,82,84,85,86,96,97,99,106,107,108,109,110,111,112,113,114,115,116,117,118,139,144,151,152,170,171,174,176,177,185,192,194,204,207,214,215,224,226,],[70,70,70,70,70,70,70,70,70,70,70,-29,70,70,70,-58,-57,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-56,70,70,70,-30,70,-35,70,-31,70,70,70,-32,-33,-34,70,]),'KEYWORD_TRUE':([26,45,46,47,48,49,52,63,74,78,82,84,85,86,96,97,99,106,107,108,109,110,111,112,113,114,115,116,117,118,139,144,151,152,170,171,174,176,177,185,192,194,204,207,214,215,224,226,],[71,71,71,71,71,71,71,71,71,71,71,-29,71,71,71,-58,-57,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-56,71,71,71,-30,71,-35,71,-31,71,71,71,-32,-33,-34,71,]),'KEYWORD_FALSE':([26,45,46,47,48,49,52,63,74,78,82,84,85,86,96,97,99,106,107,108,109,110,111,112,113,114,115,116,117,118,139,144,151,152,170,171,174,176,177,185,192,194,204,207,214,215,224,226,],[72,72,72,72,72,72,72,72,72,72,72,-29,72,72,72,-58,-57,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-56,72,72,72,-30,72,-35,72,-31,72,72,72,-32,-33,-34,72,]),'KEYWORD_NULL':([26,45,46,47,48,49,52,63,74,78,82,84,85,86,96,97,99,106,107,108,109,110,111,112,113,114,115,116,117,118,139,144,151,152,170,171,174,176,177,185,192,194,204,207,214,215,224,226,],[73,73,73,73,73,73,73,73,73,73,73,-29,73,73,73,-58,-57,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-56,73,73,73,-30,73,-35,73,-31,73,73,73,-32,-33,-34,73,]),'RPAREN':([28,29,34,35,36,37,38,39,40,41,42,45,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,75,76,77,83,87,88,89,90,93,94,103,119,120,126,129,134,135,136,137,138,140,146,147,148,149,150,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,178,181,184,185,186,190,191,198,201,206,208,223,230,],[-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,89,-83,-84,-87,-90,-95,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,-113,-114,-115,129,-64,138,-69,-74,142,143,154,-103,168,-47,-73,179,-3,-4,-5,-68,-122,-61,-62,-63,-104,-114,-85,-86,-88,-89,-91,-92,-93,-94,-96,-97,-99,-100,-101,-112,-116,-7,-75,200,-64,-51,206,208,-6,218,-70,-71,230,-72,]),'COMMA':([28,29,34,35,36,37,38,39,40,41,42,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,75,76,77,88,89,90,119,122,124,126,127,128,129,135,137,138,140,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,178,181,188,189,191,198,206,208,211,213,230,231,],[-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-83,-84,-87,-90,-95,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,-113,-114,-115,139,-69,-74,-103,170,-119,-47,172,173,-73,180,-5,-68,-122,-85,-86,-88,-89,-91,-92,-93,-94,-96,-97,-99,-100,-101,-112,-116,-7,-75,-120,-121,207,-6,-70,-71,226,-81,-72,-82,]),'RBRACKET':([58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,75,76,77,80,86,89,91,119,129,131,138,140,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,194,206,208,210,211,212,213,230,231,],[-83,-84,-87,-90,-95,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,-113,-114,-115,126,132,-69,140,-103,-73,175,-68,-122,-85,-86,-88,-89,-91,-92,-93,-94,-96,-97,-99,-100,-101,-112,-116,-64,-70,-71,225,-79,-80,-81,-72,-82,]),'COLON':([58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,75,76,77,89,119,125,129,138,140,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,205,206,208,221,230,],[-83,-84,-87,-90,-95,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,-113,-114,-115,-69,-103,171,-73,-68,-122,-85,-86,-88,-89,-91,-92,-93,-94,-96,-97,-99,-100,-101,-112,-116,222,-70,-71,228,-72,]),'AND':([58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,75,76,77,89,119,129,138,140,149,150,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,206,208,230,],[106,-84,-87,-90,-95,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,-113,-114,-115,-69,-103,-73,-68,-122,-104,-114,-85,-86,-88,-89,-91,-92,-93,-94,-96,-97,-99,-100,-101,-112,-116,-70,-71,-72,]),'OR':([58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,75,76,77,89,119,129,138,140,149,150,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,206,208,230,],[107,-84,-87,-90,-95,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,-113,-114,-115,-69,-103,-73,-68,-122,-104,-114,-85,-86,-88,-89,-91,-92,-93,-94,-96,-97,-99,-100,-101,-112,-116,-70,-71,-72,]),'EQ':([59,60,61,62,64,65,66,67,68,69,70,71,72,73,75,76,77,89,119,129,138,140,149,150,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,206,208,230,],[108,-87,-90,-95,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,-113,-114,-115,-69,-103,-73,-68,-122,-104,-114,108,108,-88,-89,-91,-92,-93,-94,-96,-97,-99,-100,-101,-112,-116,-70,-71,-72,]),'NEQ':([59,60,61,62,64,65,66,67,68,69,70,71,72,73,75,76,77,89,119,129,138,140,149,150,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,206,208,230,],[109,-87,-90,-95,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,-113,-114,-115,-69,-103,-73,-68,-122,-104,-114,109,109,-88,-89,-91,-92,-93,-94,-96,-97,-99,-100,-101,-112,-116,-70,-71,-72,]),'GT':([60,61,62,64,65,66,67,68,69,70,71,72,73,75,76,77,89,119,129,138,140,149,150,157,158,159,160,161,162,163,164,165,166,167,168,169,206,208,230,],[110,-90,-95,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,-113,-114,-115,-69,-103,-73,-68,-122,-104,-114,110,110,-91,-92,-93,-94,-96,-97,-99,-100,-101,-112,-116,-70,-71,-72,]),'LT':([60,61,62,64,65,66,67,68,69,70,71,72,73,75,76,77,89,119,129,138,140,149,150,157,158,159,160,161,162,163,164,165,166,167,168,169,206,208,230,],[111,-90,-95,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,-113,-114,-115,-69,-103,-73,-68,-122,-104,-114,111,111,-91,-92,-93,-94,-96,-97,-99,-100,-101,-112,-116,-70,-71,-72,]),'GEQ':([60,61,62,64,65,66,67,68,69,70,71,72,73,75,76,77,89,119,129,138,140,149,150,157,158,159,160,161,162,163,164,165,166,167,168,169,206,208,230,],[112,-90,-95,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,-113,-114,-115,-69,-103,-73,-68,-122,-104,-114,112,112,-91,-92,-93,-94,-96,-97,-99,-100,-101,-112,-116,-70,-71,-72,]),'LEQ':([60,61,62,64,65,66,67,68,69,70,71,72,73,75,76,77,89,119,129,138,140,149,150,157,158,159,160,161,162,163,164,165,166,167,168,169,206,208,230,],[113,-90,-95,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,-113,-114,-115,-69,-103,-73,-68,-122,-104,-114,113,113,-91,-92,-93,-94,-96,-97,-99,-100,-101,-112,-116,-70,-71,-72,]),'PLUS':([61,62,64,65,66,67,68,69,70,71,72,73,75,76,77,89,119,129,138,140,149,150,159,160,161,162,163,164,165,166,167,168,169,206,208,230,],[114,-95,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,-113,-114,-115,-69,-103,-73,-68,-122,-104,-114,114,114,114,114,-96,-97,-99,-100,-101,-112,-116,-70,-71,-72,]),'MUL':([62,64,65,66,67,68,69,70,71,72,73,75,76,77,89,119,129,138,140,149,150,163,164,165,166,167,168,169,206,208,230,],[116,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,-113,-114,-115,-69,-103,-73,-68,-122,-104,-114,116,116,-99,-100,-101,-112,-116,-70,-71,-72,]),'DIV':([62,64,65,66,67,68,69,70,71,72,73,75,76,77,89,119,129,138,140,149,150,163,164,165,166,167,168,169,206,208,230,],[117,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,-113,-114,-115,-69,-103,-73,-68,-122,-104,-114,117,117,-99,-100,-101,-112,-116,-70,-71,-72,]),'MOD':([62,64,65,66,67,68,69,70,71,72,73,75,76,77,89,119,129,138,140,149,150,163,164,165,166,167,168,169,206,208,230,],[118,-98,-102,-104,-105,-106,-107,-108,-109,-110,-111,-113,-114,-115,-69,-103,-73,-68,-122,-104,-114,118,118,-99,-100,-101,-112,-116,-70,-71,-72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,24,222,228,],[2,54,229,232,]),'statement':([0,2,21,24,54,142,143,199,218,222,228,229,232,],[3,43,50,3,43,182,183,216,227,3,3,43,43,]),'declaration_statement':([0,2,21,24,51,54,142,143,199,218,222,228,229,232,],[4,4,4,4,99,4,4,4,4,4,4,4,4,4,]),'assignment_statement':([0,2,21,24,54,142,143,199,218,222,228,229,232,],[5,5,5,5,5,5,5,5,5,5,5,5,5,]),'if_statement':([0,2,21,24,54,142,143,199,218,222,228,229,232,],[6,6,6,6,6,6,6,6,6,6,6,6,6,]),'while_statement':([0,2,21,24,54,142,143,199,218,222,228,229,232,],[7,7,7,7,7,7,7,7,7,7,7,7,7,]),'do_while_statement':([0,2,21,24,54,142,143,199,218,222,228,229,232,],[8,8,8,8,8,8,8,8,8,8,8,8,8,]),'for_statement':([0,2,21,24,54,142,143,199,218,222,228,229,232,],[9,9,9,9,9,9,9,9,9,9,9,9,9,]),'switch_statement':([0,2,21,24,54,142,143,199,218,222,228,229,232,],[10,10,10,10,10,10,10,10,10,10,10,10,10,]),'break_statement':([0,2,21,24,54,142,143,199,218,222,228,229,232,],[11,11,11,11,11,11,11,11,11,11,11,11,11,]),'return_statement':([0,2,21,24,54,142,143,199,218,222,228,229,232,],[12,12,12,12,12,12,12,12,12,12,12,12,12,]),'function_call_statement':([0,2,21,24,54,142,143,199,218,222,228,229,232,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'block_statement':([0,2,21,24,54,142,143,179,199,218,222,228,229,232,],[14,14,14,14,14,14,14,197,14,14,14,14,14,14,]),'function_definition':([0,2,21,24,54,142,143,199,218,222,228,229,232,],[15,15,15,15,15,15,15,15,15,15,15,15,15,]),'type_specifier':([0,2,21,24,51,54,87,142,143,172,173,180,199,218,222,228,229,232,],[16,16,16,16,101,16,133,16,16,190,191,133,16,16,16,16,16,16,]),'left_hand_side':([0,2,21,24,51,54,96,142,143,185,199,218,222,228,229,232,],[18,18,18,18,100,18,100,18,18,100,18,18,18,18,18,18,]),'function_call':([0,2,21,24,26,45,46,47,48,49,52,54,63,74,78,82,85,86,96,106,107,108,109,110,111,112,113,114,115,116,117,118,139,142,143,144,152,170,171,176,185,194,199,204,207,218,222,226,228,229,232,],[27,27,27,27,75,75,75,75,75,75,75,27,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,27,27,75,75,75,75,75,75,75,27,75,75,27,27,75,27,27,27,]),'primitive_type':([0,2,21,24,51,54,87,142,143,172,173,180,199,218,222,228,229,232,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'array_type':([0,2,21,24,51,54,87,142,143,172,173,180,199,218,222,228,229,232,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'subscript_access':([0,2,21,24,26,45,46,47,48,49,51,52,54,63,74,78,82,85,86,96,106,107,108,109,110,111,112,113,114,115,116,117,118,139,142,143,144,152,170,171,176,185,194,199,204,207,218,222,226,228,229,232,],[30,30,30,30,76,76,76,76,76,76,30,76,30,76,76,76,76,76,76,150,76,76,76,76,76,76,76,76,76,76,76,76,76,76,30,30,76,76,76,76,76,150,76,30,76,76,30,30,76,30,30,30,]),'expression':([26,45,46,47,48,49,52,74,78,82,85,86,96,139,144,152,170,171,176,185,194,204,207,226,],[57,90,91,92,93,94,103,120,125,128,130,131,146,181,184,186,125,189,196,146,213,221,223,231,]),'logical_expression':([26,45,46,47,48,49,52,74,78,82,85,86,96,139,144,152,170,171,176,185,194,204,207,226,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'equality_expression':([26,45,46,47,48,49,52,74,78,82,85,86,96,106,107,139,144,152,170,171,176,185,194,204,207,226,],[59,59,59,59,59,59,59,59,59,59,59,59,59,155,156,59,59,59,59,59,59,59,59,59,59,59,]),'relational_expression':([26,45,46,47,48,49,52,74,78,82,85,86,96,106,107,108,109,139,144,152,170,171,176,185,194,204,207,226,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,157,158,60,60,60,60,60,60,60,60,60,60,60,]),'additive_expression':([26,45,46,47,48,49,52,74,78,82,85,86,96,106,107,108,109,110,111,112,113,139,144,152,170,171,176,185,194,204,207,226,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,159,160,161,162,61,61,61,61,61,61,61,61,61,61,61,]),'multiplicative_expression':([26,45,46,47,48,49,52,74,78,82,85,86,96,106,107,108,109,110,111,112,113,114,115,139,144,152,170,171,176,185,194,204,207,226,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,163,164,62,62,62,62,62,62,62,62,62,62,62,]),'unary_expression':([26,45,46,47,48,49,52,63,74,78,82,85,86,96,106,107,108,109,110,111,112,113,114,115,116,117,118,139,144,152,170,171,176,185,194,204,207,226,],[64,64,64,64,64,64,64,119,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,165,166,167,64,64,64,64,64,64,64,64,64,64,64,]),'primary_expression':([26,45,46,47,48,49,52,63,74,78,82,85,86,96,106,107,108,109,110,111,112,113,114,115,116,117,118,139,144,152,170,171,176,185,194,204,207,226,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'dictionary_literal':([26,45,46,47,48,49,52,63,74,78,82,85,86,96,106,107,108,109,110,111,112,113,114,115,116,117,118,139,144,152,170,171,176,185,194,204,207,226,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'argument_list':([45,],[88,]),'for_init':([51,],[96,]),'assignment_statement_no_semi':([51,96,185,],[98,147,147,]),'key_value_list_opt':([78,],[121,]),'key_value_list':([78,],[122,]),'empty':([78,87,96,185,194,],[123,136,148,148,212,]),'key_value':([78,170,],[124,188,]),'params':([87,],[134,]),'param_list':([87,],[135,]),'param':([87,180,],[137,198,]),'expression_opt':([96,185,],[145,201,]),'initializer_list':([176,193,],[195,209,]),'case_list':([187,],[202,]),'case_clause':([187,202,],[203,220,]),'expression_list_opt':([194,],[210,]),'expression_list':([194,],[211,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',243),
  ('function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement','function_definition',6,'p_function_definition','parser.py',247),
  ('params -> param_list','params',1,'p_params','parser.py',255),
  ('params -> empty','params',1,'p_params','parser.py',256),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',263),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',264),
  ('param -> type_specifier IDENTIFIER','param',2,'p_param','parser.py',271),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',275),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',276),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',283),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',284),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',285),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',286),
  ('statement -> do_while_statement','statement',1,'p_statement','parser.py',287),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',288),
  ('statement -> switch_statement','statement',1,'p_statement','parser.py',289),
  ('statement -> break_statement','statement',1,'p_statement','parser.py',290),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',291),
  ('statement -> function_call_statement','statement',1,'p_statement','parser.py',292),
  ('statement -> block_statement','statement',1,'p_statement','parser.py',293),
  ('statement -> function_definition','statement',1,'p_statement','parser.py',294),
  ('do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON','do_while_statement',7,'p_do_while_statement','parser.py',298),
  ('switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE','switch_statement',7,'p_switch_statement','parser.py',302),
  ('case_list -> case_clause','case_list',1,'p_case_list','parser.py',306),
  ('case_list -> case_list case_clause','case_list',2,'p_case_list','parser.py',307),
  ('case_clause -> KEYWORD_CASE expression COLON statement_list','case_clause',4,'p_case_clause','parser.py',314),
  ('case_clause -> KEYWORD_DEFAULT COLON statement_list','case_clause',3,'p_case_clause','parser.py',315),
  ('break_statement -> KEYWORD_BREAK SEMICOLON','break_statement',2,'p_break_statement','parser.py',322),
  ('declaration_statement -> type_specifier IDENTIFIER SEMICOLON','declaration_statement',3,'p_declaration_statement','parser.py',326),
  ('declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON','declaration_statement',5,'p_declaration_statement','parser.py',327),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON','declaration_statement',6,'p_declaration_statement','parser.py',328),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON','declaration_statement',7,'p_declaration_statement','parser.py',329),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON','declaration_statement',7,'p_declaration_statement','parser.py',330),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON','declaration_statement',8,'p_declaration_statement','parser.py',331),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON','declaration_statement',5,'p_declaration_statement','parser.py',332),
  ('type_specifier -> primitive_type','type_specifier',1,'p_type_specifier','parser.py',352),
  ('type_specifier -> array_type','type_specifier',1,'p_type_specifier','parser.py',353),
  ('primitive_type -> KEYWORD_INT','primitive_type',1,'p_primitive_type','parser.py',357),
  ('primitive_type -> KEYWORD_FLOAT','primitive_type',1,'p_primitive_type','parser.py',358),
  ('primitive_type -> KEYWORD_CHAR','primitive_type',1,'p_primitive_type','parser.py',359),
  ('primitive_type -> KEYWORD_VOID','primitive_type',1,'p_primitive_type','parser.py',360),
  ('primitive_type -> KEYWORD_STRING','primitive_type',1,'p_primitive_type','parser.py',361),
  ('primitive_type -> KEYWORD_BOOL','primitive_type',1,'p_primitive_type','parser.py',362),
  ('primitive_type -> KEYWORD_FILE','primitive_type',1,'p_primitive_type','parser.py',363),
  ('primitive_type -> KEYWORD_SOCKET','primitive_type',1,'p_primitive_type','parser.py',364),
  ('primitive_type -> KEYWORD_DICT','primitive_type',1,'p_primitive_type','parser.py',365),
  ('array_type -> primitive_type LBRACKET RBRACKET','array_type',3,'p_array_type','parser.py',369),
  ('assignment_statement -> left_hand_side ASSIGN expression SEMICOLON','assignment_statement',4,'p_assignment_statement','parser.py',373),
  ('left_hand_side -> IDENTIFIER','left_hand_side',1,'p_left_hand_side','parser.py',377),
  ('left_hand_side -> subscript_access','left_hand_side',1,'p_left_hand_side','parser.py',378),
  ('assignment_statement_no_semi -> left_hand_side ASSIGN expression','assignment_statement_no_semi',3,'p_assignment_statement_no_semi','parser.py',385),
  ('if_statement -> KEYWORD_IF LPAREN expression RPAREN statement','if_statement',5,'p_if_statement','parser.py',389),
  ('if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement','if_statement',7,'p_if_statement','parser.py',390),
  ('while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement','while_statement',5,'p_while_statement','parser.py',397),
  ('for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement','for_statement',8,'p_for_statement','parser.py',401),
  ('for_init -> assignment_statement_no_semi SEMICOLON','for_init',2,'p_for_init','parser.py',405),
  ('for_init -> declaration_statement','for_init',1,'p_for_init','parser.py',406),
  ('for_init -> SEMICOLON','for_init',1,'p_for_init','parser.py',407),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',416),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_expression_statement','parser.py',417),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','parser.py',424),
  ('expression_opt -> assignment_statement_no_semi','expression_opt',1,'p_expression_opt','parser.py',425),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parser.py',426),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',430),
  ('return_statement -> KEYWORD_RETURN SEMICOLON','return_statement',2,'p_return_statement','parser.py',434),
  ('return_statement -> KEYWORD_RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',435),
  ('function_call_statement -> function_call SEMICOLON','function_call_statement',2,'p_function_call_statement','parser.py',442),
  ('function_call -> IDENTIFIER LPAREN argument_list RPAREN','function_call',4,'p_function_call','parser.py',446),
  ('function_call -> IDENTIFIER LPAREN RPAREN','function_call',3,'p_function_call','parser.py',447),
  ('function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN','function_call',6,'p_function_call','parser.py',448),
  ('function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN','function_call',6,'p_function_call','parser.py',449),
  ('function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN','function_call',8,'p_function_call','parser.py',450),
  ('function_call -> KEYWORD_EXIT LPAREN RPAREN','function_call',3,'p_function_call','parser.py',451),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',465),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','parser.py',466),
  ('block_statement -> LBRACE RBRACE','block_statement',2,'p_block_statement','parser.py',473),
  ('block_statement -> LBRACE statement_list RBRACE','block_statement',3,'p_block_statement','parser.py',474),
  ('initializer_list -> LBRACKET expression_list_opt RBRACKET','initializer_list',3,'p_initializer_list','parser.py',481),
  ('expression_list_opt -> expression_list','expression_list_opt',1,'p_expression_list_opt','parser.py',485),
  ('expression_list_opt -> empty','expression_list_opt',1,'p_expression_list_opt','parser.py',486),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',493),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',494),
  ('expression -> logical_expression','expression',1,'p_expression','parser.py',501),
  ('logical_expression -> equality_expression','logical_expression',1,'p_logical_expression','parser.py',505),
  ('logical_expression -> logical_expression AND equality_expression','logical_expression',3,'p_logical_expression','parser.py',506),
  ('logical_expression -> logical_expression OR equality_expression','logical_expression',3,'p_logical_expression','parser.py',507),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','parser.py',514),
  ('equality_expression -> equality_expression EQ relational_expression','equality_expression',3,'p_equality_expression','parser.py',515),
  ('equality_expression -> equality_expression NEQ relational_expression','equality_expression',3,'p_equality_expression','parser.py',516),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression','parser.py',523),
  ('relational_expression -> relational_expression GT additive_expression','relational_expression',3,'p_relational_expression','parser.py',524),
  ('relational_expression -> relational_expression LT additive_expression','relational_expression',3,'p_relational_expression','parser.py',525),
  ('relational_expression -> relational_expression GEQ additive_expression','relational_expression',3,'p_relational_expression','parser.py',526),
  ('relational_expression -> relational_expression LEQ additive_expression','relational_expression',3,'p_relational_expression','parser.py',527),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','parser.py',534),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',535),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',536),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','parser.py',543),
  ('multiplicative_expression -> multiplicative_expression MUL unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',544),
  ('multiplicative_expression -> multiplicative_expression DIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',545),
  ('multiplicative_expression -> multiplicative_expression MOD unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',546),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','parser.py',553),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','parser.py',554),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','parser.py',561),
  ('primary_expression -> INT_LITERAL','primary_expression',1,'p_primary_expression','parser.py',562),
  ('primary_expression -> FLOAT_LITERAL','primary_expression',1,'p_primary_expression','parser.py',563),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','parser.py',564),
  ('primary_expression -> CHAR_LITERAL','primary_expression',1,'p_primary_expression','parser.py',565),
  ('primary_expression -> KEYWORD_TRUE','primary_expression',1,'p_primary_expression','parser.py',566),
  ('primary_expression -> KEYWORD_FALSE','primary_expression',1,'p_primary_expression','parser.py',567),
  ('primary_expression -> KEYWORD_NULL','primary_expression',1,'p_primary_expression','parser.py',568),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','parser.py',569),
  ('primary_expression -> function_call','primary_expression',1,'p_primary_expression','parser.py',570),
  ('primary_expression -> subscript_access','primary_expression',1,'p_primary_expression','parser.py',571),
  ('primary_expression -> dictionary_literal','primary_expression',1,'p_primary_expression','parser.py',572),
  ('dictionary_literal -> LBRACE key_value_list_opt RBRACE','dictionary_literal',3,'p_dictionary_literal','parser.py',586),
  ('key_value_list_opt -> key_value_list','key_value_list_opt',1,'p_key_value_list_opt','parser.py',590),
  ('key_value_list_opt -> empty','key_value_list_opt',1,'p_key_value_list_opt','parser.py',591),
  ('key_value_list -> key_value','key_value_list',1,'p_key_value_list','parser.py',598),
  ('key_value_list -> key_value_list COMMA key_value','key_value_list',3,'p_key_value_list','parser.py',599),
  ('key_value -> expression COLON expression','key_value',3,'p_key_value','parser.py',606),
  ('subscript_access -> IDENTIFIER LBRACKET expression RBRACKET','subscript_access',4,'p_subscript_access','parser.py',610),
]
