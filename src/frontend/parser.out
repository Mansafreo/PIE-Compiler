Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    DOT
    KEYWORD_CONTINUE
    SYSTEM_EXIT

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement
Rule 3     params -> param_list
Rule 4     params -> empty
Rule 5     param_list -> param
Rule 6     param_list -> param_list COMMA param
Rule 7     param -> type_specifier IDENTIFIER
Rule 8     statement_list -> statement
Rule 9     statement_list -> statement_list statement
Rule 10    statement -> declaration_statement
Rule 11    statement -> assignment_statement
Rule 12    statement -> if_statement
Rule 13    statement -> while_statement
Rule 14    statement -> do_while_statement
Rule 15    statement -> for_statement
Rule 16    statement -> switch_statement
Rule 17    statement -> break_statement
Rule 18    statement -> return_statement
Rule 19    statement -> function_call_statement
Rule 20    statement -> block_statement
Rule 21    statement -> function_definition
Rule 22    do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
Rule 23    switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE
Rule 24    case_list -> case_clause
Rule 25    case_list -> case_list case_clause
Rule 26    case_clause -> KEYWORD_CASE expression COLON statement_list
Rule 27    case_clause -> KEYWORD_DEFAULT COLON statement_list
Rule 28    break_statement -> KEYWORD_BREAK SEMICOLON
Rule 29    declaration_statement -> type_specifier IDENTIFIER SEMICOLON
Rule 30    declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON
Rule 31    declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON
Rule 32    declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
Rule 33    declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON
Rule 34    declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
Rule 35    declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON
Rule 36    type_specifier -> primitive_type
Rule 37    type_specifier -> array_type
Rule 38    primitive_type -> KEYWORD_INT
Rule 39    primitive_type -> KEYWORD_FLOAT
Rule 40    primitive_type -> KEYWORD_CHAR
Rule 41    primitive_type -> KEYWORD_VOID
Rule 42    primitive_type -> KEYWORD_STRING
Rule 43    primitive_type -> KEYWORD_BOOL
Rule 44    primitive_type -> KEYWORD_FILE
Rule 45    primitive_type -> KEYWORD_SOCKET
Rule 46    primitive_type -> KEYWORD_DICT
Rule 47    array_type -> primitive_type LBRACKET RBRACKET
Rule 48    assignment_statement -> left_hand_side ASSIGN expression SEMICOLON
Rule 49    left_hand_side -> IDENTIFIER
Rule 50    left_hand_side -> subscript_access
Rule 51    assignment_statement_no_semi -> left_hand_side ASSIGN expression
Rule 52    if_statement -> KEYWORD_IF LPAREN expression RPAREN statement
Rule 53    if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement
Rule 54    while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement
Rule 55    for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement
Rule 56    for_init -> assignment_statement_no_semi SEMICOLON
Rule 57    for_init -> declaration_statement
Rule 58    for_init -> SEMICOLON
Rule 59    expression_statement -> expression SEMICOLON
Rule 60    expression_statement -> SEMICOLON
Rule 61    expression_opt -> expression
Rule 62    expression_opt -> assignment_statement_no_semi
Rule 63    expression_opt -> empty
Rule 64    empty -> <empty>
Rule 65    return_statement -> KEYWORD_RETURN SEMICOLON
Rule 66    return_statement -> KEYWORD_RETURN expression SEMICOLON
Rule 67    function_call_statement -> function_call SEMICOLON
Rule 68    function_call -> IDENTIFIER LPAREN argument_list RPAREN
Rule 69    function_call -> IDENTIFIER LPAREN RPAREN
Rule 70    function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
Rule 71    function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
Rule 72    function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
Rule 73    function_call -> KEYWORD_EXIT LPAREN RPAREN
Rule 74    argument_list -> expression
Rule 75    argument_list -> argument_list COMMA expression
Rule 76    block_statement -> LBRACE RBRACE
Rule 77    block_statement -> LBRACE statement_list RBRACE
Rule 78    initializer_list -> LBRACKET expression_list_opt RBRACKET
Rule 79    expression_list_opt -> expression_list
Rule 80    expression_list_opt -> empty
Rule 81    expression_list -> expression
Rule 82    expression_list -> expression_list COMMA expression
Rule 83    expression -> logical_expression
Rule 84    logical_expression -> equality_expression
Rule 85    logical_expression -> logical_expression AND equality_expression
Rule 86    logical_expression -> logical_expression OR equality_expression
Rule 87    equality_expression -> relational_expression
Rule 88    equality_expression -> equality_expression EQ relational_expression
Rule 89    equality_expression -> equality_expression NEQ relational_expression
Rule 90    relational_expression -> additive_expression
Rule 91    relational_expression -> relational_expression GT additive_expression
Rule 92    relational_expression -> relational_expression LT additive_expression
Rule 93    relational_expression -> relational_expression GEQ additive_expression
Rule 94    relational_expression -> relational_expression LEQ additive_expression
Rule 95    additive_expression -> multiplicative_expression
Rule 96    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 97    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 98    multiplicative_expression -> unary_expression
Rule 99    multiplicative_expression -> multiplicative_expression MUL unary_expression
Rule 100   multiplicative_expression -> multiplicative_expression DIV unary_expression
Rule 101   multiplicative_expression -> multiplicative_expression MOD unary_expression
Rule 102   unary_expression -> primary_expression
Rule 103   unary_expression -> MINUS unary_expression
Rule 104   primary_expression -> IDENTIFIER
Rule 105   primary_expression -> INT_LITERAL
Rule 106   primary_expression -> FLOAT_LITERAL
Rule 107   primary_expression -> STRING_LITERAL
Rule 108   primary_expression -> CHAR_LITERAL
Rule 109   primary_expression -> KEYWORD_TRUE
Rule 110   primary_expression -> KEYWORD_FALSE
Rule 111   primary_expression -> KEYWORD_NULL
Rule 112   primary_expression -> LPAREN expression RPAREN
Rule 113   primary_expression -> function_call
Rule 114   primary_expression -> subscript_access
Rule 115   primary_expression -> dictionary_literal
Rule 116   dictionary_literal -> LBRACE key_value_list_opt RBRACE
Rule 117   key_value_list_opt -> key_value_list
Rule 118   key_value_list_opt -> empty
Rule 119   key_value_list -> key_value
Rule 120   key_value_list -> key_value_list COMMA key_value
Rule 121   key_value -> expression COLON expression
Rule 122   subscript_access -> IDENTIFIER LBRACKET expression RBRACKET

Terminals, with rules where they appear

AND                  : 85
ASSIGN               : 30 32 33 34 48 51
CHAR_LITERAL         : 108
COLON                : 26 27 121
COMMA                : 6 70 71 72 72 75 82 120
COMMENT              :
DIV                  : 100
DOT                  :
EQ                   : 88
FLOAT_LITERAL        : 106
GEQ                  : 93
GT                   : 91
IDENTIFIER           : 2 7 29 30 31 32 33 34 35 49 68 69 70 104 122
INT_LITERAL          : 105
KEYWORD_BOOL         : 43
KEYWORD_BREAK        : 28
KEYWORD_CASE         : 26
KEYWORD_CHAR         : 40
KEYWORD_CONTINUE     :
KEYWORD_DEFAULT      : 27
KEYWORD_DICT         : 46
KEYWORD_DO           : 22
KEYWORD_ELSE         : 53
KEYWORD_EXIT         : 73
KEYWORD_FALSE        : 110
KEYWORD_FILE         : 44
KEYWORD_FLOAT        : 39
KEYWORD_FOR          : 55
KEYWORD_IF           : 52 53
KEYWORD_INT          : 38
KEYWORD_NULL         : 111
KEYWORD_RETURN       : 65 66
KEYWORD_SOCKET       : 45
KEYWORD_STRING       : 42
KEYWORD_SWITCH       : 23
KEYWORD_TRUE         : 109
KEYWORD_VOID         : 41
KEYWORD_WHILE        : 22 54
LBRACE               : 23 76 77 116
LBRACKET             : 31 32 33 34 35 47 78 122
LEQ                  : 94
LPAREN               : 2 22 23 52 53 54 55 68 69 70 71 72 73 112
LT                   : 92
MINUS                : 97 103
MOD                  : 101
MUL                  : 99
NEQ                  : 89
OR                   : 86
PLUS                 : 96
RBRACE               : 23 76 77 116
RBRACKET             : 31 32 33 34 35 47 78 122
RPAREN               : 2 22 23 52 53 54 55 68 69 70 71 72 73 112
SEMICOLON            : 22 28 29 30 31 32 33 34 35 48 55 56 58 59 60 65 66 67
STRING_LITERAL       : 107
SYSTEM_EXIT          :
SYSTEM_INPUT         : 70
SYSTEM_OUTPUT        : 71 72
error                :

Nonterminals, with rules where they appear

additive_expression  : 90 91 92 93 94 96 97
argument_list        : 68 75
array_type           : 37
assignment_statement : 11
assignment_statement_no_semi : 56 62
block_statement      : 2 20
break_statement      : 17
case_clause          : 24 25
case_list            : 23 25
declaration_statement : 10 57
dictionary_literal   : 115
do_while_statement   : 14
empty                : 4 63 80 118
equality_expression  : 84 85 86 88 89
expression           : 22 23 26 30 31 33 34 48 51 52 53 54 59 61 66 71 72 72 74 75 81 82 112 121 121 122
expression_list      : 79 82
expression_list_opt  : 78
expression_opt       : 55 55
expression_statement :
for_init             : 55
for_statement        : 15
function_call        : 67 113
function_call_statement : 19
function_definition  : 21
if_statement         : 12
initializer_list     : 32 34
key_value            : 119 120
key_value_list       : 117 120
key_value_list_opt   : 116
left_hand_side       : 48 51
logical_expression   : 83 85 86
multiplicative_expression : 95 96 97 99 100 101
param                : 5 6
param_list           : 3 6
params               : 2
primary_expression   : 102
primitive_type       : 36 47
program              : 0
relational_expression : 87 88 89 91 92 93 94
return_statement     : 18
statement            : 8 9 22 52 53 53 54 55
statement_list       : 1 9 26 27 77
subscript_access     : 50 114
switch_statement     : 16
type_specifier       : 2 7 29 30 31 32 33 34 35 70 71 72
unary_expression     : 98 99 100 101 103
while_statement      : 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (8) statement_list -> . statement
    (9) statement_list -> . statement_list statement
    (10) statement -> . declaration_statement
    (11) statement -> . assignment_statement
    (12) statement -> . if_statement
    (13) statement -> . while_statement
    (14) statement -> . do_while_statement
    (15) statement -> . for_statement
    (16) statement -> . switch_statement
    (17) statement -> . break_statement
    (18) statement -> . return_statement
    (19) statement -> . function_call_statement
    (20) statement -> . block_statement
    (21) statement -> . function_definition
    (29) declaration_statement -> . type_specifier IDENTIFIER SEMICOLON
    (30) declaration_statement -> . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (31) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON
    (32) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (48) assignment_statement -> . left_hand_side ASSIGN expression SEMICOLON
    (52) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (53) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement
    (54) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (22) do_while_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (55) for_statement -> . KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement
    (23) switch_statement -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE
    (28) break_statement -> . KEYWORD_BREAK SEMICOLON
    (65) return_statement -> . KEYWORD_RETURN SEMICOLON
    (66) return_statement -> . KEYWORD_RETURN expression SEMICOLON
    (67) function_call_statement -> . function_call SEMICOLON
    (76) block_statement -> . LBRACE RBRACE
    (77) block_statement -> . LBRACE statement_list RBRACE
    (2) function_definition -> . type_specifier IDENTIFIER LPAREN params RPAREN block_statement
    (36) type_specifier -> . primitive_type
    (37) type_specifier -> . array_type
    (49) left_hand_side -> . IDENTIFIER
    (50) left_hand_side -> . subscript_access
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (38) primitive_type -> . KEYWORD_INT
    (39) primitive_type -> . KEYWORD_FLOAT
    (40) primitive_type -> . KEYWORD_CHAR
    (41) primitive_type -> . KEYWORD_VOID
    (42) primitive_type -> . KEYWORD_STRING
    (43) primitive_type -> . KEYWORD_BOOL
    (44) primitive_type -> . KEYWORD_FILE
    (45) primitive_type -> . KEYWORD_SOCKET
    (46) primitive_type -> . KEYWORD_DICT
    (47) array_type -> . primitive_type LBRACKET RBRACKET
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET

    KEYWORD_IF      shift and go to state 19
    KEYWORD_WHILE   shift and go to state 20
    KEYWORD_DO      shift and go to state 21
    KEYWORD_FOR     shift and go to state 22
    KEYWORD_SWITCH  shift and go to state 23
    KEYWORD_BREAK   shift and go to state 25
    KEYWORD_RETURN  shift and go to state 26
    LBRACE          shift and go to state 24
    IDENTIFIER      shift and go to state 17
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    KEYWORD_INT     shift and go to state 34
    KEYWORD_FLOAT   shift and go to state 35
    KEYWORD_CHAR    shift and go to state 36
    KEYWORD_VOID    shift and go to state 37
    KEYWORD_STRING  shift and go to state 38
    KEYWORD_BOOL    shift and go to state 39
    KEYWORD_FILE    shift and go to state 40
    KEYWORD_SOCKET  shift and go to state 41
    KEYWORD_DICT    shift and go to state 42

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    declaration_statement          shift and go to state 4
    assignment_statement           shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    do_while_statement             shift and go to state 8
    for_statement                  shift and go to state 9
    switch_statement               shift and go to state 10
    break_statement                shift and go to state 11
    return_statement               shift and go to state 12
    function_call_statement        shift and go to state 13
    block_statement                shift and go to state 14
    function_definition            shift and go to state 15
    type_specifier                 shift and go to state 16
    left_hand_side                 shift and go to state 18
    function_call                  shift and go to state 27
    primitive_type                 shift and go to state 28
    array_type                     shift and go to state 29
    subscript_access               shift and go to state 30

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (9) statement_list -> statement_list . statement
    (10) statement -> . declaration_statement
    (11) statement -> . assignment_statement
    (12) statement -> . if_statement
    (13) statement -> . while_statement
    (14) statement -> . do_while_statement
    (15) statement -> . for_statement
    (16) statement -> . switch_statement
    (17) statement -> . break_statement
    (18) statement -> . return_statement
    (19) statement -> . function_call_statement
    (20) statement -> . block_statement
    (21) statement -> . function_definition
    (29) declaration_statement -> . type_specifier IDENTIFIER SEMICOLON
    (30) declaration_statement -> . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (31) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON
    (32) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (48) assignment_statement -> . left_hand_side ASSIGN expression SEMICOLON
    (52) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (53) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement
    (54) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (22) do_while_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (55) for_statement -> . KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement
    (23) switch_statement -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE
    (28) break_statement -> . KEYWORD_BREAK SEMICOLON
    (65) return_statement -> . KEYWORD_RETURN SEMICOLON
    (66) return_statement -> . KEYWORD_RETURN expression SEMICOLON
    (67) function_call_statement -> . function_call SEMICOLON
    (76) block_statement -> . LBRACE RBRACE
    (77) block_statement -> . LBRACE statement_list RBRACE
    (2) function_definition -> . type_specifier IDENTIFIER LPAREN params RPAREN block_statement
    (36) type_specifier -> . primitive_type
    (37) type_specifier -> . array_type
    (49) left_hand_side -> . IDENTIFIER
    (50) left_hand_side -> . subscript_access
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (38) primitive_type -> . KEYWORD_INT
    (39) primitive_type -> . KEYWORD_FLOAT
    (40) primitive_type -> . KEYWORD_CHAR
    (41) primitive_type -> . KEYWORD_VOID
    (42) primitive_type -> . KEYWORD_STRING
    (43) primitive_type -> . KEYWORD_BOOL
    (44) primitive_type -> . KEYWORD_FILE
    (45) primitive_type -> . KEYWORD_SOCKET
    (46) primitive_type -> . KEYWORD_DICT
    (47) array_type -> . primitive_type LBRACKET RBRACKET
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET

    $end            reduce using rule 1 (program -> statement_list .)
    KEYWORD_IF      shift and go to state 19
    KEYWORD_WHILE   shift and go to state 20
    KEYWORD_DO      shift and go to state 21
    KEYWORD_FOR     shift and go to state 22
    KEYWORD_SWITCH  shift and go to state 23
    KEYWORD_BREAK   shift and go to state 25
    KEYWORD_RETURN  shift and go to state 26
    LBRACE          shift and go to state 24
    IDENTIFIER      shift and go to state 17
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    KEYWORD_INT     shift and go to state 34
    KEYWORD_FLOAT   shift and go to state 35
    KEYWORD_CHAR    shift and go to state 36
    KEYWORD_VOID    shift and go to state 37
    KEYWORD_STRING  shift and go to state 38
    KEYWORD_BOOL    shift and go to state 39
    KEYWORD_FILE    shift and go to state 40
    KEYWORD_SOCKET  shift and go to state 41
    KEYWORD_DICT    shift and go to state 42

    statement                      shift and go to state 43
    declaration_statement          shift and go to state 4
    assignment_statement           shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    do_while_statement             shift and go to state 8
    for_statement                  shift and go to state 9
    switch_statement               shift and go to state 10
    break_statement                shift and go to state 11
    return_statement               shift and go to state 12
    function_call_statement        shift and go to state 13
    block_statement                shift and go to state 14
    function_definition            shift and go to state 15
    type_specifier                 shift and go to state 16
    left_hand_side                 shift and go to state 18
    function_call                  shift and go to state 27
    primitive_type                 shift and go to state 28
    array_type                     shift and go to state 29
    subscript_access               shift and go to state 30

state 3

    (8) statement_list -> statement .

    KEYWORD_IF      reduce using rule 8 (statement_list -> statement .)
    KEYWORD_WHILE   reduce using rule 8 (statement_list -> statement .)
    KEYWORD_DO      reduce using rule 8 (statement_list -> statement .)
    KEYWORD_FOR     reduce using rule 8 (statement_list -> statement .)
    KEYWORD_SWITCH  reduce using rule 8 (statement_list -> statement .)
    KEYWORD_BREAK   reduce using rule 8 (statement_list -> statement .)
    KEYWORD_RETURN  reduce using rule 8 (statement_list -> statement .)
    LBRACE          reduce using rule 8 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 8 (statement_list -> statement .)
    SYSTEM_INPUT    reduce using rule 8 (statement_list -> statement .)
    SYSTEM_OUTPUT   reduce using rule 8 (statement_list -> statement .)
    KEYWORD_EXIT    reduce using rule 8 (statement_list -> statement .)
    KEYWORD_INT     reduce using rule 8 (statement_list -> statement .)
    KEYWORD_FLOAT   reduce using rule 8 (statement_list -> statement .)
    KEYWORD_CHAR    reduce using rule 8 (statement_list -> statement .)
    KEYWORD_VOID    reduce using rule 8 (statement_list -> statement .)
    KEYWORD_STRING  reduce using rule 8 (statement_list -> statement .)
    KEYWORD_BOOL    reduce using rule 8 (statement_list -> statement .)
    KEYWORD_FILE    reduce using rule 8 (statement_list -> statement .)
    KEYWORD_SOCKET  reduce using rule 8 (statement_list -> statement .)
    KEYWORD_DICT    reduce using rule 8 (statement_list -> statement .)
    $end            reduce using rule 8 (statement_list -> statement .)
    RBRACE          reduce using rule 8 (statement_list -> statement .)
    KEYWORD_CASE    reduce using rule 8 (statement_list -> statement .)
    KEYWORD_DEFAULT reduce using rule 8 (statement_list -> statement .)


state 4

    (10) statement -> declaration_statement .

    KEYWORD_IF      reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_WHILE   reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_DO      reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_FOR     reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_SWITCH  reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_BREAK   reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_RETURN  reduce using rule 10 (statement -> declaration_statement .)
    LBRACE          reduce using rule 10 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 10 (statement -> declaration_statement .)
    SYSTEM_INPUT    reduce using rule 10 (statement -> declaration_statement .)
    SYSTEM_OUTPUT   reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_EXIT    reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_INT     reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_FLOAT   reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_CHAR    reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_VOID    reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_STRING  reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_BOOL    reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_FILE    reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_SOCKET  reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_DICT    reduce using rule 10 (statement -> declaration_statement .)
    $end            reduce using rule 10 (statement -> declaration_statement .)
    RBRACE          reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_ELSE    reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_CASE    reduce using rule 10 (statement -> declaration_statement .)
    KEYWORD_DEFAULT reduce using rule 10 (statement -> declaration_statement .)


state 5

    (11) statement -> assignment_statement .

    KEYWORD_IF      reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_WHILE   reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_DO      reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_FOR     reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_SWITCH  reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_BREAK   reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_RETURN  reduce using rule 11 (statement -> assignment_statement .)
    LBRACE          reduce using rule 11 (statement -> assignment_statement .)
    IDENTIFIER      reduce using rule 11 (statement -> assignment_statement .)
    SYSTEM_INPUT    reduce using rule 11 (statement -> assignment_statement .)
    SYSTEM_OUTPUT   reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_EXIT    reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_INT     reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_FLOAT   reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_CHAR    reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_VOID    reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_STRING  reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_BOOL    reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_FILE    reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_SOCKET  reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_DICT    reduce using rule 11 (statement -> assignment_statement .)
    $end            reduce using rule 11 (statement -> assignment_statement .)
    RBRACE          reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_ELSE    reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_CASE    reduce using rule 11 (statement -> assignment_statement .)
    KEYWORD_DEFAULT reduce using rule 11 (statement -> assignment_statement .)


state 6

    (12) statement -> if_statement .

    KEYWORD_IF      reduce using rule 12 (statement -> if_statement .)
    KEYWORD_WHILE   reduce using rule 12 (statement -> if_statement .)
    KEYWORD_DO      reduce using rule 12 (statement -> if_statement .)
    KEYWORD_FOR     reduce using rule 12 (statement -> if_statement .)
    KEYWORD_SWITCH  reduce using rule 12 (statement -> if_statement .)
    KEYWORD_BREAK   reduce using rule 12 (statement -> if_statement .)
    KEYWORD_RETURN  reduce using rule 12 (statement -> if_statement .)
    LBRACE          reduce using rule 12 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 12 (statement -> if_statement .)
    SYSTEM_INPUT    reduce using rule 12 (statement -> if_statement .)
    SYSTEM_OUTPUT   reduce using rule 12 (statement -> if_statement .)
    KEYWORD_EXIT    reduce using rule 12 (statement -> if_statement .)
    KEYWORD_INT     reduce using rule 12 (statement -> if_statement .)
    KEYWORD_FLOAT   reduce using rule 12 (statement -> if_statement .)
    KEYWORD_CHAR    reduce using rule 12 (statement -> if_statement .)
    KEYWORD_VOID    reduce using rule 12 (statement -> if_statement .)
    KEYWORD_STRING  reduce using rule 12 (statement -> if_statement .)
    KEYWORD_BOOL    reduce using rule 12 (statement -> if_statement .)
    KEYWORD_FILE    reduce using rule 12 (statement -> if_statement .)
    KEYWORD_SOCKET  reduce using rule 12 (statement -> if_statement .)
    KEYWORD_DICT    reduce using rule 12 (statement -> if_statement .)
    $end            reduce using rule 12 (statement -> if_statement .)
    RBRACE          reduce using rule 12 (statement -> if_statement .)
    KEYWORD_ELSE    reduce using rule 12 (statement -> if_statement .)
    KEYWORD_CASE    reduce using rule 12 (statement -> if_statement .)
    KEYWORD_DEFAULT reduce using rule 12 (statement -> if_statement .)


state 7

    (13) statement -> while_statement .

    KEYWORD_IF      reduce using rule 13 (statement -> while_statement .)
    KEYWORD_WHILE   reduce using rule 13 (statement -> while_statement .)
    KEYWORD_DO      reduce using rule 13 (statement -> while_statement .)
    KEYWORD_FOR     reduce using rule 13 (statement -> while_statement .)
    KEYWORD_SWITCH  reduce using rule 13 (statement -> while_statement .)
    KEYWORD_BREAK   reduce using rule 13 (statement -> while_statement .)
    KEYWORD_RETURN  reduce using rule 13 (statement -> while_statement .)
    LBRACE          reduce using rule 13 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 13 (statement -> while_statement .)
    SYSTEM_INPUT    reduce using rule 13 (statement -> while_statement .)
    SYSTEM_OUTPUT   reduce using rule 13 (statement -> while_statement .)
    KEYWORD_EXIT    reduce using rule 13 (statement -> while_statement .)
    KEYWORD_INT     reduce using rule 13 (statement -> while_statement .)
    KEYWORD_FLOAT   reduce using rule 13 (statement -> while_statement .)
    KEYWORD_CHAR    reduce using rule 13 (statement -> while_statement .)
    KEYWORD_VOID    reduce using rule 13 (statement -> while_statement .)
    KEYWORD_STRING  reduce using rule 13 (statement -> while_statement .)
    KEYWORD_BOOL    reduce using rule 13 (statement -> while_statement .)
    KEYWORD_FILE    reduce using rule 13 (statement -> while_statement .)
    KEYWORD_SOCKET  reduce using rule 13 (statement -> while_statement .)
    KEYWORD_DICT    reduce using rule 13 (statement -> while_statement .)
    $end            reduce using rule 13 (statement -> while_statement .)
    RBRACE          reduce using rule 13 (statement -> while_statement .)
    KEYWORD_ELSE    reduce using rule 13 (statement -> while_statement .)
    KEYWORD_CASE    reduce using rule 13 (statement -> while_statement .)
    KEYWORD_DEFAULT reduce using rule 13 (statement -> while_statement .)


state 8

    (14) statement -> do_while_statement .

    KEYWORD_IF      reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_WHILE   reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_DO      reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_FOR     reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_SWITCH  reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_BREAK   reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_RETURN  reduce using rule 14 (statement -> do_while_statement .)
    LBRACE          reduce using rule 14 (statement -> do_while_statement .)
    IDENTIFIER      reduce using rule 14 (statement -> do_while_statement .)
    SYSTEM_INPUT    reduce using rule 14 (statement -> do_while_statement .)
    SYSTEM_OUTPUT   reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_EXIT    reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_INT     reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_FLOAT   reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_CHAR    reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_VOID    reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_STRING  reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_BOOL    reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_FILE    reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_SOCKET  reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_DICT    reduce using rule 14 (statement -> do_while_statement .)
    $end            reduce using rule 14 (statement -> do_while_statement .)
    RBRACE          reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_ELSE    reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_CASE    reduce using rule 14 (statement -> do_while_statement .)
    KEYWORD_DEFAULT reduce using rule 14 (statement -> do_while_statement .)


state 9

    (15) statement -> for_statement .

    KEYWORD_IF      reduce using rule 15 (statement -> for_statement .)
    KEYWORD_WHILE   reduce using rule 15 (statement -> for_statement .)
    KEYWORD_DO      reduce using rule 15 (statement -> for_statement .)
    KEYWORD_FOR     reduce using rule 15 (statement -> for_statement .)
    KEYWORD_SWITCH  reduce using rule 15 (statement -> for_statement .)
    KEYWORD_BREAK   reduce using rule 15 (statement -> for_statement .)
    KEYWORD_RETURN  reduce using rule 15 (statement -> for_statement .)
    LBRACE          reduce using rule 15 (statement -> for_statement .)
    IDENTIFIER      reduce using rule 15 (statement -> for_statement .)
    SYSTEM_INPUT    reduce using rule 15 (statement -> for_statement .)
    SYSTEM_OUTPUT   reduce using rule 15 (statement -> for_statement .)
    KEYWORD_EXIT    reduce using rule 15 (statement -> for_statement .)
    KEYWORD_INT     reduce using rule 15 (statement -> for_statement .)
    KEYWORD_FLOAT   reduce using rule 15 (statement -> for_statement .)
    KEYWORD_CHAR    reduce using rule 15 (statement -> for_statement .)
    KEYWORD_VOID    reduce using rule 15 (statement -> for_statement .)
    KEYWORD_STRING  reduce using rule 15 (statement -> for_statement .)
    KEYWORD_BOOL    reduce using rule 15 (statement -> for_statement .)
    KEYWORD_FILE    reduce using rule 15 (statement -> for_statement .)
    KEYWORD_SOCKET  reduce using rule 15 (statement -> for_statement .)
    KEYWORD_DICT    reduce using rule 15 (statement -> for_statement .)
    $end            reduce using rule 15 (statement -> for_statement .)
    RBRACE          reduce using rule 15 (statement -> for_statement .)
    KEYWORD_ELSE    reduce using rule 15 (statement -> for_statement .)
    KEYWORD_CASE    reduce using rule 15 (statement -> for_statement .)
    KEYWORD_DEFAULT reduce using rule 15 (statement -> for_statement .)


state 10

    (16) statement -> switch_statement .

    KEYWORD_IF      reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_WHILE   reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_DO      reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_FOR     reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_SWITCH  reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_BREAK   reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_RETURN  reduce using rule 16 (statement -> switch_statement .)
    LBRACE          reduce using rule 16 (statement -> switch_statement .)
    IDENTIFIER      reduce using rule 16 (statement -> switch_statement .)
    SYSTEM_INPUT    reduce using rule 16 (statement -> switch_statement .)
    SYSTEM_OUTPUT   reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_EXIT    reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_INT     reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_FLOAT   reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_CHAR    reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_VOID    reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_STRING  reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_BOOL    reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_FILE    reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_SOCKET  reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_DICT    reduce using rule 16 (statement -> switch_statement .)
    $end            reduce using rule 16 (statement -> switch_statement .)
    RBRACE          reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_ELSE    reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_CASE    reduce using rule 16 (statement -> switch_statement .)
    KEYWORD_DEFAULT reduce using rule 16 (statement -> switch_statement .)


state 11

    (17) statement -> break_statement .

    KEYWORD_IF      reduce using rule 17 (statement -> break_statement .)
    KEYWORD_WHILE   reduce using rule 17 (statement -> break_statement .)
    KEYWORD_DO      reduce using rule 17 (statement -> break_statement .)
    KEYWORD_FOR     reduce using rule 17 (statement -> break_statement .)
    KEYWORD_SWITCH  reduce using rule 17 (statement -> break_statement .)
    KEYWORD_BREAK   reduce using rule 17 (statement -> break_statement .)
    KEYWORD_RETURN  reduce using rule 17 (statement -> break_statement .)
    LBRACE          reduce using rule 17 (statement -> break_statement .)
    IDENTIFIER      reduce using rule 17 (statement -> break_statement .)
    SYSTEM_INPUT    reduce using rule 17 (statement -> break_statement .)
    SYSTEM_OUTPUT   reduce using rule 17 (statement -> break_statement .)
    KEYWORD_EXIT    reduce using rule 17 (statement -> break_statement .)
    KEYWORD_INT     reduce using rule 17 (statement -> break_statement .)
    KEYWORD_FLOAT   reduce using rule 17 (statement -> break_statement .)
    KEYWORD_CHAR    reduce using rule 17 (statement -> break_statement .)
    KEYWORD_VOID    reduce using rule 17 (statement -> break_statement .)
    KEYWORD_STRING  reduce using rule 17 (statement -> break_statement .)
    KEYWORD_BOOL    reduce using rule 17 (statement -> break_statement .)
    KEYWORD_FILE    reduce using rule 17 (statement -> break_statement .)
    KEYWORD_SOCKET  reduce using rule 17 (statement -> break_statement .)
    KEYWORD_DICT    reduce using rule 17 (statement -> break_statement .)
    $end            reduce using rule 17 (statement -> break_statement .)
    RBRACE          reduce using rule 17 (statement -> break_statement .)
    KEYWORD_ELSE    reduce using rule 17 (statement -> break_statement .)
    KEYWORD_CASE    reduce using rule 17 (statement -> break_statement .)
    KEYWORD_DEFAULT reduce using rule 17 (statement -> break_statement .)


state 12

    (18) statement -> return_statement .

    KEYWORD_IF      reduce using rule 18 (statement -> return_statement .)
    KEYWORD_WHILE   reduce using rule 18 (statement -> return_statement .)
    KEYWORD_DO      reduce using rule 18 (statement -> return_statement .)
    KEYWORD_FOR     reduce using rule 18 (statement -> return_statement .)
    KEYWORD_SWITCH  reduce using rule 18 (statement -> return_statement .)
    KEYWORD_BREAK   reduce using rule 18 (statement -> return_statement .)
    KEYWORD_RETURN  reduce using rule 18 (statement -> return_statement .)
    LBRACE          reduce using rule 18 (statement -> return_statement .)
    IDENTIFIER      reduce using rule 18 (statement -> return_statement .)
    SYSTEM_INPUT    reduce using rule 18 (statement -> return_statement .)
    SYSTEM_OUTPUT   reduce using rule 18 (statement -> return_statement .)
    KEYWORD_EXIT    reduce using rule 18 (statement -> return_statement .)
    KEYWORD_INT     reduce using rule 18 (statement -> return_statement .)
    KEYWORD_FLOAT   reduce using rule 18 (statement -> return_statement .)
    KEYWORD_CHAR    reduce using rule 18 (statement -> return_statement .)
    KEYWORD_VOID    reduce using rule 18 (statement -> return_statement .)
    KEYWORD_STRING  reduce using rule 18 (statement -> return_statement .)
    KEYWORD_BOOL    reduce using rule 18 (statement -> return_statement .)
    KEYWORD_FILE    reduce using rule 18 (statement -> return_statement .)
    KEYWORD_SOCKET  reduce using rule 18 (statement -> return_statement .)
    KEYWORD_DICT    reduce using rule 18 (statement -> return_statement .)
    $end            reduce using rule 18 (statement -> return_statement .)
    RBRACE          reduce using rule 18 (statement -> return_statement .)
    KEYWORD_ELSE    reduce using rule 18 (statement -> return_statement .)
    KEYWORD_CASE    reduce using rule 18 (statement -> return_statement .)
    KEYWORD_DEFAULT reduce using rule 18 (statement -> return_statement .)


state 13

    (19) statement -> function_call_statement .

    KEYWORD_IF      reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_WHILE   reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_DO      reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_FOR     reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_SWITCH  reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_BREAK   reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_RETURN  reduce using rule 19 (statement -> function_call_statement .)
    LBRACE          reduce using rule 19 (statement -> function_call_statement .)
    IDENTIFIER      reduce using rule 19 (statement -> function_call_statement .)
    SYSTEM_INPUT    reduce using rule 19 (statement -> function_call_statement .)
    SYSTEM_OUTPUT   reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_EXIT    reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_INT     reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_FLOAT   reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_CHAR    reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_VOID    reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_STRING  reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_BOOL    reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_FILE    reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_SOCKET  reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_DICT    reduce using rule 19 (statement -> function_call_statement .)
    $end            reduce using rule 19 (statement -> function_call_statement .)
    RBRACE          reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_ELSE    reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_CASE    reduce using rule 19 (statement -> function_call_statement .)
    KEYWORD_DEFAULT reduce using rule 19 (statement -> function_call_statement .)


state 14

    (20) statement -> block_statement .

    KEYWORD_IF      reduce using rule 20 (statement -> block_statement .)
    KEYWORD_WHILE   reduce using rule 20 (statement -> block_statement .)
    KEYWORD_DO      reduce using rule 20 (statement -> block_statement .)
    KEYWORD_FOR     reduce using rule 20 (statement -> block_statement .)
    KEYWORD_SWITCH  reduce using rule 20 (statement -> block_statement .)
    KEYWORD_BREAK   reduce using rule 20 (statement -> block_statement .)
    KEYWORD_RETURN  reduce using rule 20 (statement -> block_statement .)
    LBRACE          reduce using rule 20 (statement -> block_statement .)
    IDENTIFIER      reduce using rule 20 (statement -> block_statement .)
    SYSTEM_INPUT    reduce using rule 20 (statement -> block_statement .)
    SYSTEM_OUTPUT   reduce using rule 20 (statement -> block_statement .)
    KEYWORD_EXIT    reduce using rule 20 (statement -> block_statement .)
    KEYWORD_INT     reduce using rule 20 (statement -> block_statement .)
    KEYWORD_FLOAT   reduce using rule 20 (statement -> block_statement .)
    KEYWORD_CHAR    reduce using rule 20 (statement -> block_statement .)
    KEYWORD_VOID    reduce using rule 20 (statement -> block_statement .)
    KEYWORD_STRING  reduce using rule 20 (statement -> block_statement .)
    KEYWORD_BOOL    reduce using rule 20 (statement -> block_statement .)
    KEYWORD_FILE    reduce using rule 20 (statement -> block_statement .)
    KEYWORD_SOCKET  reduce using rule 20 (statement -> block_statement .)
    KEYWORD_DICT    reduce using rule 20 (statement -> block_statement .)
    $end            reduce using rule 20 (statement -> block_statement .)
    RBRACE          reduce using rule 20 (statement -> block_statement .)
    KEYWORD_ELSE    reduce using rule 20 (statement -> block_statement .)
    KEYWORD_CASE    reduce using rule 20 (statement -> block_statement .)
    KEYWORD_DEFAULT reduce using rule 20 (statement -> block_statement .)


state 15

    (21) statement -> function_definition .

    KEYWORD_IF      reduce using rule 21 (statement -> function_definition .)
    KEYWORD_WHILE   reduce using rule 21 (statement -> function_definition .)
    KEYWORD_DO      reduce using rule 21 (statement -> function_definition .)
    KEYWORD_FOR     reduce using rule 21 (statement -> function_definition .)
    KEYWORD_SWITCH  reduce using rule 21 (statement -> function_definition .)
    KEYWORD_BREAK   reduce using rule 21 (statement -> function_definition .)
    KEYWORD_RETURN  reduce using rule 21 (statement -> function_definition .)
    LBRACE          reduce using rule 21 (statement -> function_definition .)
    IDENTIFIER      reduce using rule 21 (statement -> function_definition .)
    SYSTEM_INPUT    reduce using rule 21 (statement -> function_definition .)
    SYSTEM_OUTPUT   reduce using rule 21 (statement -> function_definition .)
    KEYWORD_EXIT    reduce using rule 21 (statement -> function_definition .)
    KEYWORD_INT     reduce using rule 21 (statement -> function_definition .)
    KEYWORD_FLOAT   reduce using rule 21 (statement -> function_definition .)
    KEYWORD_CHAR    reduce using rule 21 (statement -> function_definition .)
    KEYWORD_VOID    reduce using rule 21 (statement -> function_definition .)
    KEYWORD_STRING  reduce using rule 21 (statement -> function_definition .)
    KEYWORD_BOOL    reduce using rule 21 (statement -> function_definition .)
    KEYWORD_FILE    reduce using rule 21 (statement -> function_definition .)
    KEYWORD_SOCKET  reduce using rule 21 (statement -> function_definition .)
    KEYWORD_DICT    reduce using rule 21 (statement -> function_definition .)
    $end            reduce using rule 21 (statement -> function_definition .)
    RBRACE          reduce using rule 21 (statement -> function_definition .)
    KEYWORD_ELSE    reduce using rule 21 (statement -> function_definition .)
    KEYWORD_CASE    reduce using rule 21 (statement -> function_definition .)
    KEYWORD_DEFAULT reduce using rule 21 (statement -> function_definition .)


state 16

    (29) declaration_statement -> type_specifier . IDENTIFIER SEMICOLON
    (30) declaration_statement -> type_specifier . IDENTIFIER ASSIGN expression SEMICOLON
    (31) declaration_statement -> type_specifier . IDENTIFIER LBRACKET expression RBRACKET SEMICOLON
    (32) declaration_statement -> type_specifier . IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> type_specifier . IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> type_specifier . IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> type_specifier . IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (2) function_definition -> type_specifier . IDENTIFIER LPAREN params RPAREN block_statement

    IDENTIFIER      shift and go to state 44


state 17

    (49) left_hand_side -> IDENTIFIER .
    (68) function_call -> IDENTIFIER . LPAREN argument_list RPAREN
    (69) function_call -> IDENTIFIER . LPAREN RPAREN
    (122) subscript_access -> IDENTIFIER . LBRACKET expression RBRACKET

    ASSIGN          reduce using rule 49 (left_hand_side -> IDENTIFIER .)
    LPAREN          shift and go to state 45
    LBRACKET        shift and go to state 46


state 18

    (48) assignment_statement -> left_hand_side . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 47


state 19

    (52) if_statement -> KEYWORD_IF . LPAREN expression RPAREN statement
    (53) if_statement -> KEYWORD_IF . LPAREN expression RPAREN statement KEYWORD_ELSE statement

    LPAREN          shift and go to state 48


state 20

    (54) while_statement -> KEYWORD_WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 49


state 21

    (22) do_while_statement -> KEYWORD_DO . statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (10) statement -> . declaration_statement
    (11) statement -> . assignment_statement
    (12) statement -> . if_statement
    (13) statement -> . while_statement
    (14) statement -> . do_while_statement
    (15) statement -> . for_statement
    (16) statement -> . switch_statement
    (17) statement -> . break_statement
    (18) statement -> . return_statement
    (19) statement -> . function_call_statement
    (20) statement -> . block_statement
    (21) statement -> . function_definition
    (29) declaration_statement -> . type_specifier IDENTIFIER SEMICOLON
    (30) declaration_statement -> . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (31) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON
    (32) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (48) assignment_statement -> . left_hand_side ASSIGN expression SEMICOLON
    (52) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (53) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement
    (54) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (22) do_while_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (55) for_statement -> . KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement
    (23) switch_statement -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE
    (28) break_statement -> . KEYWORD_BREAK SEMICOLON
    (65) return_statement -> . KEYWORD_RETURN SEMICOLON
    (66) return_statement -> . KEYWORD_RETURN expression SEMICOLON
    (67) function_call_statement -> . function_call SEMICOLON
    (76) block_statement -> . LBRACE RBRACE
    (77) block_statement -> . LBRACE statement_list RBRACE
    (2) function_definition -> . type_specifier IDENTIFIER LPAREN params RPAREN block_statement
    (36) type_specifier -> . primitive_type
    (37) type_specifier -> . array_type
    (49) left_hand_side -> . IDENTIFIER
    (50) left_hand_side -> . subscript_access
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (38) primitive_type -> . KEYWORD_INT
    (39) primitive_type -> . KEYWORD_FLOAT
    (40) primitive_type -> . KEYWORD_CHAR
    (41) primitive_type -> . KEYWORD_VOID
    (42) primitive_type -> . KEYWORD_STRING
    (43) primitive_type -> . KEYWORD_BOOL
    (44) primitive_type -> . KEYWORD_FILE
    (45) primitive_type -> . KEYWORD_SOCKET
    (46) primitive_type -> . KEYWORD_DICT
    (47) array_type -> . primitive_type LBRACKET RBRACKET
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET

    KEYWORD_IF      shift and go to state 19
    KEYWORD_WHILE   shift and go to state 20
    KEYWORD_DO      shift and go to state 21
    KEYWORD_FOR     shift and go to state 22
    KEYWORD_SWITCH  shift and go to state 23
    KEYWORD_BREAK   shift and go to state 25
    KEYWORD_RETURN  shift and go to state 26
    LBRACE          shift and go to state 24
    IDENTIFIER      shift and go to state 17
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    KEYWORD_INT     shift and go to state 34
    KEYWORD_FLOAT   shift and go to state 35
    KEYWORD_CHAR    shift and go to state 36
    KEYWORD_VOID    shift and go to state 37
    KEYWORD_STRING  shift and go to state 38
    KEYWORD_BOOL    shift and go to state 39
    KEYWORD_FILE    shift and go to state 40
    KEYWORD_SOCKET  shift and go to state 41
    KEYWORD_DICT    shift and go to state 42

    statement                      shift and go to state 50
    declaration_statement          shift and go to state 4
    assignment_statement           shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    do_while_statement             shift and go to state 8
    for_statement                  shift and go to state 9
    switch_statement               shift and go to state 10
    break_statement                shift and go to state 11
    return_statement               shift and go to state 12
    function_call_statement        shift and go to state 13
    block_statement                shift and go to state 14
    function_definition            shift and go to state 15
    type_specifier                 shift and go to state 16
    left_hand_side                 shift and go to state 18
    function_call                  shift and go to state 27
    primitive_type                 shift and go to state 28
    array_type                     shift and go to state 29
    subscript_access               shift and go to state 30

state 22

    (55) for_statement -> KEYWORD_FOR . LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement

    LPAREN          shift and go to state 51


state 23

    (23) switch_statement -> KEYWORD_SWITCH . LPAREN expression RPAREN LBRACE case_list RBRACE

    LPAREN          shift and go to state 52


state 24

    (76) block_statement -> LBRACE . RBRACE
    (77) block_statement -> LBRACE . statement_list RBRACE
    (8) statement_list -> . statement
    (9) statement_list -> . statement_list statement
    (10) statement -> . declaration_statement
    (11) statement -> . assignment_statement
    (12) statement -> . if_statement
    (13) statement -> . while_statement
    (14) statement -> . do_while_statement
    (15) statement -> . for_statement
    (16) statement -> . switch_statement
    (17) statement -> . break_statement
    (18) statement -> . return_statement
    (19) statement -> . function_call_statement
    (20) statement -> . block_statement
    (21) statement -> . function_definition
    (29) declaration_statement -> . type_specifier IDENTIFIER SEMICOLON
    (30) declaration_statement -> . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (31) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON
    (32) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (48) assignment_statement -> . left_hand_side ASSIGN expression SEMICOLON
    (52) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (53) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement
    (54) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (22) do_while_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (55) for_statement -> . KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement
    (23) switch_statement -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE
    (28) break_statement -> . KEYWORD_BREAK SEMICOLON
    (65) return_statement -> . KEYWORD_RETURN SEMICOLON
    (66) return_statement -> . KEYWORD_RETURN expression SEMICOLON
    (67) function_call_statement -> . function_call SEMICOLON
    (76) block_statement -> . LBRACE RBRACE
    (77) block_statement -> . LBRACE statement_list RBRACE
    (2) function_definition -> . type_specifier IDENTIFIER LPAREN params RPAREN block_statement
    (36) type_specifier -> . primitive_type
    (37) type_specifier -> . array_type
    (49) left_hand_side -> . IDENTIFIER
    (50) left_hand_side -> . subscript_access
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (38) primitive_type -> . KEYWORD_INT
    (39) primitive_type -> . KEYWORD_FLOAT
    (40) primitive_type -> . KEYWORD_CHAR
    (41) primitive_type -> . KEYWORD_VOID
    (42) primitive_type -> . KEYWORD_STRING
    (43) primitive_type -> . KEYWORD_BOOL
    (44) primitive_type -> . KEYWORD_FILE
    (45) primitive_type -> . KEYWORD_SOCKET
    (46) primitive_type -> . KEYWORD_DICT
    (47) array_type -> . primitive_type LBRACKET RBRACKET
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET

    RBRACE          shift and go to state 53
    KEYWORD_IF      shift and go to state 19
    KEYWORD_WHILE   shift and go to state 20
    KEYWORD_DO      shift and go to state 21
    KEYWORD_FOR     shift and go to state 22
    KEYWORD_SWITCH  shift and go to state 23
    KEYWORD_BREAK   shift and go to state 25
    KEYWORD_RETURN  shift and go to state 26
    LBRACE          shift and go to state 24
    IDENTIFIER      shift and go to state 17
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    KEYWORD_INT     shift and go to state 34
    KEYWORD_FLOAT   shift and go to state 35
    KEYWORD_CHAR    shift and go to state 36
    KEYWORD_VOID    shift and go to state 37
    KEYWORD_STRING  shift and go to state 38
    KEYWORD_BOOL    shift and go to state 39
    KEYWORD_FILE    shift and go to state 40
    KEYWORD_SOCKET  shift and go to state 41
    KEYWORD_DICT    shift and go to state 42

    statement_list                 shift and go to state 54
    statement                      shift and go to state 3
    declaration_statement          shift and go to state 4
    assignment_statement           shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    do_while_statement             shift and go to state 8
    for_statement                  shift and go to state 9
    switch_statement               shift and go to state 10
    break_statement                shift and go to state 11
    return_statement               shift and go to state 12
    function_call_statement        shift and go to state 13
    block_statement                shift and go to state 14
    function_definition            shift and go to state 15
    type_specifier                 shift and go to state 16
    left_hand_side                 shift and go to state 18
    function_call                  shift and go to state 27
    primitive_type                 shift and go to state 28
    array_type                     shift and go to state 29
    subscript_access               shift and go to state 30

state 25

    (28) break_statement -> KEYWORD_BREAK . SEMICOLON

    SEMICOLON       shift and go to state 55


state 26

    (65) return_statement -> KEYWORD_RETURN . SEMICOLON
    (66) return_statement -> KEYWORD_RETURN . expression SEMICOLON
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    SEMICOLON       shift and go to state 56
    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression                     shift and go to state 57
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 27

    (67) function_call_statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 79


state 28

    (36) type_specifier -> primitive_type .
    (47) array_type -> primitive_type . LBRACKET RBRACKET

    IDENTIFIER      reduce using rule 36 (type_specifier -> primitive_type .)
    RPAREN          reduce using rule 36 (type_specifier -> primitive_type .)
    COMMA           reduce using rule 36 (type_specifier -> primitive_type .)
    LBRACKET        shift and go to state 80


state 29

    (37) type_specifier -> array_type .

    IDENTIFIER      reduce using rule 37 (type_specifier -> array_type .)
    RPAREN          reduce using rule 37 (type_specifier -> array_type .)
    COMMA           reduce using rule 37 (type_specifier -> array_type .)


state 30

    (50) left_hand_side -> subscript_access .

    ASSIGN          reduce using rule 50 (left_hand_side -> subscript_access .)


state 31

    (70) function_call -> SYSTEM_INPUT . LPAREN IDENTIFIER COMMA type_specifier RPAREN

    LPAREN          shift and go to state 81


state 32

    (71) function_call -> SYSTEM_OUTPUT . LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> SYSTEM_OUTPUT . LPAREN expression COMMA type_specifier COMMA expression RPAREN

    LPAREN          shift and go to state 82


state 33

    (73) function_call -> KEYWORD_EXIT . LPAREN RPAREN

    LPAREN          shift and go to state 83


state 34

    (38) primitive_type -> KEYWORD_INT .

    LBRACKET        reduce using rule 38 (primitive_type -> KEYWORD_INT .)
    IDENTIFIER      reduce using rule 38 (primitive_type -> KEYWORD_INT .)
    RPAREN          reduce using rule 38 (primitive_type -> KEYWORD_INT .)
    COMMA           reduce using rule 38 (primitive_type -> KEYWORD_INT .)


state 35

    (39) primitive_type -> KEYWORD_FLOAT .

    LBRACKET        reduce using rule 39 (primitive_type -> KEYWORD_FLOAT .)
    IDENTIFIER      reduce using rule 39 (primitive_type -> KEYWORD_FLOAT .)
    RPAREN          reduce using rule 39 (primitive_type -> KEYWORD_FLOAT .)
    COMMA           reduce using rule 39 (primitive_type -> KEYWORD_FLOAT .)


state 36

    (40) primitive_type -> KEYWORD_CHAR .

    LBRACKET        reduce using rule 40 (primitive_type -> KEYWORD_CHAR .)
    IDENTIFIER      reduce using rule 40 (primitive_type -> KEYWORD_CHAR .)
    RPAREN          reduce using rule 40 (primitive_type -> KEYWORD_CHAR .)
    COMMA           reduce using rule 40 (primitive_type -> KEYWORD_CHAR .)


state 37

    (41) primitive_type -> KEYWORD_VOID .

    LBRACKET        reduce using rule 41 (primitive_type -> KEYWORD_VOID .)
    IDENTIFIER      reduce using rule 41 (primitive_type -> KEYWORD_VOID .)
    RPAREN          reduce using rule 41 (primitive_type -> KEYWORD_VOID .)
    COMMA           reduce using rule 41 (primitive_type -> KEYWORD_VOID .)


state 38

    (42) primitive_type -> KEYWORD_STRING .

    LBRACKET        reduce using rule 42 (primitive_type -> KEYWORD_STRING .)
    IDENTIFIER      reduce using rule 42 (primitive_type -> KEYWORD_STRING .)
    RPAREN          reduce using rule 42 (primitive_type -> KEYWORD_STRING .)
    COMMA           reduce using rule 42 (primitive_type -> KEYWORD_STRING .)


state 39

    (43) primitive_type -> KEYWORD_BOOL .

    LBRACKET        reduce using rule 43 (primitive_type -> KEYWORD_BOOL .)
    IDENTIFIER      reduce using rule 43 (primitive_type -> KEYWORD_BOOL .)
    RPAREN          reduce using rule 43 (primitive_type -> KEYWORD_BOOL .)
    COMMA           reduce using rule 43 (primitive_type -> KEYWORD_BOOL .)


state 40

    (44) primitive_type -> KEYWORD_FILE .

    LBRACKET        reduce using rule 44 (primitive_type -> KEYWORD_FILE .)
    IDENTIFIER      reduce using rule 44 (primitive_type -> KEYWORD_FILE .)
    RPAREN          reduce using rule 44 (primitive_type -> KEYWORD_FILE .)
    COMMA           reduce using rule 44 (primitive_type -> KEYWORD_FILE .)


state 41

    (45) primitive_type -> KEYWORD_SOCKET .

    LBRACKET        reduce using rule 45 (primitive_type -> KEYWORD_SOCKET .)
    IDENTIFIER      reduce using rule 45 (primitive_type -> KEYWORD_SOCKET .)
    RPAREN          reduce using rule 45 (primitive_type -> KEYWORD_SOCKET .)
    COMMA           reduce using rule 45 (primitive_type -> KEYWORD_SOCKET .)


state 42

    (46) primitive_type -> KEYWORD_DICT .

    LBRACKET        reduce using rule 46 (primitive_type -> KEYWORD_DICT .)
    IDENTIFIER      reduce using rule 46 (primitive_type -> KEYWORD_DICT .)
    RPAREN          reduce using rule 46 (primitive_type -> KEYWORD_DICT .)
    COMMA           reduce using rule 46 (primitive_type -> KEYWORD_DICT .)


state 43

    (9) statement_list -> statement_list statement .

    KEYWORD_IF      reduce using rule 9 (statement_list -> statement_list statement .)
    KEYWORD_WHILE   reduce using rule 9 (statement_list -> statement_list statement .)
    KEYWORD_DO      reduce using rule 9 (statement_list -> statement_list statement .)
    KEYWORD_FOR     reduce using rule 9 (statement_list -> statement_list statement .)
    KEYWORD_SWITCH  reduce using rule 9 (statement_list -> statement_list statement .)
    KEYWORD_BREAK   reduce using rule 9 (statement_list -> statement_list statement .)
    KEYWORD_RETURN  reduce using rule 9 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 9 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 9 (statement_list -> statement_list statement .)
    SYSTEM_INPUT    reduce using rule 9 (statement_list -> statement_list statement .)
    SYSTEM_OUTPUT   reduce using rule 9 (statement_list -> statement_list statement .)
    KEYWORD_EXIT    reduce using rule 9 (statement_list -> statement_list statement .)
    KEYWORD_INT     reduce using rule 9 (statement_list -> statement_list statement .)
    KEYWORD_FLOAT   reduce using rule 9 (statement_list -> statement_list statement .)
    KEYWORD_CHAR    reduce using rule 9 (statement_list -> statement_list statement .)
    KEYWORD_VOID    reduce using rule 9 (statement_list -> statement_list statement .)
    KEYWORD_STRING  reduce using rule 9 (statement_list -> statement_list statement .)
    KEYWORD_BOOL    reduce using rule 9 (statement_list -> statement_list statement .)
    KEYWORD_FILE    reduce using rule 9 (statement_list -> statement_list statement .)
    KEYWORD_SOCKET  reduce using rule 9 (statement_list -> statement_list statement .)
    KEYWORD_DICT    reduce using rule 9 (statement_list -> statement_list statement .)
    $end            reduce using rule 9 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 9 (statement_list -> statement_list statement .)
    KEYWORD_CASE    reduce using rule 9 (statement_list -> statement_list statement .)
    KEYWORD_DEFAULT reduce using rule 9 (statement_list -> statement_list statement .)


state 44

    (29) declaration_statement -> type_specifier IDENTIFIER . SEMICOLON
    (30) declaration_statement -> type_specifier IDENTIFIER . ASSIGN expression SEMICOLON
    (31) declaration_statement -> type_specifier IDENTIFIER . LBRACKET expression RBRACKET SEMICOLON
    (32) declaration_statement -> type_specifier IDENTIFIER . LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> type_specifier IDENTIFIER . LBRACKET RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> type_specifier IDENTIFIER . LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> type_specifier IDENTIFIER . LBRACKET RBRACKET SEMICOLON
    (2) function_definition -> type_specifier IDENTIFIER . LPAREN params RPAREN block_statement

    SEMICOLON       shift and go to state 84
    ASSIGN          shift and go to state 85
    LBRACKET        shift and go to state 86
    LPAREN          shift and go to state 87


state 45

    (68) function_call -> IDENTIFIER LPAREN . argument_list RPAREN
    (69) function_call -> IDENTIFIER LPAREN . RPAREN
    (74) argument_list -> . expression
    (75) argument_list -> . argument_list COMMA expression
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    RPAREN          shift and go to state 89
    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    argument_list                  shift and go to state 88
    expression                     shift and go to state 90
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 46

    (122) subscript_access -> IDENTIFIER LBRACKET . expression RBRACKET
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression                     shift and go to state 91
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 47

    (48) assignment_statement -> left_hand_side ASSIGN . expression SEMICOLON
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression                     shift and go to state 92
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 48

    (52) if_statement -> KEYWORD_IF LPAREN . expression RPAREN statement
    (53) if_statement -> KEYWORD_IF LPAREN . expression RPAREN statement KEYWORD_ELSE statement
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression                     shift and go to state 93
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 49

    (54) while_statement -> KEYWORD_WHILE LPAREN . expression RPAREN statement
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression                     shift and go to state 94
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 50

    (22) do_while_statement -> KEYWORD_DO statement . KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON

    KEYWORD_WHILE   shift and go to state 95


state 51

    (55) for_statement -> KEYWORD_FOR LPAREN . for_init expression_opt SEMICOLON expression_opt RPAREN statement
    (56) for_init -> . assignment_statement_no_semi SEMICOLON
    (57) for_init -> . declaration_statement
    (58) for_init -> . SEMICOLON
    (51) assignment_statement_no_semi -> . left_hand_side ASSIGN expression
    (29) declaration_statement -> . type_specifier IDENTIFIER SEMICOLON
    (30) declaration_statement -> . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (31) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON
    (32) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (49) left_hand_side -> . IDENTIFIER
    (50) left_hand_side -> . subscript_access
    (36) type_specifier -> . primitive_type
    (37) type_specifier -> . array_type
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (38) primitive_type -> . KEYWORD_INT
    (39) primitive_type -> . KEYWORD_FLOAT
    (40) primitive_type -> . KEYWORD_CHAR
    (41) primitive_type -> . KEYWORD_VOID
    (42) primitive_type -> . KEYWORD_STRING
    (43) primitive_type -> . KEYWORD_BOOL
    (44) primitive_type -> . KEYWORD_FILE
    (45) primitive_type -> . KEYWORD_SOCKET
    (46) primitive_type -> . KEYWORD_DICT
    (47) array_type -> . primitive_type LBRACKET RBRACKET

    SEMICOLON       shift and go to state 97
    IDENTIFIER      shift and go to state 102
    KEYWORD_INT     shift and go to state 34
    KEYWORD_FLOAT   shift and go to state 35
    KEYWORD_CHAR    shift and go to state 36
    KEYWORD_VOID    shift and go to state 37
    KEYWORD_STRING  shift and go to state 38
    KEYWORD_BOOL    shift and go to state 39
    KEYWORD_FILE    shift and go to state 40
    KEYWORD_SOCKET  shift and go to state 41
    KEYWORD_DICT    shift and go to state 42

    for_init                       shift and go to state 96
    assignment_statement_no_semi   shift and go to state 98
    declaration_statement          shift and go to state 99
    left_hand_side                 shift and go to state 100
    type_specifier                 shift and go to state 101
    subscript_access               shift and go to state 30
    primitive_type                 shift and go to state 28
    array_type                     shift and go to state 29

state 52

    (23) switch_statement -> KEYWORD_SWITCH LPAREN . expression RPAREN LBRACE case_list RBRACE
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression                     shift and go to state 103
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 53

    (76) block_statement -> LBRACE RBRACE .

    KEYWORD_IF      reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_WHILE   reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_DO      reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_FOR     reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_SWITCH  reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_BREAK   reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_RETURN  reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    SYSTEM_INPUT    reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    SYSTEM_OUTPUT   reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_EXIT    reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_INT     reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_FLOAT   reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_CHAR    reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_VOID    reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_STRING  reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_BOOL    reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_FILE    reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_SOCKET  reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_DICT    reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    $end            reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_ELSE    reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_CASE    reduce using rule 76 (block_statement -> LBRACE RBRACE .)
    KEYWORD_DEFAULT reduce using rule 76 (block_statement -> LBRACE RBRACE .)


state 54

    (77) block_statement -> LBRACE statement_list . RBRACE
    (9) statement_list -> statement_list . statement
    (10) statement -> . declaration_statement
    (11) statement -> . assignment_statement
    (12) statement -> . if_statement
    (13) statement -> . while_statement
    (14) statement -> . do_while_statement
    (15) statement -> . for_statement
    (16) statement -> . switch_statement
    (17) statement -> . break_statement
    (18) statement -> . return_statement
    (19) statement -> . function_call_statement
    (20) statement -> . block_statement
    (21) statement -> . function_definition
    (29) declaration_statement -> . type_specifier IDENTIFIER SEMICOLON
    (30) declaration_statement -> . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (31) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON
    (32) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (48) assignment_statement -> . left_hand_side ASSIGN expression SEMICOLON
    (52) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (53) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement
    (54) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (22) do_while_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (55) for_statement -> . KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement
    (23) switch_statement -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE
    (28) break_statement -> . KEYWORD_BREAK SEMICOLON
    (65) return_statement -> . KEYWORD_RETURN SEMICOLON
    (66) return_statement -> . KEYWORD_RETURN expression SEMICOLON
    (67) function_call_statement -> . function_call SEMICOLON
    (76) block_statement -> . LBRACE RBRACE
    (77) block_statement -> . LBRACE statement_list RBRACE
    (2) function_definition -> . type_specifier IDENTIFIER LPAREN params RPAREN block_statement
    (36) type_specifier -> . primitive_type
    (37) type_specifier -> . array_type
    (49) left_hand_side -> . IDENTIFIER
    (50) left_hand_side -> . subscript_access
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (38) primitive_type -> . KEYWORD_INT
    (39) primitive_type -> . KEYWORD_FLOAT
    (40) primitive_type -> . KEYWORD_CHAR
    (41) primitive_type -> . KEYWORD_VOID
    (42) primitive_type -> . KEYWORD_STRING
    (43) primitive_type -> . KEYWORD_BOOL
    (44) primitive_type -> . KEYWORD_FILE
    (45) primitive_type -> . KEYWORD_SOCKET
    (46) primitive_type -> . KEYWORD_DICT
    (47) array_type -> . primitive_type LBRACKET RBRACKET
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET

    RBRACE          shift and go to state 104
    KEYWORD_IF      shift and go to state 19
    KEYWORD_WHILE   shift and go to state 20
    KEYWORD_DO      shift and go to state 21
    KEYWORD_FOR     shift and go to state 22
    KEYWORD_SWITCH  shift and go to state 23
    KEYWORD_BREAK   shift and go to state 25
    KEYWORD_RETURN  shift and go to state 26
    LBRACE          shift and go to state 24
    IDENTIFIER      shift and go to state 17
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    KEYWORD_INT     shift and go to state 34
    KEYWORD_FLOAT   shift and go to state 35
    KEYWORD_CHAR    shift and go to state 36
    KEYWORD_VOID    shift and go to state 37
    KEYWORD_STRING  shift and go to state 38
    KEYWORD_BOOL    shift and go to state 39
    KEYWORD_FILE    shift and go to state 40
    KEYWORD_SOCKET  shift and go to state 41
    KEYWORD_DICT    shift and go to state 42

    statement                      shift and go to state 43
    declaration_statement          shift and go to state 4
    assignment_statement           shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    do_while_statement             shift and go to state 8
    for_statement                  shift and go to state 9
    switch_statement               shift and go to state 10
    break_statement                shift and go to state 11
    return_statement               shift and go to state 12
    function_call_statement        shift and go to state 13
    block_statement                shift and go to state 14
    function_definition            shift and go to state 15
    type_specifier                 shift and go to state 16
    left_hand_side                 shift and go to state 18
    function_call                  shift and go to state 27
    primitive_type                 shift and go to state 28
    array_type                     shift and go to state 29
    subscript_access               shift and go to state 30

state 55

    (28) break_statement -> KEYWORD_BREAK SEMICOLON .

    KEYWORD_IF      reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_DO      reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_FOR     reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    LBRACE          reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    SYSTEM_INPUT    reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    SYSTEM_OUTPUT   reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_EXIT    reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_INT     reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_FLOAT   reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_CHAR    reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_VOID    reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_STRING  reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_BOOL    reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_FILE    reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_SOCKET  reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_DICT    reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    $end            reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    RBRACE          reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_CASE    reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 28 (break_statement -> KEYWORD_BREAK SEMICOLON .)


state 56

    (65) return_statement -> KEYWORD_RETURN SEMICOLON .

    KEYWORD_IF      reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_DO      reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_FOR     reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    LBRACE          reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    SYSTEM_INPUT    reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    SYSTEM_OUTPUT   reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_EXIT    reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_INT     reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_FLOAT   reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_CHAR    reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_VOID    reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_STRING  reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_BOOL    reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_FILE    reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_SOCKET  reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_DICT    reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    $end            reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    RBRACE          reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_CASE    reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 65 (return_statement -> KEYWORD_RETURN SEMICOLON .)


state 57

    (66) return_statement -> KEYWORD_RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 105


state 58

    (83) expression -> logical_expression .
    (85) logical_expression -> logical_expression . AND equality_expression
    (86) logical_expression -> logical_expression . OR equality_expression

    SEMICOLON       reduce using rule 83 (expression -> logical_expression .)
    RPAREN          reduce using rule 83 (expression -> logical_expression .)
    COMMA           reduce using rule 83 (expression -> logical_expression .)
    RBRACKET        reduce using rule 83 (expression -> logical_expression .)
    COLON           reduce using rule 83 (expression -> logical_expression .)
    RBRACE          reduce using rule 83 (expression -> logical_expression .)
    AND             shift and go to state 106
    OR              shift and go to state 107


state 59

    (84) logical_expression -> equality_expression .
    (88) equality_expression -> equality_expression . EQ relational_expression
    (89) equality_expression -> equality_expression . NEQ relational_expression

    AND             reduce using rule 84 (logical_expression -> equality_expression .)
    OR              reduce using rule 84 (logical_expression -> equality_expression .)
    SEMICOLON       reduce using rule 84 (logical_expression -> equality_expression .)
    RPAREN          reduce using rule 84 (logical_expression -> equality_expression .)
    COMMA           reduce using rule 84 (logical_expression -> equality_expression .)
    RBRACKET        reduce using rule 84 (logical_expression -> equality_expression .)
    COLON           reduce using rule 84 (logical_expression -> equality_expression .)
    RBRACE          reduce using rule 84 (logical_expression -> equality_expression .)
    EQ              shift and go to state 108
    NEQ             shift and go to state 109


state 60

    (87) equality_expression -> relational_expression .
    (91) relational_expression -> relational_expression . GT additive_expression
    (92) relational_expression -> relational_expression . LT additive_expression
    (93) relational_expression -> relational_expression . GEQ additive_expression
    (94) relational_expression -> relational_expression . LEQ additive_expression

    EQ              reduce using rule 87 (equality_expression -> relational_expression .)
    NEQ             reduce using rule 87 (equality_expression -> relational_expression .)
    AND             reduce using rule 87 (equality_expression -> relational_expression .)
    OR              reduce using rule 87 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 87 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 87 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 87 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 87 (equality_expression -> relational_expression .)
    COLON           reduce using rule 87 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 87 (equality_expression -> relational_expression .)
    GT              shift and go to state 110
    LT              shift and go to state 111
    GEQ             shift and go to state 112
    LEQ             shift and go to state 113


state 61

    (90) relational_expression -> additive_expression .
    (96) additive_expression -> additive_expression . PLUS multiplicative_expression
    (97) additive_expression -> additive_expression . MINUS multiplicative_expression

    GT              reduce using rule 90 (relational_expression -> additive_expression .)
    LT              reduce using rule 90 (relational_expression -> additive_expression .)
    GEQ             reduce using rule 90 (relational_expression -> additive_expression .)
    LEQ             reduce using rule 90 (relational_expression -> additive_expression .)
    EQ              reduce using rule 90 (relational_expression -> additive_expression .)
    NEQ             reduce using rule 90 (relational_expression -> additive_expression .)
    AND             reduce using rule 90 (relational_expression -> additive_expression .)
    OR              reduce using rule 90 (relational_expression -> additive_expression .)
    SEMICOLON       reduce using rule 90 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 90 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 90 (relational_expression -> additive_expression .)
    RBRACKET        reduce using rule 90 (relational_expression -> additive_expression .)
    COLON           reduce using rule 90 (relational_expression -> additive_expression .)
    RBRACE          reduce using rule 90 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 115


state 62

    (95) additive_expression -> multiplicative_expression .
    (99) multiplicative_expression -> multiplicative_expression . MUL unary_expression
    (100) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (101) multiplicative_expression -> multiplicative_expression . MOD unary_expression

    PLUS            reduce using rule 95 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 95 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 95 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 95 (additive_expression -> multiplicative_expression .)
    GEQ             reduce using rule 95 (additive_expression -> multiplicative_expression .)
    LEQ             reduce using rule 95 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 95 (additive_expression -> multiplicative_expression .)
    NEQ             reduce using rule 95 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 95 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 95 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 95 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 95 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 95 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 95 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 95 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 95 (additive_expression -> multiplicative_expression .)
    MUL             shift and go to state 116
    DIV             shift and go to state 117
    MOD             shift and go to state 118


state 63

    (103) unary_expression -> MINUS . unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    unary_expression               shift and go to state 119
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 64

    (98) multiplicative_expression -> unary_expression .

    MUL             reduce using rule 98 (multiplicative_expression -> unary_expression .)
    DIV             reduce using rule 98 (multiplicative_expression -> unary_expression .)
    MOD             reduce using rule 98 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 98 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 98 (multiplicative_expression -> unary_expression .)
    GT              reduce using rule 98 (multiplicative_expression -> unary_expression .)
    LT              reduce using rule 98 (multiplicative_expression -> unary_expression .)
    GEQ             reduce using rule 98 (multiplicative_expression -> unary_expression .)
    LEQ             reduce using rule 98 (multiplicative_expression -> unary_expression .)
    EQ              reduce using rule 98 (multiplicative_expression -> unary_expression .)
    NEQ             reduce using rule 98 (multiplicative_expression -> unary_expression .)
    AND             reduce using rule 98 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 98 (multiplicative_expression -> unary_expression .)
    SEMICOLON       reduce using rule 98 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 98 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 98 (multiplicative_expression -> unary_expression .)
    RBRACKET        reduce using rule 98 (multiplicative_expression -> unary_expression .)
    COLON           reduce using rule 98 (multiplicative_expression -> unary_expression .)
    RBRACE          reduce using rule 98 (multiplicative_expression -> unary_expression .)


state 65

    (102) unary_expression -> primary_expression .

    MUL             reduce using rule 102 (unary_expression -> primary_expression .)
    DIV             reduce using rule 102 (unary_expression -> primary_expression .)
    MOD             reduce using rule 102 (unary_expression -> primary_expression .)
    PLUS            reduce using rule 102 (unary_expression -> primary_expression .)
    MINUS           reduce using rule 102 (unary_expression -> primary_expression .)
    GT              reduce using rule 102 (unary_expression -> primary_expression .)
    LT              reduce using rule 102 (unary_expression -> primary_expression .)
    GEQ             reduce using rule 102 (unary_expression -> primary_expression .)
    LEQ             reduce using rule 102 (unary_expression -> primary_expression .)
    EQ              reduce using rule 102 (unary_expression -> primary_expression .)
    NEQ             reduce using rule 102 (unary_expression -> primary_expression .)
    AND             reduce using rule 102 (unary_expression -> primary_expression .)
    OR              reduce using rule 102 (unary_expression -> primary_expression .)
    SEMICOLON       reduce using rule 102 (unary_expression -> primary_expression .)
    RPAREN          reduce using rule 102 (unary_expression -> primary_expression .)
    COMMA           reduce using rule 102 (unary_expression -> primary_expression .)
    RBRACKET        reduce using rule 102 (unary_expression -> primary_expression .)
    COLON           reduce using rule 102 (unary_expression -> primary_expression .)
    RBRACE          reduce using rule 102 (unary_expression -> primary_expression .)


state 66

    (104) primary_expression -> IDENTIFIER .
    (68) function_call -> IDENTIFIER . LPAREN argument_list RPAREN
    (69) function_call -> IDENTIFIER . LPAREN RPAREN
    (122) subscript_access -> IDENTIFIER . LBRACKET expression RBRACKET

    MUL             reduce using rule 104 (primary_expression -> IDENTIFIER .)
    DIV             reduce using rule 104 (primary_expression -> IDENTIFIER .)
    MOD             reduce using rule 104 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 104 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 104 (primary_expression -> IDENTIFIER .)
    GT              reduce using rule 104 (primary_expression -> IDENTIFIER .)
    LT              reduce using rule 104 (primary_expression -> IDENTIFIER .)
    GEQ             reduce using rule 104 (primary_expression -> IDENTIFIER .)
    LEQ             reduce using rule 104 (primary_expression -> IDENTIFIER .)
    EQ              reduce using rule 104 (primary_expression -> IDENTIFIER .)
    NEQ             reduce using rule 104 (primary_expression -> IDENTIFIER .)
    AND             reduce using rule 104 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 104 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 104 (primary_expression -> IDENTIFIER .)
    RPAREN          reduce using rule 104 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 104 (primary_expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 104 (primary_expression -> IDENTIFIER .)
    COLON           reduce using rule 104 (primary_expression -> IDENTIFIER .)
    RBRACE          reduce using rule 104 (primary_expression -> IDENTIFIER .)
    LPAREN          shift and go to state 45
    LBRACKET        shift and go to state 46


state 67

    (105) primary_expression -> INT_LITERAL .

    MUL             reduce using rule 105 (primary_expression -> INT_LITERAL .)
    DIV             reduce using rule 105 (primary_expression -> INT_LITERAL .)
    MOD             reduce using rule 105 (primary_expression -> INT_LITERAL .)
    PLUS            reduce using rule 105 (primary_expression -> INT_LITERAL .)
    MINUS           reduce using rule 105 (primary_expression -> INT_LITERAL .)
    GT              reduce using rule 105 (primary_expression -> INT_LITERAL .)
    LT              reduce using rule 105 (primary_expression -> INT_LITERAL .)
    GEQ             reduce using rule 105 (primary_expression -> INT_LITERAL .)
    LEQ             reduce using rule 105 (primary_expression -> INT_LITERAL .)
    EQ              reduce using rule 105 (primary_expression -> INT_LITERAL .)
    NEQ             reduce using rule 105 (primary_expression -> INT_LITERAL .)
    AND             reduce using rule 105 (primary_expression -> INT_LITERAL .)
    OR              reduce using rule 105 (primary_expression -> INT_LITERAL .)
    SEMICOLON       reduce using rule 105 (primary_expression -> INT_LITERAL .)
    RPAREN          reduce using rule 105 (primary_expression -> INT_LITERAL .)
    COMMA           reduce using rule 105 (primary_expression -> INT_LITERAL .)
    RBRACKET        reduce using rule 105 (primary_expression -> INT_LITERAL .)
    COLON           reduce using rule 105 (primary_expression -> INT_LITERAL .)
    RBRACE          reduce using rule 105 (primary_expression -> INT_LITERAL .)


state 68

    (106) primary_expression -> FLOAT_LITERAL .

    MUL             reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)
    DIV             reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)
    MOD             reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)
    PLUS            reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)
    MINUS           reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)
    GT              reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)
    LT              reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)
    GEQ             reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)
    LEQ             reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)
    EQ              reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)
    NEQ             reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)
    AND             reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)
    OR              reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)
    SEMICOLON       reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)
    RPAREN          reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)
    COMMA           reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)
    RBRACKET        reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)
    COLON           reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)
    RBRACE          reduce using rule 106 (primary_expression -> FLOAT_LITERAL .)


state 69

    (107) primary_expression -> STRING_LITERAL .

    MUL             reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    DIV             reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    MOD             reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    PLUS            reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    MINUS           reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    GT              reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    LT              reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    GEQ             reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    LEQ             reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    EQ              reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    NEQ             reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    AND             reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    OR              reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    COMMA           reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    RBRACKET        reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    COLON           reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    RBRACE          reduce using rule 107 (primary_expression -> STRING_LITERAL .)


state 70

    (108) primary_expression -> CHAR_LITERAL .

    MUL             reduce using rule 108 (primary_expression -> CHAR_LITERAL .)
    DIV             reduce using rule 108 (primary_expression -> CHAR_LITERAL .)
    MOD             reduce using rule 108 (primary_expression -> CHAR_LITERAL .)
    PLUS            reduce using rule 108 (primary_expression -> CHAR_LITERAL .)
    MINUS           reduce using rule 108 (primary_expression -> CHAR_LITERAL .)
    GT              reduce using rule 108 (primary_expression -> CHAR_LITERAL .)
    LT              reduce using rule 108 (primary_expression -> CHAR_LITERAL .)
    GEQ             reduce using rule 108 (primary_expression -> CHAR_LITERAL .)
    LEQ             reduce using rule 108 (primary_expression -> CHAR_LITERAL .)
    EQ              reduce using rule 108 (primary_expression -> CHAR_LITERAL .)
    NEQ             reduce using rule 108 (primary_expression -> CHAR_LITERAL .)
    AND             reduce using rule 108 (primary_expression -> CHAR_LITERAL .)
    OR              reduce using rule 108 (primary_expression -> CHAR_LITERAL .)
    SEMICOLON       reduce using rule 108 (primary_expression -> CHAR_LITERAL .)
    RPAREN          reduce using rule 108 (primary_expression -> CHAR_LITERAL .)
    COMMA           reduce using rule 108 (primary_expression -> CHAR_LITERAL .)
    RBRACKET        reduce using rule 108 (primary_expression -> CHAR_LITERAL .)
    COLON           reduce using rule 108 (primary_expression -> CHAR_LITERAL .)
    RBRACE          reduce using rule 108 (primary_expression -> CHAR_LITERAL .)


state 71

    (109) primary_expression -> KEYWORD_TRUE .

    MUL             reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)
    DIV             reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)
    MOD             reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)
    PLUS            reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)
    MINUS           reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)
    GT              reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)
    LT              reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)
    GEQ             reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)
    LEQ             reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)
    EQ              reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)
    NEQ             reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)
    AND             reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)
    OR              reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)
    SEMICOLON       reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)
    RPAREN          reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)
    COMMA           reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)
    RBRACKET        reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)
    COLON           reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)
    RBRACE          reduce using rule 109 (primary_expression -> KEYWORD_TRUE .)


state 72

    (110) primary_expression -> KEYWORD_FALSE .

    MUL             reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)
    DIV             reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)
    MOD             reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)
    PLUS            reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)
    MINUS           reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)
    GT              reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)
    LT              reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)
    GEQ             reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)
    LEQ             reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)
    EQ              reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)
    NEQ             reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)
    AND             reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)
    OR              reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)
    SEMICOLON       reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)
    RPAREN          reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)
    COMMA           reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)
    RBRACKET        reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)
    COLON           reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)
    RBRACE          reduce using rule 110 (primary_expression -> KEYWORD_FALSE .)


state 73

    (111) primary_expression -> KEYWORD_NULL .

    MUL             reduce using rule 111 (primary_expression -> KEYWORD_NULL .)
    DIV             reduce using rule 111 (primary_expression -> KEYWORD_NULL .)
    MOD             reduce using rule 111 (primary_expression -> KEYWORD_NULL .)
    PLUS            reduce using rule 111 (primary_expression -> KEYWORD_NULL .)
    MINUS           reduce using rule 111 (primary_expression -> KEYWORD_NULL .)
    GT              reduce using rule 111 (primary_expression -> KEYWORD_NULL .)
    LT              reduce using rule 111 (primary_expression -> KEYWORD_NULL .)
    GEQ             reduce using rule 111 (primary_expression -> KEYWORD_NULL .)
    LEQ             reduce using rule 111 (primary_expression -> KEYWORD_NULL .)
    EQ              reduce using rule 111 (primary_expression -> KEYWORD_NULL .)
    NEQ             reduce using rule 111 (primary_expression -> KEYWORD_NULL .)
    AND             reduce using rule 111 (primary_expression -> KEYWORD_NULL .)
    OR              reduce using rule 111 (primary_expression -> KEYWORD_NULL .)
    SEMICOLON       reduce using rule 111 (primary_expression -> KEYWORD_NULL .)
    RPAREN          reduce using rule 111 (primary_expression -> KEYWORD_NULL .)
    COMMA           reduce using rule 111 (primary_expression -> KEYWORD_NULL .)
    RBRACKET        reduce using rule 111 (primary_expression -> KEYWORD_NULL .)
    COLON           reduce using rule 111 (primary_expression -> KEYWORD_NULL .)
    RBRACE          reduce using rule 111 (primary_expression -> KEYWORD_NULL .)


state 74

    (112) primary_expression -> LPAREN . expression RPAREN
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression                     shift and go to state 120
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 75

    (113) primary_expression -> function_call .

    MUL             reduce using rule 113 (primary_expression -> function_call .)
    DIV             reduce using rule 113 (primary_expression -> function_call .)
    MOD             reduce using rule 113 (primary_expression -> function_call .)
    PLUS            reduce using rule 113 (primary_expression -> function_call .)
    MINUS           reduce using rule 113 (primary_expression -> function_call .)
    GT              reduce using rule 113 (primary_expression -> function_call .)
    LT              reduce using rule 113 (primary_expression -> function_call .)
    GEQ             reduce using rule 113 (primary_expression -> function_call .)
    LEQ             reduce using rule 113 (primary_expression -> function_call .)
    EQ              reduce using rule 113 (primary_expression -> function_call .)
    NEQ             reduce using rule 113 (primary_expression -> function_call .)
    AND             reduce using rule 113 (primary_expression -> function_call .)
    OR              reduce using rule 113 (primary_expression -> function_call .)
    SEMICOLON       reduce using rule 113 (primary_expression -> function_call .)
    RPAREN          reduce using rule 113 (primary_expression -> function_call .)
    COMMA           reduce using rule 113 (primary_expression -> function_call .)
    RBRACKET        reduce using rule 113 (primary_expression -> function_call .)
    COLON           reduce using rule 113 (primary_expression -> function_call .)
    RBRACE          reduce using rule 113 (primary_expression -> function_call .)


state 76

    (114) primary_expression -> subscript_access .

    MUL             reduce using rule 114 (primary_expression -> subscript_access .)
    DIV             reduce using rule 114 (primary_expression -> subscript_access .)
    MOD             reduce using rule 114 (primary_expression -> subscript_access .)
    PLUS            reduce using rule 114 (primary_expression -> subscript_access .)
    MINUS           reduce using rule 114 (primary_expression -> subscript_access .)
    GT              reduce using rule 114 (primary_expression -> subscript_access .)
    LT              reduce using rule 114 (primary_expression -> subscript_access .)
    GEQ             reduce using rule 114 (primary_expression -> subscript_access .)
    LEQ             reduce using rule 114 (primary_expression -> subscript_access .)
    EQ              reduce using rule 114 (primary_expression -> subscript_access .)
    NEQ             reduce using rule 114 (primary_expression -> subscript_access .)
    AND             reduce using rule 114 (primary_expression -> subscript_access .)
    OR              reduce using rule 114 (primary_expression -> subscript_access .)
    SEMICOLON       reduce using rule 114 (primary_expression -> subscript_access .)
    RPAREN          reduce using rule 114 (primary_expression -> subscript_access .)
    COMMA           reduce using rule 114 (primary_expression -> subscript_access .)
    RBRACKET        reduce using rule 114 (primary_expression -> subscript_access .)
    COLON           reduce using rule 114 (primary_expression -> subscript_access .)
    RBRACE          reduce using rule 114 (primary_expression -> subscript_access .)


state 77

    (115) primary_expression -> dictionary_literal .

    MUL             reduce using rule 115 (primary_expression -> dictionary_literal .)
    DIV             reduce using rule 115 (primary_expression -> dictionary_literal .)
    MOD             reduce using rule 115 (primary_expression -> dictionary_literal .)
    PLUS            reduce using rule 115 (primary_expression -> dictionary_literal .)
    MINUS           reduce using rule 115 (primary_expression -> dictionary_literal .)
    GT              reduce using rule 115 (primary_expression -> dictionary_literal .)
    LT              reduce using rule 115 (primary_expression -> dictionary_literal .)
    GEQ             reduce using rule 115 (primary_expression -> dictionary_literal .)
    LEQ             reduce using rule 115 (primary_expression -> dictionary_literal .)
    EQ              reduce using rule 115 (primary_expression -> dictionary_literal .)
    NEQ             reduce using rule 115 (primary_expression -> dictionary_literal .)
    AND             reduce using rule 115 (primary_expression -> dictionary_literal .)
    OR              reduce using rule 115 (primary_expression -> dictionary_literal .)
    SEMICOLON       reduce using rule 115 (primary_expression -> dictionary_literal .)
    RPAREN          reduce using rule 115 (primary_expression -> dictionary_literal .)
    COMMA           reduce using rule 115 (primary_expression -> dictionary_literal .)
    RBRACKET        reduce using rule 115 (primary_expression -> dictionary_literal .)
    COLON           reduce using rule 115 (primary_expression -> dictionary_literal .)
    RBRACE          reduce using rule 115 (primary_expression -> dictionary_literal .)


state 78

    (116) dictionary_literal -> LBRACE . key_value_list_opt RBRACE
    (117) key_value_list_opt -> . key_value_list
    (118) key_value_list_opt -> . empty
    (119) key_value_list -> . key_value
    (120) key_value_list -> . key_value_list COMMA key_value
    (64) empty -> .
    (121) key_value -> . expression COLON expression
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    RBRACE          reduce using rule 64 (empty -> .)
    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    key_value_list_opt             shift and go to state 121
    key_value_list                 shift and go to state 122
    empty                          shift and go to state 123
    key_value                      shift and go to state 124
    expression                     shift and go to state 125
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 79

    (67) function_call_statement -> function_call SEMICOLON .

    KEYWORD_IF      reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_DO      reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_FOR     reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    LBRACE          reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    IDENTIFIER      reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    SYSTEM_INPUT    reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    SYSTEM_OUTPUT   reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_EXIT    reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_INT     reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_FLOAT   reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_CHAR    reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_VOID    reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_STRING  reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_BOOL    reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_FILE    reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_SOCKET  reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_DICT    reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    $end            reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    RBRACE          reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_CASE    reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 67 (function_call_statement -> function_call SEMICOLON .)


state 80

    (47) array_type -> primitive_type LBRACKET . RBRACKET

    RBRACKET        shift and go to state 126


state 81

    (70) function_call -> SYSTEM_INPUT LPAREN . IDENTIFIER COMMA type_specifier RPAREN

    IDENTIFIER      shift and go to state 127


state 82

    (71) function_call -> SYSTEM_OUTPUT LPAREN . expression COMMA type_specifier RPAREN
    (72) function_call -> SYSTEM_OUTPUT LPAREN . expression COMMA type_specifier COMMA expression RPAREN
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression                     shift and go to state 128
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 83

    (73) function_call -> KEYWORD_EXIT LPAREN . RPAREN

    RPAREN          shift and go to state 129


state 84

    (29) declaration_statement -> type_specifier IDENTIFIER SEMICOLON .

    KEYWORD_IF      reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_DO      reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_FOR     reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    SYSTEM_INPUT    reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    SYSTEM_OUTPUT   reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_EXIT    reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_INT     reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_FLOAT   reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_CHAR    reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_VOID    reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_STRING  reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_BOOL    reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_FILE    reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_SOCKET  reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_DICT    reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    $end            reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    INT_LITERAL     reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    FLOAT_LITERAL   reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    STRING_LITERAL  reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    CHAR_LITERAL    reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_TRUE    reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_FALSE   reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_NULL    reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_CASE    reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 29 (declaration_statement -> type_specifier IDENTIFIER SEMICOLON .)


state 85

    (30) declaration_statement -> type_specifier IDENTIFIER ASSIGN . expression SEMICOLON
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression                     shift and go to state 130
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 86

    (31) declaration_statement -> type_specifier IDENTIFIER LBRACKET . expression RBRACKET SEMICOLON
    (32) declaration_statement -> type_specifier IDENTIFIER LBRACKET . RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> type_specifier IDENTIFIER LBRACKET . RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> type_specifier IDENTIFIER LBRACKET . expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> type_specifier IDENTIFIER LBRACKET . RBRACKET SEMICOLON
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    RBRACKET        shift and go to state 132
    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression                     shift and go to state 131
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 87

    (2) function_definition -> type_specifier IDENTIFIER LPAREN . params RPAREN block_statement
    (3) params -> . param_list
    (4) params -> . empty
    (5) param_list -> . param
    (6) param_list -> . param_list COMMA param
    (64) empty -> .
    (7) param -> . type_specifier IDENTIFIER
    (36) type_specifier -> . primitive_type
    (37) type_specifier -> . array_type
    (38) primitive_type -> . KEYWORD_INT
    (39) primitive_type -> . KEYWORD_FLOAT
    (40) primitive_type -> . KEYWORD_CHAR
    (41) primitive_type -> . KEYWORD_VOID
    (42) primitive_type -> . KEYWORD_STRING
    (43) primitive_type -> . KEYWORD_BOOL
    (44) primitive_type -> . KEYWORD_FILE
    (45) primitive_type -> . KEYWORD_SOCKET
    (46) primitive_type -> . KEYWORD_DICT
    (47) array_type -> . primitive_type LBRACKET RBRACKET

    RPAREN          reduce using rule 64 (empty -> .)
    KEYWORD_INT     shift and go to state 34
    KEYWORD_FLOAT   shift and go to state 35
    KEYWORD_CHAR    shift and go to state 36
    KEYWORD_VOID    shift and go to state 37
    KEYWORD_STRING  shift and go to state 38
    KEYWORD_BOOL    shift and go to state 39
    KEYWORD_FILE    shift and go to state 40
    KEYWORD_SOCKET  shift and go to state 41
    KEYWORD_DICT    shift and go to state 42

    type_specifier                 shift and go to state 133
    params                         shift and go to state 134
    param_list                     shift and go to state 135
    empty                          shift and go to state 136
    param                          shift and go to state 137
    primitive_type                 shift and go to state 28
    array_type                     shift and go to state 29

state 88

    (68) function_call -> IDENTIFIER LPAREN argument_list . RPAREN
    (75) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 138
    COMMA           shift and go to state 139


state 89

    (69) function_call -> IDENTIFIER LPAREN RPAREN .

    SEMICOLON       reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)
    MUL             reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)
    DIV             reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)
    MOD             reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)
    PLUS            reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)
    MINUS           reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)
    GT              reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)
    LT              reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)
    GEQ             reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)
    LEQ             reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)
    EQ              reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)
    NEQ             reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)
    AND             reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)
    OR              reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)
    RPAREN          reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)
    COMMA           reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)
    RBRACKET        reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)
    COLON           reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)
    RBRACE          reduce using rule 69 (function_call -> IDENTIFIER LPAREN RPAREN .)


state 90

    (74) argument_list -> expression .

    RPAREN          reduce using rule 74 (argument_list -> expression .)
    COMMA           reduce using rule 74 (argument_list -> expression .)


state 91

    (122) subscript_access -> IDENTIFIER LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 140


state 92

    (48) assignment_statement -> left_hand_side ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 141


state 93

    (52) if_statement -> KEYWORD_IF LPAREN expression . RPAREN statement
    (53) if_statement -> KEYWORD_IF LPAREN expression . RPAREN statement KEYWORD_ELSE statement

    RPAREN          shift and go to state 142


state 94

    (54) while_statement -> KEYWORD_WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 143


state 95

    (22) do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 144


state 96

    (55) for_statement -> KEYWORD_FOR LPAREN for_init . expression_opt SEMICOLON expression_opt RPAREN statement
    (61) expression_opt -> . expression
    (62) expression_opt -> . assignment_statement_no_semi
    (63) expression_opt -> . empty
    (83) expression -> . logical_expression
    (51) assignment_statement_no_semi -> . left_hand_side ASSIGN expression
    (64) empty -> .
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (49) left_hand_side -> . IDENTIFIER
    (50) left_hand_side -> . subscript_access
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    SEMICOLON       reduce using rule 64 (empty -> .)
    IDENTIFIER      shift and go to state 149
    MINUS           shift and go to state 63
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression_opt                 shift and go to state 145
    expression                     shift and go to state 146
    assignment_statement_no_semi   shift and go to state 147
    empty                          shift and go to state 148
    logical_expression             shift and go to state 58
    left_hand_side                 shift and go to state 100
    equality_expression            shift and go to state 59
    subscript_access               shift and go to state 150
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    dictionary_literal             shift and go to state 77

state 97

    (58) for_init -> SEMICOLON .

    IDENTIFIER      reduce using rule 58 (for_init -> SEMICOLON .)
    MINUS           reduce using rule 58 (for_init -> SEMICOLON .)
    INT_LITERAL     reduce using rule 58 (for_init -> SEMICOLON .)
    FLOAT_LITERAL   reduce using rule 58 (for_init -> SEMICOLON .)
    STRING_LITERAL  reduce using rule 58 (for_init -> SEMICOLON .)
    CHAR_LITERAL    reduce using rule 58 (for_init -> SEMICOLON .)
    KEYWORD_TRUE    reduce using rule 58 (for_init -> SEMICOLON .)
    KEYWORD_FALSE   reduce using rule 58 (for_init -> SEMICOLON .)
    KEYWORD_NULL    reduce using rule 58 (for_init -> SEMICOLON .)
    LPAREN          reduce using rule 58 (for_init -> SEMICOLON .)
    SYSTEM_INPUT    reduce using rule 58 (for_init -> SEMICOLON .)
    SYSTEM_OUTPUT   reduce using rule 58 (for_init -> SEMICOLON .)
    KEYWORD_EXIT    reduce using rule 58 (for_init -> SEMICOLON .)
    LBRACE          reduce using rule 58 (for_init -> SEMICOLON .)
    SEMICOLON       reduce using rule 58 (for_init -> SEMICOLON .)


state 98

    (56) for_init -> assignment_statement_no_semi . SEMICOLON

    SEMICOLON       shift and go to state 151


state 99

    (57) for_init -> declaration_statement .

    IDENTIFIER      reduce using rule 57 (for_init -> declaration_statement .)
    MINUS           reduce using rule 57 (for_init -> declaration_statement .)
    INT_LITERAL     reduce using rule 57 (for_init -> declaration_statement .)
    FLOAT_LITERAL   reduce using rule 57 (for_init -> declaration_statement .)
    STRING_LITERAL  reduce using rule 57 (for_init -> declaration_statement .)
    CHAR_LITERAL    reduce using rule 57 (for_init -> declaration_statement .)
    KEYWORD_TRUE    reduce using rule 57 (for_init -> declaration_statement .)
    KEYWORD_FALSE   reduce using rule 57 (for_init -> declaration_statement .)
    KEYWORD_NULL    reduce using rule 57 (for_init -> declaration_statement .)
    LPAREN          reduce using rule 57 (for_init -> declaration_statement .)
    SYSTEM_INPUT    reduce using rule 57 (for_init -> declaration_statement .)
    SYSTEM_OUTPUT   reduce using rule 57 (for_init -> declaration_statement .)
    KEYWORD_EXIT    reduce using rule 57 (for_init -> declaration_statement .)
    LBRACE          reduce using rule 57 (for_init -> declaration_statement .)
    SEMICOLON       reduce using rule 57 (for_init -> declaration_statement .)


state 100

    (51) assignment_statement_no_semi -> left_hand_side . ASSIGN expression

    ASSIGN          shift and go to state 152


state 101

    (29) declaration_statement -> type_specifier . IDENTIFIER SEMICOLON
    (30) declaration_statement -> type_specifier . IDENTIFIER ASSIGN expression SEMICOLON
    (31) declaration_statement -> type_specifier . IDENTIFIER LBRACKET expression RBRACKET SEMICOLON
    (32) declaration_statement -> type_specifier . IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> type_specifier . IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> type_specifier . IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> type_specifier . IDENTIFIER LBRACKET RBRACKET SEMICOLON

    IDENTIFIER      shift and go to state 153


state 102

    (49) left_hand_side -> IDENTIFIER .
    (122) subscript_access -> IDENTIFIER . LBRACKET expression RBRACKET

    ASSIGN          reduce using rule 49 (left_hand_side -> IDENTIFIER .)
    LBRACKET        shift and go to state 46


state 103

    (23) switch_statement -> KEYWORD_SWITCH LPAREN expression . RPAREN LBRACE case_list RBRACE

    RPAREN          shift and go to state 154


state 104

    (77) block_statement -> LBRACE statement_list RBRACE .

    KEYWORD_IF      reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_WHILE   reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_DO      reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_FOR     reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_SWITCH  reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_BREAK   reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_RETURN  reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    SYSTEM_INPUT    reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    SYSTEM_OUTPUT   reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_EXIT    reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_INT     reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_FLOAT   reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_CHAR    reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_VOID    reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_STRING  reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_BOOL    reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_FILE    reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_SOCKET  reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_DICT    reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_ELSE    reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_CASE    reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)
    KEYWORD_DEFAULT reduce using rule 77 (block_statement -> LBRACE statement_list RBRACE .)


state 105

    (66) return_statement -> KEYWORD_RETURN expression SEMICOLON .

    KEYWORD_IF      reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_DO      reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_FOR     reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    SYSTEM_INPUT    reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    SYSTEM_OUTPUT   reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_EXIT    reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_INT     reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_FLOAT   reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_CHAR    reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_VOID    reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_STRING  reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_BOOL    reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_FILE    reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_SOCKET  reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_DICT    reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    $end            reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_CASE    reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 66 (return_statement -> KEYWORD_RETURN expression SEMICOLON .)


state 106

    (85) logical_expression -> logical_expression AND . equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    equality_expression            shift and go to state 155
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 107

    (86) logical_expression -> logical_expression OR . equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    equality_expression            shift and go to state 156
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 108

    (88) equality_expression -> equality_expression EQ . relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    relational_expression          shift and go to state 157
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 109

    (89) equality_expression -> equality_expression NEQ . relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    relational_expression          shift and go to state 158
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 110

    (91) relational_expression -> relational_expression GT . additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    additive_expression            shift and go to state 159
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 111

    (92) relational_expression -> relational_expression LT . additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    additive_expression            shift and go to state 160
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 112

    (93) relational_expression -> relational_expression GEQ . additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    additive_expression            shift and go to state 161
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 113

    (94) relational_expression -> relational_expression LEQ . additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    additive_expression            shift and go to state 162
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 114

    (96) additive_expression -> additive_expression PLUS . multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    multiplicative_expression      shift and go to state 163
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 115

    (97) additive_expression -> additive_expression MINUS . multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    multiplicative_expression      shift and go to state 164
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 116

    (99) multiplicative_expression -> multiplicative_expression MUL . unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    unary_expression               shift and go to state 165
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 117

    (100) multiplicative_expression -> multiplicative_expression DIV . unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    unary_expression               shift and go to state 166
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 118

    (101) multiplicative_expression -> multiplicative_expression MOD . unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    unary_expression               shift and go to state 167
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 119

    (103) unary_expression -> MINUS unary_expression .

    MUL             reduce using rule 103 (unary_expression -> MINUS unary_expression .)
    DIV             reduce using rule 103 (unary_expression -> MINUS unary_expression .)
    MOD             reduce using rule 103 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 103 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 103 (unary_expression -> MINUS unary_expression .)
    GT              reduce using rule 103 (unary_expression -> MINUS unary_expression .)
    LT              reduce using rule 103 (unary_expression -> MINUS unary_expression .)
    GEQ             reduce using rule 103 (unary_expression -> MINUS unary_expression .)
    LEQ             reduce using rule 103 (unary_expression -> MINUS unary_expression .)
    EQ              reduce using rule 103 (unary_expression -> MINUS unary_expression .)
    NEQ             reduce using rule 103 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 103 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 103 (unary_expression -> MINUS unary_expression .)
    SEMICOLON       reduce using rule 103 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 103 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 103 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 103 (unary_expression -> MINUS unary_expression .)
    COLON           reduce using rule 103 (unary_expression -> MINUS unary_expression .)
    RBRACE          reduce using rule 103 (unary_expression -> MINUS unary_expression .)


state 120

    (112) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 168


state 121

    (116) dictionary_literal -> LBRACE key_value_list_opt . RBRACE

    RBRACE          shift and go to state 169


state 122

    (117) key_value_list_opt -> key_value_list .
    (120) key_value_list -> key_value_list . COMMA key_value

    RBRACE          reduce using rule 117 (key_value_list_opt -> key_value_list .)
    COMMA           shift and go to state 170


state 123

    (118) key_value_list_opt -> empty .

    RBRACE          reduce using rule 118 (key_value_list_opt -> empty .)


state 124

    (119) key_value_list -> key_value .

    COMMA           reduce using rule 119 (key_value_list -> key_value .)
    RBRACE          reduce using rule 119 (key_value_list -> key_value .)


state 125

    (121) key_value -> expression . COLON expression

    COLON           shift and go to state 171


state 126

    (47) array_type -> primitive_type LBRACKET RBRACKET .

    IDENTIFIER      reduce using rule 47 (array_type -> primitive_type LBRACKET RBRACKET .)
    RPAREN          reduce using rule 47 (array_type -> primitive_type LBRACKET RBRACKET .)
    COMMA           reduce using rule 47 (array_type -> primitive_type LBRACKET RBRACKET .)


state 127

    (70) function_call -> SYSTEM_INPUT LPAREN IDENTIFIER . COMMA type_specifier RPAREN

    COMMA           shift and go to state 172


state 128

    (71) function_call -> SYSTEM_OUTPUT LPAREN expression . COMMA type_specifier RPAREN
    (72) function_call -> SYSTEM_OUTPUT LPAREN expression . COMMA type_specifier COMMA expression RPAREN

    COMMA           shift and go to state 173


state 129

    (73) function_call -> KEYWORD_EXIT LPAREN RPAREN .

    SEMICOLON       reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)
    MUL             reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)
    DIV             reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)
    MOD             reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)
    PLUS            reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)
    MINUS           reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)
    GT              reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)
    LT              reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)
    GEQ             reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)
    LEQ             reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)
    EQ              reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)
    NEQ             reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)
    AND             reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)
    OR              reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)
    RPAREN          reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)
    COMMA           reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)
    RBRACKET        reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)
    COLON           reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)
    RBRACE          reduce using rule 73 (function_call -> KEYWORD_EXIT LPAREN RPAREN .)


state 130

    (30) declaration_statement -> type_specifier IDENTIFIER ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 174


state 131

    (31) declaration_statement -> type_specifier IDENTIFIER LBRACKET expression . RBRACKET SEMICOLON
    (34) declaration_statement -> type_specifier IDENTIFIER LBRACKET expression . RBRACKET ASSIGN initializer_list SEMICOLON

    RBRACKET        shift and go to state 175


state 132

    (32) declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET . ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET . ASSIGN expression SEMICOLON
    (35) declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET . SEMICOLON

    ASSIGN          shift and go to state 176
    SEMICOLON       shift and go to state 177


state 133

    (7) param -> type_specifier . IDENTIFIER

    IDENTIFIER      shift and go to state 178


state 134

    (2) function_definition -> type_specifier IDENTIFIER LPAREN params . RPAREN block_statement

    RPAREN          shift and go to state 179


state 135

    (3) params -> param_list .
    (6) param_list -> param_list . COMMA param

    RPAREN          reduce using rule 3 (params -> param_list .)
    COMMA           shift and go to state 180


state 136

    (4) params -> empty .

    RPAREN          reduce using rule 4 (params -> empty .)


state 137

    (5) param_list -> param .

    COMMA           reduce using rule 5 (param_list -> param .)
    RPAREN          reduce using rule 5 (param_list -> param .)


state 138

    (68) function_call -> IDENTIFIER LPAREN argument_list RPAREN .

    SEMICOLON       reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    MUL             reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    DIV             reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    MOD             reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    GT              reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    LT              reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    GEQ             reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    LEQ             reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    EQ              reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    NEQ             reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    AND             reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    OR              reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    RBRACKET        reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    COLON           reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    RBRACE          reduce using rule 68 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)


state 139

    (75) argument_list -> argument_list COMMA . expression
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression                     shift and go to state 181
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 140

    (122) subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .

    ASSIGN          reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    MUL             reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    DIV             reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    MOD             reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    GT              reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    LT              reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    GEQ             reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    LEQ             reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    EQ              reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    AND             reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    OR              reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    COLON           reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 122 (subscript_access -> IDENTIFIER LBRACKET expression RBRACKET .)


state 141

    (48) assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .

    KEYWORD_IF      reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_DO      reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_FOR     reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    LBRACE          reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    SYSTEM_INPUT    reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    SYSTEM_OUTPUT   reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_EXIT    reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_INT     reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_FLOAT   reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_CHAR    reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_VOID    reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_STRING  reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_BOOL    reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_FILE    reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_SOCKET  reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_DICT    reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    $end            reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_CASE    reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 48 (assignment_statement -> left_hand_side ASSIGN expression SEMICOLON .)


state 142

    (52) if_statement -> KEYWORD_IF LPAREN expression RPAREN . statement
    (53) if_statement -> KEYWORD_IF LPAREN expression RPAREN . statement KEYWORD_ELSE statement
    (10) statement -> . declaration_statement
    (11) statement -> . assignment_statement
    (12) statement -> . if_statement
    (13) statement -> . while_statement
    (14) statement -> . do_while_statement
    (15) statement -> . for_statement
    (16) statement -> . switch_statement
    (17) statement -> . break_statement
    (18) statement -> . return_statement
    (19) statement -> . function_call_statement
    (20) statement -> . block_statement
    (21) statement -> . function_definition
    (29) declaration_statement -> . type_specifier IDENTIFIER SEMICOLON
    (30) declaration_statement -> . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (31) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON
    (32) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (48) assignment_statement -> . left_hand_side ASSIGN expression SEMICOLON
    (52) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (53) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement
    (54) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (22) do_while_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (55) for_statement -> . KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement
    (23) switch_statement -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE
    (28) break_statement -> . KEYWORD_BREAK SEMICOLON
    (65) return_statement -> . KEYWORD_RETURN SEMICOLON
    (66) return_statement -> . KEYWORD_RETURN expression SEMICOLON
    (67) function_call_statement -> . function_call SEMICOLON
    (76) block_statement -> . LBRACE RBRACE
    (77) block_statement -> . LBRACE statement_list RBRACE
    (2) function_definition -> . type_specifier IDENTIFIER LPAREN params RPAREN block_statement
    (36) type_specifier -> . primitive_type
    (37) type_specifier -> . array_type
    (49) left_hand_side -> . IDENTIFIER
    (50) left_hand_side -> . subscript_access
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (38) primitive_type -> . KEYWORD_INT
    (39) primitive_type -> . KEYWORD_FLOAT
    (40) primitive_type -> . KEYWORD_CHAR
    (41) primitive_type -> . KEYWORD_VOID
    (42) primitive_type -> . KEYWORD_STRING
    (43) primitive_type -> . KEYWORD_BOOL
    (44) primitive_type -> . KEYWORD_FILE
    (45) primitive_type -> . KEYWORD_SOCKET
    (46) primitive_type -> . KEYWORD_DICT
    (47) array_type -> . primitive_type LBRACKET RBRACKET
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET

    KEYWORD_IF      shift and go to state 19
    KEYWORD_WHILE   shift and go to state 20
    KEYWORD_DO      shift and go to state 21
    KEYWORD_FOR     shift and go to state 22
    KEYWORD_SWITCH  shift and go to state 23
    KEYWORD_BREAK   shift and go to state 25
    KEYWORD_RETURN  shift and go to state 26
    LBRACE          shift and go to state 24
    IDENTIFIER      shift and go to state 17
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    KEYWORD_INT     shift and go to state 34
    KEYWORD_FLOAT   shift and go to state 35
    KEYWORD_CHAR    shift and go to state 36
    KEYWORD_VOID    shift and go to state 37
    KEYWORD_STRING  shift and go to state 38
    KEYWORD_BOOL    shift and go to state 39
    KEYWORD_FILE    shift and go to state 40
    KEYWORD_SOCKET  shift and go to state 41
    KEYWORD_DICT    shift and go to state 42

    statement                      shift and go to state 182
    declaration_statement          shift and go to state 4
    assignment_statement           shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    do_while_statement             shift and go to state 8
    for_statement                  shift and go to state 9
    switch_statement               shift and go to state 10
    break_statement                shift and go to state 11
    return_statement               shift and go to state 12
    function_call_statement        shift and go to state 13
    block_statement                shift and go to state 14
    function_definition            shift and go to state 15
    type_specifier                 shift and go to state 16
    left_hand_side                 shift and go to state 18
    function_call                  shift and go to state 27
    primitive_type                 shift and go to state 28
    array_type                     shift and go to state 29
    subscript_access               shift and go to state 30

state 143

    (54) while_statement -> KEYWORD_WHILE LPAREN expression RPAREN . statement
    (10) statement -> . declaration_statement
    (11) statement -> . assignment_statement
    (12) statement -> . if_statement
    (13) statement -> . while_statement
    (14) statement -> . do_while_statement
    (15) statement -> . for_statement
    (16) statement -> . switch_statement
    (17) statement -> . break_statement
    (18) statement -> . return_statement
    (19) statement -> . function_call_statement
    (20) statement -> . block_statement
    (21) statement -> . function_definition
    (29) declaration_statement -> . type_specifier IDENTIFIER SEMICOLON
    (30) declaration_statement -> . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (31) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON
    (32) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (48) assignment_statement -> . left_hand_side ASSIGN expression SEMICOLON
    (52) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (53) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement
    (54) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (22) do_while_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (55) for_statement -> . KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement
    (23) switch_statement -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE
    (28) break_statement -> . KEYWORD_BREAK SEMICOLON
    (65) return_statement -> . KEYWORD_RETURN SEMICOLON
    (66) return_statement -> . KEYWORD_RETURN expression SEMICOLON
    (67) function_call_statement -> . function_call SEMICOLON
    (76) block_statement -> . LBRACE RBRACE
    (77) block_statement -> . LBRACE statement_list RBRACE
    (2) function_definition -> . type_specifier IDENTIFIER LPAREN params RPAREN block_statement
    (36) type_specifier -> . primitive_type
    (37) type_specifier -> . array_type
    (49) left_hand_side -> . IDENTIFIER
    (50) left_hand_side -> . subscript_access
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (38) primitive_type -> . KEYWORD_INT
    (39) primitive_type -> . KEYWORD_FLOAT
    (40) primitive_type -> . KEYWORD_CHAR
    (41) primitive_type -> . KEYWORD_VOID
    (42) primitive_type -> . KEYWORD_STRING
    (43) primitive_type -> . KEYWORD_BOOL
    (44) primitive_type -> . KEYWORD_FILE
    (45) primitive_type -> . KEYWORD_SOCKET
    (46) primitive_type -> . KEYWORD_DICT
    (47) array_type -> . primitive_type LBRACKET RBRACKET
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET

    KEYWORD_IF      shift and go to state 19
    KEYWORD_WHILE   shift and go to state 20
    KEYWORD_DO      shift and go to state 21
    KEYWORD_FOR     shift and go to state 22
    KEYWORD_SWITCH  shift and go to state 23
    KEYWORD_BREAK   shift and go to state 25
    KEYWORD_RETURN  shift and go to state 26
    LBRACE          shift and go to state 24
    IDENTIFIER      shift and go to state 17
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    KEYWORD_INT     shift and go to state 34
    KEYWORD_FLOAT   shift and go to state 35
    KEYWORD_CHAR    shift and go to state 36
    KEYWORD_VOID    shift and go to state 37
    KEYWORD_STRING  shift and go to state 38
    KEYWORD_BOOL    shift and go to state 39
    KEYWORD_FILE    shift and go to state 40
    KEYWORD_SOCKET  shift and go to state 41
    KEYWORD_DICT    shift and go to state 42

    statement                      shift and go to state 183
    declaration_statement          shift and go to state 4
    assignment_statement           shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    do_while_statement             shift and go to state 8
    for_statement                  shift and go to state 9
    switch_statement               shift and go to state 10
    break_statement                shift and go to state 11
    return_statement               shift and go to state 12
    function_call_statement        shift and go to state 13
    block_statement                shift and go to state 14
    function_definition            shift and go to state 15
    type_specifier                 shift and go to state 16
    left_hand_side                 shift and go to state 18
    function_call                  shift and go to state 27
    primitive_type                 shift and go to state 28
    array_type                     shift and go to state 29
    subscript_access               shift and go to state 30

state 144

    (22) do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN . expression RPAREN SEMICOLON
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression                     shift and go to state 184
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 145

    (55) for_statement -> KEYWORD_FOR LPAREN for_init expression_opt . SEMICOLON expression_opt RPAREN statement

    SEMICOLON       shift and go to state 185


state 146

    (61) expression_opt -> expression .

    SEMICOLON       reduce using rule 61 (expression_opt -> expression .)
    RPAREN          reduce using rule 61 (expression_opt -> expression .)


state 147

    (62) expression_opt -> assignment_statement_no_semi .

    SEMICOLON       reduce using rule 62 (expression_opt -> assignment_statement_no_semi .)
    RPAREN          reduce using rule 62 (expression_opt -> assignment_statement_no_semi .)


state 148

    (63) expression_opt -> empty .

    SEMICOLON       reduce using rule 63 (expression_opt -> empty .)
    RPAREN          reduce using rule 63 (expression_opt -> empty .)


state 149

    (49) left_hand_side -> IDENTIFIER .
    (122) subscript_access -> IDENTIFIER . LBRACKET expression RBRACKET
    (104) primary_expression -> IDENTIFIER .
    (68) function_call -> IDENTIFIER . LPAREN argument_list RPAREN
    (69) function_call -> IDENTIFIER . LPAREN RPAREN

    ASSIGN          reduce using rule 49 (left_hand_side -> IDENTIFIER .)
    LBRACKET        shift and go to state 46
    MUL             reduce using rule 104 (primary_expression -> IDENTIFIER .)
    DIV             reduce using rule 104 (primary_expression -> IDENTIFIER .)
    MOD             reduce using rule 104 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 104 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 104 (primary_expression -> IDENTIFIER .)
    GT              reduce using rule 104 (primary_expression -> IDENTIFIER .)
    LT              reduce using rule 104 (primary_expression -> IDENTIFIER .)
    GEQ             reduce using rule 104 (primary_expression -> IDENTIFIER .)
    LEQ             reduce using rule 104 (primary_expression -> IDENTIFIER .)
    EQ              reduce using rule 104 (primary_expression -> IDENTIFIER .)
    NEQ             reduce using rule 104 (primary_expression -> IDENTIFIER .)
    AND             reduce using rule 104 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 104 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 104 (primary_expression -> IDENTIFIER .)
    RPAREN          reduce using rule 104 (primary_expression -> IDENTIFIER .)
    LPAREN          shift and go to state 45


state 150

    (50) left_hand_side -> subscript_access .
    (114) primary_expression -> subscript_access .

    ASSIGN          reduce using rule 50 (left_hand_side -> subscript_access .)
    MUL             reduce using rule 114 (primary_expression -> subscript_access .)
    DIV             reduce using rule 114 (primary_expression -> subscript_access .)
    MOD             reduce using rule 114 (primary_expression -> subscript_access .)
    PLUS            reduce using rule 114 (primary_expression -> subscript_access .)
    MINUS           reduce using rule 114 (primary_expression -> subscript_access .)
    GT              reduce using rule 114 (primary_expression -> subscript_access .)
    LT              reduce using rule 114 (primary_expression -> subscript_access .)
    GEQ             reduce using rule 114 (primary_expression -> subscript_access .)
    LEQ             reduce using rule 114 (primary_expression -> subscript_access .)
    EQ              reduce using rule 114 (primary_expression -> subscript_access .)
    NEQ             reduce using rule 114 (primary_expression -> subscript_access .)
    AND             reduce using rule 114 (primary_expression -> subscript_access .)
    OR              reduce using rule 114 (primary_expression -> subscript_access .)
    SEMICOLON       reduce using rule 114 (primary_expression -> subscript_access .)
    RPAREN          reduce using rule 114 (primary_expression -> subscript_access .)


state 151

    (56) for_init -> assignment_statement_no_semi SEMICOLON .

    IDENTIFIER      reduce using rule 56 (for_init -> assignment_statement_no_semi SEMICOLON .)
    MINUS           reduce using rule 56 (for_init -> assignment_statement_no_semi SEMICOLON .)
    INT_LITERAL     reduce using rule 56 (for_init -> assignment_statement_no_semi SEMICOLON .)
    FLOAT_LITERAL   reduce using rule 56 (for_init -> assignment_statement_no_semi SEMICOLON .)
    STRING_LITERAL  reduce using rule 56 (for_init -> assignment_statement_no_semi SEMICOLON .)
    CHAR_LITERAL    reduce using rule 56 (for_init -> assignment_statement_no_semi SEMICOLON .)
    KEYWORD_TRUE    reduce using rule 56 (for_init -> assignment_statement_no_semi SEMICOLON .)
    KEYWORD_FALSE   reduce using rule 56 (for_init -> assignment_statement_no_semi SEMICOLON .)
    KEYWORD_NULL    reduce using rule 56 (for_init -> assignment_statement_no_semi SEMICOLON .)
    LPAREN          reduce using rule 56 (for_init -> assignment_statement_no_semi SEMICOLON .)
    SYSTEM_INPUT    reduce using rule 56 (for_init -> assignment_statement_no_semi SEMICOLON .)
    SYSTEM_OUTPUT   reduce using rule 56 (for_init -> assignment_statement_no_semi SEMICOLON .)
    KEYWORD_EXIT    reduce using rule 56 (for_init -> assignment_statement_no_semi SEMICOLON .)
    LBRACE          reduce using rule 56 (for_init -> assignment_statement_no_semi SEMICOLON .)
    SEMICOLON       reduce using rule 56 (for_init -> assignment_statement_no_semi SEMICOLON .)


state 152

    (51) assignment_statement_no_semi -> left_hand_side ASSIGN . expression
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression                     shift and go to state 186
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 153

    (29) declaration_statement -> type_specifier IDENTIFIER . SEMICOLON
    (30) declaration_statement -> type_specifier IDENTIFIER . ASSIGN expression SEMICOLON
    (31) declaration_statement -> type_specifier IDENTIFIER . LBRACKET expression RBRACKET SEMICOLON
    (32) declaration_statement -> type_specifier IDENTIFIER . LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> type_specifier IDENTIFIER . LBRACKET RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> type_specifier IDENTIFIER . LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> type_specifier IDENTIFIER . LBRACKET RBRACKET SEMICOLON

    SEMICOLON       shift and go to state 84
    ASSIGN          shift and go to state 85
    LBRACKET        shift and go to state 86


state 154

    (23) switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN . LBRACE case_list RBRACE

    LBRACE          shift and go to state 187


state 155

    (85) logical_expression -> logical_expression AND equality_expression .
    (88) equality_expression -> equality_expression . EQ relational_expression
    (89) equality_expression -> equality_expression . NEQ relational_expression

    AND             reduce using rule 85 (logical_expression -> logical_expression AND equality_expression .)
    OR              reduce using rule 85 (logical_expression -> logical_expression AND equality_expression .)
    SEMICOLON       reduce using rule 85 (logical_expression -> logical_expression AND equality_expression .)
    RPAREN          reduce using rule 85 (logical_expression -> logical_expression AND equality_expression .)
    COMMA           reduce using rule 85 (logical_expression -> logical_expression AND equality_expression .)
    RBRACKET        reduce using rule 85 (logical_expression -> logical_expression AND equality_expression .)
    COLON           reduce using rule 85 (logical_expression -> logical_expression AND equality_expression .)
    RBRACE          reduce using rule 85 (logical_expression -> logical_expression AND equality_expression .)
    EQ              shift and go to state 108
    NEQ             shift and go to state 109


state 156

    (86) logical_expression -> logical_expression OR equality_expression .
    (88) equality_expression -> equality_expression . EQ relational_expression
    (89) equality_expression -> equality_expression . NEQ relational_expression

    AND             reduce using rule 86 (logical_expression -> logical_expression OR equality_expression .)
    OR              reduce using rule 86 (logical_expression -> logical_expression OR equality_expression .)
    SEMICOLON       reduce using rule 86 (logical_expression -> logical_expression OR equality_expression .)
    RPAREN          reduce using rule 86 (logical_expression -> logical_expression OR equality_expression .)
    COMMA           reduce using rule 86 (logical_expression -> logical_expression OR equality_expression .)
    RBRACKET        reduce using rule 86 (logical_expression -> logical_expression OR equality_expression .)
    COLON           reduce using rule 86 (logical_expression -> logical_expression OR equality_expression .)
    RBRACE          reduce using rule 86 (logical_expression -> logical_expression OR equality_expression .)
    EQ              shift and go to state 108
    NEQ             shift and go to state 109


state 157

    (88) equality_expression -> equality_expression EQ relational_expression .
    (91) relational_expression -> relational_expression . GT additive_expression
    (92) relational_expression -> relational_expression . LT additive_expression
    (93) relational_expression -> relational_expression . GEQ additive_expression
    (94) relational_expression -> relational_expression . LEQ additive_expression

    EQ              reduce using rule 88 (equality_expression -> equality_expression EQ relational_expression .)
    NEQ             reduce using rule 88 (equality_expression -> equality_expression EQ relational_expression .)
    AND             reduce using rule 88 (equality_expression -> equality_expression EQ relational_expression .)
    OR              reduce using rule 88 (equality_expression -> equality_expression EQ relational_expression .)
    SEMICOLON       reduce using rule 88 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 88 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 88 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 88 (equality_expression -> equality_expression EQ relational_expression .)
    COLON           reduce using rule 88 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACE          reduce using rule 88 (equality_expression -> equality_expression EQ relational_expression .)
    GT              shift and go to state 110
    LT              shift and go to state 111
    GEQ             shift and go to state 112
    LEQ             shift and go to state 113


state 158

    (89) equality_expression -> equality_expression NEQ relational_expression .
    (91) relational_expression -> relational_expression . GT additive_expression
    (92) relational_expression -> relational_expression . LT additive_expression
    (93) relational_expression -> relational_expression . GEQ additive_expression
    (94) relational_expression -> relational_expression . LEQ additive_expression

    EQ              reduce using rule 89 (equality_expression -> equality_expression NEQ relational_expression .)
    NEQ             reduce using rule 89 (equality_expression -> equality_expression NEQ relational_expression .)
    AND             reduce using rule 89 (equality_expression -> equality_expression NEQ relational_expression .)
    OR              reduce using rule 89 (equality_expression -> equality_expression NEQ relational_expression .)
    SEMICOLON       reduce using rule 89 (equality_expression -> equality_expression NEQ relational_expression .)
    RPAREN          reduce using rule 89 (equality_expression -> equality_expression NEQ relational_expression .)
    COMMA           reduce using rule 89 (equality_expression -> equality_expression NEQ relational_expression .)
    RBRACKET        reduce using rule 89 (equality_expression -> equality_expression NEQ relational_expression .)
    COLON           reduce using rule 89 (equality_expression -> equality_expression NEQ relational_expression .)
    RBRACE          reduce using rule 89 (equality_expression -> equality_expression NEQ relational_expression .)
    GT              shift and go to state 110
    LT              shift and go to state 111
    GEQ             shift and go to state 112
    LEQ             shift and go to state 113


state 159

    (91) relational_expression -> relational_expression GT additive_expression .
    (96) additive_expression -> additive_expression . PLUS multiplicative_expression
    (97) additive_expression -> additive_expression . MINUS multiplicative_expression

    GT              reduce using rule 91 (relational_expression -> relational_expression GT additive_expression .)
    LT              reduce using rule 91 (relational_expression -> relational_expression GT additive_expression .)
    GEQ             reduce using rule 91 (relational_expression -> relational_expression GT additive_expression .)
    LEQ             reduce using rule 91 (relational_expression -> relational_expression GT additive_expression .)
    EQ              reduce using rule 91 (relational_expression -> relational_expression GT additive_expression .)
    NEQ             reduce using rule 91 (relational_expression -> relational_expression GT additive_expression .)
    AND             reduce using rule 91 (relational_expression -> relational_expression GT additive_expression .)
    OR              reduce using rule 91 (relational_expression -> relational_expression GT additive_expression .)
    SEMICOLON       reduce using rule 91 (relational_expression -> relational_expression GT additive_expression .)
    RPAREN          reduce using rule 91 (relational_expression -> relational_expression GT additive_expression .)
    COMMA           reduce using rule 91 (relational_expression -> relational_expression GT additive_expression .)
    RBRACKET        reduce using rule 91 (relational_expression -> relational_expression GT additive_expression .)
    COLON           reduce using rule 91 (relational_expression -> relational_expression GT additive_expression .)
    RBRACE          reduce using rule 91 (relational_expression -> relational_expression GT additive_expression .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 115


state 160

    (92) relational_expression -> relational_expression LT additive_expression .
    (96) additive_expression -> additive_expression . PLUS multiplicative_expression
    (97) additive_expression -> additive_expression . MINUS multiplicative_expression

    GT              reduce using rule 92 (relational_expression -> relational_expression LT additive_expression .)
    LT              reduce using rule 92 (relational_expression -> relational_expression LT additive_expression .)
    GEQ             reduce using rule 92 (relational_expression -> relational_expression LT additive_expression .)
    LEQ             reduce using rule 92 (relational_expression -> relational_expression LT additive_expression .)
    EQ              reduce using rule 92 (relational_expression -> relational_expression LT additive_expression .)
    NEQ             reduce using rule 92 (relational_expression -> relational_expression LT additive_expression .)
    AND             reduce using rule 92 (relational_expression -> relational_expression LT additive_expression .)
    OR              reduce using rule 92 (relational_expression -> relational_expression LT additive_expression .)
    SEMICOLON       reduce using rule 92 (relational_expression -> relational_expression LT additive_expression .)
    RPAREN          reduce using rule 92 (relational_expression -> relational_expression LT additive_expression .)
    COMMA           reduce using rule 92 (relational_expression -> relational_expression LT additive_expression .)
    RBRACKET        reduce using rule 92 (relational_expression -> relational_expression LT additive_expression .)
    COLON           reduce using rule 92 (relational_expression -> relational_expression LT additive_expression .)
    RBRACE          reduce using rule 92 (relational_expression -> relational_expression LT additive_expression .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 115


state 161

    (93) relational_expression -> relational_expression GEQ additive_expression .
    (96) additive_expression -> additive_expression . PLUS multiplicative_expression
    (97) additive_expression -> additive_expression . MINUS multiplicative_expression

    GT              reduce using rule 93 (relational_expression -> relational_expression GEQ additive_expression .)
    LT              reduce using rule 93 (relational_expression -> relational_expression GEQ additive_expression .)
    GEQ             reduce using rule 93 (relational_expression -> relational_expression GEQ additive_expression .)
    LEQ             reduce using rule 93 (relational_expression -> relational_expression GEQ additive_expression .)
    EQ              reduce using rule 93 (relational_expression -> relational_expression GEQ additive_expression .)
    NEQ             reduce using rule 93 (relational_expression -> relational_expression GEQ additive_expression .)
    AND             reduce using rule 93 (relational_expression -> relational_expression GEQ additive_expression .)
    OR              reduce using rule 93 (relational_expression -> relational_expression GEQ additive_expression .)
    SEMICOLON       reduce using rule 93 (relational_expression -> relational_expression GEQ additive_expression .)
    RPAREN          reduce using rule 93 (relational_expression -> relational_expression GEQ additive_expression .)
    COMMA           reduce using rule 93 (relational_expression -> relational_expression GEQ additive_expression .)
    RBRACKET        reduce using rule 93 (relational_expression -> relational_expression GEQ additive_expression .)
    COLON           reduce using rule 93 (relational_expression -> relational_expression GEQ additive_expression .)
    RBRACE          reduce using rule 93 (relational_expression -> relational_expression GEQ additive_expression .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 115


state 162

    (94) relational_expression -> relational_expression LEQ additive_expression .
    (96) additive_expression -> additive_expression . PLUS multiplicative_expression
    (97) additive_expression -> additive_expression . MINUS multiplicative_expression

    GT              reduce using rule 94 (relational_expression -> relational_expression LEQ additive_expression .)
    LT              reduce using rule 94 (relational_expression -> relational_expression LEQ additive_expression .)
    GEQ             reduce using rule 94 (relational_expression -> relational_expression LEQ additive_expression .)
    LEQ             reduce using rule 94 (relational_expression -> relational_expression LEQ additive_expression .)
    EQ              reduce using rule 94 (relational_expression -> relational_expression LEQ additive_expression .)
    NEQ             reduce using rule 94 (relational_expression -> relational_expression LEQ additive_expression .)
    AND             reduce using rule 94 (relational_expression -> relational_expression LEQ additive_expression .)
    OR              reduce using rule 94 (relational_expression -> relational_expression LEQ additive_expression .)
    SEMICOLON       reduce using rule 94 (relational_expression -> relational_expression LEQ additive_expression .)
    RPAREN          reduce using rule 94 (relational_expression -> relational_expression LEQ additive_expression .)
    COMMA           reduce using rule 94 (relational_expression -> relational_expression LEQ additive_expression .)
    RBRACKET        reduce using rule 94 (relational_expression -> relational_expression LEQ additive_expression .)
    COLON           reduce using rule 94 (relational_expression -> relational_expression LEQ additive_expression .)
    RBRACE          reduce using rule 94 (relational_expression -> relational_expression LEQ additive_expression .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 115


state 163

    (96) additive_expression -> additive_expression PLUS multiplicative_expression .
    (99) multiplicative_expression -> multiplicative_expression . MUL unary_expression
    (100) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (101) multiplicative_expression -> multiplicative_expression . MOD unary_expression

    PLUS            reduce using rule 96 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 96 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 96 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 96 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GEQ             reduce using rule 96 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEQ             reduce using rule 96 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 96 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEQ             reduce using rule 96 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 96 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 96 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 96 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 96 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 96 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 96 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 96 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 96 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MUL             shift and go to state 116
    DIV             shift and go to state 117
    MOD             shift and go to state 118


state 164

    (97) additive_expression -> additive_expression MINUS multiplicative_expression .
    (99) multiplicative_expression -> multiplicative_expression . MUL unary_expression
    (100) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (101) multiplicative_expression -> multiplicative_expression . MOD unary_expression

    PLUS            reduce using rule 97 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 97 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 97 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 97 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GEQ             reduce using rule 97 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEQ             reduce using rule 97 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 97 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEQ             reduce using rule 97 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 97 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 97 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 97 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 97 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 97 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 97 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 97 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 97 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MUL             shift and go to state 116
    DIV             shift and go to state 117
    MOD             shift and go to state 118


state 165

    (99) multiplicative_expression -> multiplicative_expression MUL unary_expression .

    MUL             reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    DIV             reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    MOD             reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    PLUS            reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    MINUS           reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    GT              reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    LT              reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    GEQ             reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    LEQ             reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    EQ              reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    NEQ             reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    AND             reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    OR              reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    SEMICOLON       reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    RPAREN          reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    COMMA           reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    RBRACKET        reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    COLON           reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    RBRACE          reduce using rule 99 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)


state 166

    (100) multiplicative_expression -> multiplicative_expression DIV unary_expression .

    MUL             reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DIV             reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    MOD             reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    PLUS            reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    MINUS           reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GT              reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LT              reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GEQ             reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LEQ             reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    EQ              reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    NEQ             reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    AND             reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    OR              reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SEMICOLON       reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    RPAREN          reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    COMMA           reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    RBRACKET        reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    COLON           reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    RBRACE          reduce using rule 100 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)


state 167

    (101) multiplicative_expression -> multiplicative_expression MOD unary_expression .

    MUL             reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DIV             reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MOD             reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    PLUS            reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MINUS           reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GT              reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LT              reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GEQ             reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LEQ             reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    EQ              reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    NEQ             reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    AND             reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    OR              reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SEMICOLON       reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RPAREN          reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    COMMA           reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RBRACKET        reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    COLON           reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RBRACE          reduce using rule 101 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)


state 168

    (112) primary_expression -> LPAREN expression RPAREN .

    MUL             reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    GEQ             reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    LEQ             reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)


state 169

    (116) dictionary_literal -> LBRACE key_value_list_opt RBRACE .

    MUL             reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)
    DIV             reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)
    MOD             reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)
    PLUS            reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)
    MINUS           reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)
    GT              reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)
    LT              reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)
    GEQ             reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)
    LEQ             reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)
    EQ              reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)
    NEQ             reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)
    AND             reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)
    OR              reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)
    SEMICOLON       reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)
    RPAREN          reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)
    COMMA           reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)
    RBRACKET        reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)
    COLON           reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)
    RBRACE          reduce using rule 116 (dictionary_literal -> LBRACE key_value_list_opt RBRACE .)


state 170

    (120) key_value_list -> key_value_list COMMA . key_value
    (121) key_value -> . expression COLON expression
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    key_value                      shift and go to state 188
    expression                     shift and go to state 125
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 171

    (121) key_value -> expression COLON . expression
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression                     shift and go to state 189
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 172

    (70) function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA . type_specifier RPAREN
    (36) type_specifier -> . primitive_type
    (37) type_specifier -> . array_type
    (38) primitive_type -> . KEYWORD_INT
    (39) primitive_type -> . KEYWORD_FLOAT
    (40) primitive_type -> . KEYWORD_CHAR
    (41) primitive_type -> . KEYWORD_VOID
    (42) primitive_type -> . KEYWORD_STRING
    (43) primitive_type -> . KEYWORD_BOOL
    (44) primitive_type -> . KEYWORD_FILE
    (45) primitive_type -> . KEYWORD_SOCKET
    (46) primitive_type -> . KEYWORD_DICT
    (47) array_type -> . primitive_type LBRACKET RBRACKET

    KEYWORD_INT     shift and go to state 34
    KEYWORD_FLOAT   shift and go to state 35
    KEYWORD_CHAR    shift and go to state 36
    KEYWORD_VOID    shift and go to state 37
    KEYWORD_STRING  shift and go to state 38
    KEYWORD_BOOL    shift and go to state 39
    KEYWORD_FILE    shift and go to state 40
    KEYWORD_SOCKET  shift and go to state 41
    KEYWORD_DICT    shift and go to state 42

    type_specifier                 shift and go to state 190
    primitive_type                 shift and go to state 28
    array_type                     shift and go to state 29

state 173

    (71) function_call -> SYSTEM_OUTPUT LPAREN expression COMMA . type_specifier RPAREN
    (72) function_call -> SYSTEM_OUTPUT LPAREN expression COMMA . type_specifier COMMA expression RPAREN
    (36) type_specifier -> . primitive_type
    (37) type_specifier -> . array_type
    (38) primitive_type -> . KEYWORD_INT
    (39) primitive_type -> . KEYWORD_FLOAT
    (40) primitive_type -> . KEYWORD_CHAR
    (41) primitive_type -> . KEYWORD_VOID
    (42) primitive_type -> . KEYWORD_STRING
    (43) primitive_type -> . KEYWORD_BOOL
    (44) primitive_type -> . KEYWORD_FILE
    (45) primitive_type -> . KEYWORD_SOCKET
    (46) primitive_type -> . KEYWORD_DICT
    (47) array_type -> . primitive_type LBRACKET RBRACKET

    KEYWORD_INT     shift and go to state 34
    KEYWORD_FLOAT   shift and go to state 35
    KEYWORD_CHAR    shift and go to state 36
    KEYWORD_VOID    shift and go to state 37
    KEYWORD_STRING  shift and go to state 38
    KEYWORD_BOOL    shift and go to state 39
    KEYWORD_FILE    shift and go to state 40
    KEYWORD_SOCKET  shift and go to state 41
    KEYWORD_DICT    shift and go to state 42

    type_specifier                 shift and go to state 191
    primitive_type                 shift and go to state 28
    array_type                     shift and go to state 29

state 174

    (30) declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .

    KEYWORD_IF      reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_DO      reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_FOR     reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    LBRACE          reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    SYSTEM_INPUT    reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    SYSTEM_OUTPUT   reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_EXIT    reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_INT     reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_FLOAT   reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_CHAR    reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_VOID    reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_STRING  reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_BOOL    reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_FILE    reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_SOCKET  reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_DICT    reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    INT_LITERAL     reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT_LITERAL   reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    CHAR_LITERAL    reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_TRUE    reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_FALSE   reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_NULL    reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    SEMICOLON       reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_CASE    reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 30 (declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)


state 175

    (31) declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET . SEMICOLON
    (34) declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET . ASSIGN initializer_list SEMICOLON

    SEMICOLON       shift and go to state 192
    ASSIGN          shift and go to state 193


state 176

    (32) declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN . initializer_list SEMICOLON
    (33) declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN . expression SEMICOLON
    (78) initializer_list -> . LBRACKET expression_list_opt RBRACKET
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    LBRACKET        shift and go to state 194
    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    initializer_list               shift and go to state 195
    expression                     shift and go to state 196
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 177

    (35) declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .

    KEYWORD_IF      reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_DO      reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_FOR     reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    LBRACE          reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    SYSTEM_INPUT    reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    SYSTEM_OUTPUT   reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_EXIT    reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_INT     reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_FLOAT   reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_CHAR    reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_VOID    reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_STRING  reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_BOOL    reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_FILE    reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_SOCKET  reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_DICT    reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    $end            reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    MINUS           reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    INT_LITERAL     reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    FLOAT_LITERAL   reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    STRING_LITERAL  reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    CHAR_LITERAL    reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_TRUE    reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_FALSE   reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_NULL    reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_CASE    reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 35 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON .)


state 178

    (7) param -> type_specifier IDENTIFIER .

    COMMA           reduce using rule 7 (param -> type_specifier IDENTIFIER .)
    RPAREN          reduce using rule 7 (param -> type_specifier IDENTIFIER .)


state 179

    (2) function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN . block_statement
    (76) block_statement -> . LBRACE RBRACE
    (77) block_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 24

    block_statement                shift and go to state 197

state 180

    (6) param_list -> param_list COMMA . param
    (7) param -> . type_specifier IDENTIFIER
    (36) type_specifier -> . primitive_type
    (37) type_specifier -> . array_type
    (38) primitive_type -> . KEYWORD_INT
    (39) primitive_type -> . KEYWORD_FLOAT
    (40) primitive_type -> . KEYWORD_CHAR
    (41) primitive_type -> . KEYWORD_VOID
    (42) primitive_type -> . KEYWORD_STRING
    (43) primitive_type -> . KEYWORD_BOOL
    (44) primitive_type -> . KEYWORD_FILE
    (45) primitive_type -> . KEYWORD_SOCKET
    (46) primitive_type -> . KEYWORD_DICT
    (47) array_type -> . primitive_type LBRACKET RBRACKET

    KEYWORD_INT     shift and go to state 34
    KEYWORD_FLOAT   shift and go to state 35
    KEYWORD_CHAR    shift and go to state 36
    KEYWORD_VOID    shift and go to state 37
    KEYWORD_STRING  shift and go to state 38
    KEYWORD_BOOL    shift and go to state 39
    KEYWORD_FILE    shift and go to state 40
    KEYWORD_SOCKET  shift and go to state 41
    KEYWORD_DICT    shift and go to state 42

    param                          shift and go to state 198
    type_specifier                 shift and go to state 133
    primitive_type                 shift and go to state 28
    array_type                     shift and go to state 29

state 181

    (75) argument_list -> argument_list COMMA expression .

    RPAREN          reduce using rule 75 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 75 (argument_list -> argument_list COMMA expression .)


state 182

    (52) if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .
    (53) if_statement -> KEYWORD_IF LPAREN expression RPAREN statement . KEYWORD_ELSE statement

    KEYWORD_IF      reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_WHILE   reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_DO      reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_FOR     reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_SWITCH  reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_BREAK   reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_RETURN  reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    SYSTEM_INPUT    reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    SYSTEM_OUTPUT   reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_EXIT    reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_INT     reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_FLOAT   reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_CHAR    reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_VOID    reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_STRING  reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_BOOL    reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_FILE    reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_SOCKET  reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_DICT    reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    $end            reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_CASE    reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_DEFAULT reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .)
    KEYWORD_ELSE    shift and go to state 199

  ! KEYWORD_ELSE    [ reduce using rule 52 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement .) ]


state 183

    (54) while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .

    KEYWORD_IF      reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_WHILE   reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_DO      reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_FOR     reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_SWITCH  reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_BREAK   reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_RETURN  reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    SYSTEM_INPUT    reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    SYSTEM_OUTPUT   reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_EXIT    reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_INT     reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_FLOAT   reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_CHAR    reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_VOID    reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_STRING  reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_BOOL    reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_FILE    reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_SOCKET  reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_DICT    reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    $end            reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_ELSE    reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_CASE    reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)
    KEYWORD_DEFAULT reduce using rule 54 (while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement .)


state 184

    (22) do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 200


state 185

    (55) for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON . expression_opt RPAREN statement
    (61) expression_opt -> . expression
    (62) expression_opt -> . assignment_statement_no_semi
    (63) expression_opt -> . empty
    (83) expression -> . logical_expression
    (51) assignment_statement_no_semi -> . left_hand_side ASSIGN expression
    (64) empty -> .
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (49) left_hand_side -> . IDENTIFIER
    (50) left_hand_side -> . subscript_access
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    RPAREN          reduce using rule 64 (empty -> .)
    IDENTIFIER      shift and go to state 149
    MINUS           shift and go to state 63
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression_opt                 shift and go to state 201
    expression                     shift and go to state 146
    assignment_statement_no_semi   shift and go to state 147
    empty                          shift and go to state 148
    logical_expression             shift and go to state 58
    left_hand_side                 shift and go to state 100
    equality_expression            shift and go to state 59
    subscript_access               shift and go to state 150
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    dictionary_literal             shift and go to state 77

state 186

    (51) assignment_statement_no_semi -> left_hand_side ASSIGN expression .

    SEMICOLON       reduce using rule 51 (assignment_statement_no_semi -> left_hand_side ASSIGN expression .)
    RPAREN          reduce using rule 51 (assignment_statement_no_semi -> left_hand_side ASSIGN expression .)


state 187

    (23) switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE . case_list RBRACE
    (24) case_list -> . case_clause
    (25) case_list -> . case_list case_clause
    (26) case_clause -> . KEYWORD_CASE expression COLON statement_list
    (27) case_clause -> . KEYWORD_DEFAULT COLON statement_list

    KEYWORD_CASE    shift and go to state 204
    KEYWORD_DEFAULT shift and go to state 205

    case_list                      shift and go to state 202
    case_clause                    shift and go to state 203

state 188

    (120) key_value_list -> key_value_list COMMA key_value .

    COMMA           reduce using rule 120 (key_value_list -> key_value_list COMMA key_value .)
    RBRACE          reduce using rule 120 (key_value_list -> key_value_list COMMA key_value .)


state 189

    (121) key_value -> expression COLON expression .

    COMMA           reduce using rule 121 (key_value -> expression COLON expression .)
    RBRACE          reduce using rule 121 (key_value -> expression COLON expression .)


state 190

    (70) function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier . RPAREN

    RPAREN          shift and go to state 206


state 191

    (71) function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier . RPAREN
    (72) function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier . COMMA expression RPAREN

    RPAREN          shift and go to state 208
    COMMA           shift and go to state 207


state 192

    (31) declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .

    KEYWORD_IF      reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_DO      reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_FOR     reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    LBRACE          reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    SYSTEM_INPUT    reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    SYSTEM_OUTPUT   reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_EXIT    reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_INT     reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_FLOAT   reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_CHAR    reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_VOID    reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_STRING  reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_BOOL    reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_FILE    reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_SOCKET  reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_DICT    reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    $end            reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    MINUS           reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    INT_LITERAL     reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    FLOAT_LITERAL   reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    STRING_LITERAL  reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    CHAR_LITERAL    reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_TRUE    reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_FALSE   reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_NULL    reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_CASE    reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 31 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON .)


state 193

    (34) declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN . initializer_list SEMICOLON
    (78) initializer_list -> . LBRACKET expression_list_opt RBRACKET

    LBRACKET        shift and go to state 194

    initializer_list               shift and go to state 209

state 194

    (78) initializer_list -> LBRACKET . expression_list_opt RBRACKET
    (79) expression_list_opt -> . expression_list
    (80) expression_list_opt -> . empty
    (81) expression_list -> . expression
    (82) expression_list -> . expression_list COMMA expression
    (64) empty -> .
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    RBRACKET        reduce using rule 64 (empty -> .)
    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression_list_opt            shift and go to state 210
    expression_list                shift and go to state 211
    empty                          shift and go to state 212
    expression                     shift and go to state 213
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 195

    (32) declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list . SEMICOLON

    SEMICOLON       shift and go to state 214


state 196

    (33) declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 215


state 197

    (2) function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .

    KEYWORD_IF      reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_WHILE   reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_DO      reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_FOR     reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_SWITCH  reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_BREAK   reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_RETURN  reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    LBRACE          reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    IDENTIFIER      reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    SYSTEM_INPUT    reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    SYSTEM_OUTPUT   reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_EXIT    reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_INT     reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_FLOAT   reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_CHAR    reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_VOID    reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_STRING  reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_BOOL    reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_FILE    reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_SOCKET  reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_DICT    reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    $end            reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    RBRACE          reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_ELSE    reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_CASE    reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)
    KEYWORD_DEFAULT reduce using rule 2 (function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement .)


state 198

    (6) param_list -> param_list COMMA param .

    COMMA           reduce using rule 6 (param_list -> param_list COMMA param .)
    RPAREN          reduce using rule 6 (param_list -> param_list COMMA param .)


state 199

    (53) if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE . statement
    (10) statement -> . declaration_statement
    (11) statement -> . assignment_statement
    (12) statement -> . if_statement
    (13) statement -> . while_statement
    (14) statement -> . do_while_statement
    (15) statement -> . for_statement
    (16) statement -> . switch_statement
    (17) statement -> . break_statement
    (18) statement -> . return_statement
    (19) statement -> . function_call_statement
    (20) statement -> . block_statement
    (21) statement -> . function_definition
    (29) declaration_statement -> . type_specifier IDENTIFIER SEMICOLON
    (30) declaration_statement -> . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (31) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON
    (32) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (48) assignment_statement -> . left_hand_side ASSIGN expression SEMICOLON
    (52) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (53) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement
    (54) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (22) do_while_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (55) for_statement -> . KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement
    (23) switch_statement -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE
    (28) break_statement -> . KEYWORD_BREAK SEMICOLON
    (65) return_statement -> . KEYWORD_RETURN SEMICOLON
    (66) return_statement -> . KEYWORD_RETURN expression SEMICOLON
    (67) function_call_statement -> . function_call SEMICOLON
    (76) block_statement -> . LBRACE RBRACE
    (77) block_statement -> . LBRACE statement_list RBRACE
    (2) function_definition -> . type_specifier IDENTIFIER LPAREN params RPAREN block_statement
    (36) type_specifier -> . primitive_type
    (37) type_specifier -> . array_type
    (49) left_hand_side -> . IDENTIFIER
    (50) left_hand_side -> . subscript_access
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (38) primitive_type -> . KEYWORD_INT
    (39) primitive_type -> . KEYWORD_FLOAT
    (40) primitive_type -> . KEYWORD_CHAR
    (41) primitive_type -> . KEYWORD_VOID
    (42) primitive_type -> . KEYWORD_STRING
    (43) primitive_type -> . KEYWORD_BOOL
    (44) primitive_type -> . KEYWORD_FILE
    (45) primitive_type -> . KEYWORD_SOCKET
    (46) primitive_type -> . KEYWORD_DICT
    (47) array_type -> . primitive_type LBRACKET RBRACKET
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET

    KEYWORD_IF      shift and go to state 19
    KEYWORD_WHILE   shift and go to state 20
    KEYWORD_DO      shift and go to state 21
    KEYWORD_FOR     shift and go to state 22
    KEYWORD_SWITCH  shift and go to state 23
    KEYWORD_BREAK   shift and go to state 25
    KEYWORD_RETURN  shift and go to state 26
    LBRACE          shift and go to state 24
    IDENTIFIER      shift and go to state 17
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    KEYWORD_INT     shift and go to state 34
    KEYWORD_FLOAT   shift and go to state 35
    KEYWORD_CHAR    shift and go to state 36
    KEYWORD_VOID    shift and go to state 37
    KEYWORD_STRING  shift and go to state 38
    KEYWORD_BOOL    shift and go to state 39
    KEYWORD_FILE    shift and go to state 40
    KEYWORD_SOCKET  shift and go to state 41
    KEYWORD_DICT    shift and go to state 42

    statement                      shift and go to state 216
    declaration_statement          shift and go to state 4
    assignment_statement           shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    do_while_statement             shift and go to state 8
    for_statement                  shift and go to state 9
    switch_statement               shift and go to state 10
    break_statement                shift and go to state 11
    return_statement               shift and go to state 12
    function_call_statement        shift and go to state 13
    block_statement                shift and go to state 14
    function_definition            shift and go to state 15
    type_specifier                 shift and go to state 16
    left_hand_side                 shift and go to state 18
    function_call                  shift and go to state 27
    primitive_type                 shift and go to state 28
    array_type                     shift and go to state 29
    subscript_access               shift and go to state 30

state 200

    (22) do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 217


state 201

    (55) for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt . RPAREN statement

    RPAREN          shift and go to state 218


state 202

    (23) switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list . RBRACE
    (25) case_list -> case_list . case_clause
    (26) case_clause -> . KEYWORD_CASE expression COLON statement_list
    (27) case_clause -> . KEYWORD_DEFAULT COLON statement_list

    RBRACE          shift and go to state 219
    KEYWORD_CASE    shift and go to state 204
    KEYWORD_DEFAULT shift and go to state 205

    case_clause                    shift and go to state 220

state 203

    (24) case_list -> case_clause .

    RBRACE          reduce using rule 24 (case_list -> case_clause .)
    KEYWORD_CASE    reduce using rule 24 (case_list -> case_clause .)
    KEYWORD_DEFAULT reduce using rule 24 (case_list -> case_clause .)


state 204

    (26) case_clause -> KEYWORD_CASE . expression COLON statement_list
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression                     shift and go to state 221
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 205

    (27) case_clause -> KEYWORD_DEFAULT . COLON statement_list

    COLON           shift and go to state 222


state 206

    (70) function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .

    SEMICOLON       reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)
    MUL             reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)
    DIV             reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)
    MOD             reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)
    PLUS            reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)
    MINUS           reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)
    GT              reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)
    LT              reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)
    GEQ             reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)
    LEQ             reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)
    EQ              reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)
    NEQ             reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)
    AND             reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)
    OR              reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)
    RPAREN          reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)
    COMMA           reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)
    RBRACKET        reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)
    COLON           reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)
    RBRACE          reduce using rule 70 (function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN .)


state 207

    (72) function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA . expression RPAREN
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression                     shift and go to state 223
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 208

    (71) function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .

    SEMICOLON       reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)
    MUL             reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)
    DIV             reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)
    MOD             reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)
    PLUS            reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)
    MINUS           reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)
    GT              reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)
    LT              reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)
    GEQ             reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)
    LEQ             reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)
    EQ              reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)
    NEQ             reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)
    AND             reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)
    OR              reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)
    RPAREN          reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)
    COMMA           reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)
    RBRACKET        reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)
    COLON           reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)
    RBRACE          reduce using rule 71 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN .)


state 209

    (34) declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list . SEMICOLON

    SEMICOLON       shift and go to state 224


state 210

    (78) initializer_list -> LBRACKET expression_list_opt . RBRACKET

    RBRACKET        shift and go to state 225


state 211

    (79) expression_list_opt -> expression_list .
    (82) expression_list -> expression_list . COMMA expression

    RBRACKET        reduce using rule 79 (expression_list_opt -> expression_list .)
    COMMA           shift and go to state 226


state 212

    (80) expression_list_opt -> empty .

    RBRACKET        reduce using rule 80 (expression_list_opt -> empty .)


state 213

    (81) expression_list -> expression .

    COMMA           reduce using rule 81 (expression_list -> expression .)
    RBRACKET        reduce using rule 81 (expression_list -> expression .)


state 214

    (32) declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .

    KEYWORD_IF      reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_DO      reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_FOR     reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    LBRACE          reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    IDENTIFIER      reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    SYSTEM_INPUT    reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    SYSTEM_OUTPUT   reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_EXIT    reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_INT     reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_FLOAT   reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_CHAR    reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_VOID    reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_STRING  reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_BOOL    reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_FILE    reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_SOCKET  reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_DICT    reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    $end            reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    RBRACE          reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    MINUS           reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    INT_LITERAL     reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    FLOAT_LITERAL   reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    STRING_LITERAL  reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    CHAR_LITERAL    reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_TRUE    reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_FALSE   reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_NULL    reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    LPAREN          reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    SEMICOLON       reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_CASE    reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 32 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON .)


state 215

    (33) declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .

    KEYWORD_IF      reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_DO      reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_FOR     reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    LBRACE          reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    SYSTEM_INPUT    reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    SYSTEM_OUTPUT   reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_EXIT    reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_INT     reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_FLOAT   reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_CHAR    reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_VOID    reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_STRING  reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_BOOL    reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_FILE    reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_SOCKET  reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_DICT    reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    $end            reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    INT_LITERAL     reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    FLOAT_LITERAL   reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    CHAR_LITERAL    reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_TRUE    reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_FALSE   reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_NULL    reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    SEMICOLON       reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_CASE    reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 33 (declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON .)


state 216

    (53) if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .

    KEYWORD_IF      reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_WHILE   reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_DO      reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_FOR     reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_SWITCH  reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_BREAK   reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_RETURN  reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    LBRACE          reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    IDENTIFIER      reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    SYSTEM_INPUT    reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    SYSTEM_OUTPUT   reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_EXIT    reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_INT     reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_FLOAT   reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_CHAR    reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_VOID    reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_STRING  reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_BOOL    reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_FILE    reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_SOCKET  reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_DICT    reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    $end            reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    RBRACE          reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_ELSE    reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_CASE    reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)
    KEYWORD_DEFAULT reduce using rule 53 (if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement .)


state 217

    (22) do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .

    KEYWORD_IF      reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_DO      reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_FOR     reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    LBRACE          reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    SYSTEM_INPUT    reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    SYSTEM_OUTPUT   reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_EXIT    reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_INT     reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_FLOAT   reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_CHAR    reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_VOID    reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_STRING  reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_BOOL    reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_FILE    reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_SOCKET  reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_DICT    reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_CASE    reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 22 (do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON .)


state 218

    (55) for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN . statement
    (10) statement -> . declaration_statement
    (11) statement -> . assignment_statement
    (12) statement -> . if_statement
    (13) statement -> . while_statement
    (14) statement -> . do_while_statement
    (15) statement -> . for_statement
    (16) statement -> . switch_statement
    (17) statement -> . break_statement
    (18) statement -> . return_statement
    (19) statement -> . function_call_statement
    (20) statement -> . block_statement
    (21) statement -> . function_definition
    (29) declaration_statement -> . type_specifier IDENTIFIER SEMICOLON
    (30) declaration_statement -> . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (31) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON
    (32) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (48) assignment_statement -> . left_hand_side ASSIGN expression SEMICOLON
    (52) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (53) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement
    (54) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (22) do_while_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (55) for_statement -> . KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement
    (23) switch_statement -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE
    (28) break_statement -> . KEYWORD_BREAK SEMICOLON
    (65) return_statement -> . KEYWORD_RETURN SEMICOLON
    (66) return_statement -> . KEYWORD_RETURN expression SEMICOLON
    (67) function_call_statement -> . function_call SEMICOLON
    (76) block_statement -> . LBRACE RBRACE
    (77) block_statement -> . LBRACE statement_list RBRACE
    (2) function_definition -> . type_specifier IDENTIFIER LPAREN params RPAREN block_statement
    (36) type_specifier -> . primitive_type
    (37) type_specifier -> . array_type
    (49) left_hand_side -> . IDENTIFIER
    (50) left_hand_side -> . subscript_access
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (38) primitive_type -> . KEYWORD_INT
    (39) primitive_type -> . KEYWORD_FLOAT
    (40) primitive_type -> . KEYWORD_CHAR
    (41) primitive_type -> . KEYWORD_VOID
    (42) primitive_type -> . KEYWORD_STRING
    (43) primitive_type -> . KEYWORD_BOOL
    (44) primitive_type -> . KEYWORD_FILE
    (45) primitive_type -> . KEYWORD_SOCKET
    (46) primitive_type -> . KEYWORD_DICT
    (47) array_type -> . primitive_type LBRACKET RBRACKET
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET

    KEYWORD_IF      shift and go to state 19
    KEYWORD_WHILE   shift and go to state 20
    KEYWORD_DO      shift and go to state 21
    KEYWORD_FOR     shift and go to state 22
    KEYWORD_SWITCH  shift and go to state 23
    KEYWORD_BREAK   shift and go to state 25
    KEYWORD_RETURN  shift and go to state 26
    LBRACE          shift and go to state 24
    IDENTIFIER      shift and go to state 17
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    KEYWORD_INT     shift and go to state 34
    KEYWORD_FLOAT   shift and go to state 35
    KEYWORD_CHAR    shift and go to state 36
    KEYWORD_VOID    shift and go to state 37
    KEYWORD_STRING  shift and go to state 38
    KEYWORD_BOOL    shift and go to state 39
    KEYWORD_FILE    shift and go to state 40
    KEYWORD_SOCKET  shift and go to state 41
    KEYWORD_DICT    shift and go to state 42

    statement                      shift and go to state 227
    declaration_statement          shift and go to state 4
    assignment_statement           shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    do_while_statement             shift and go to state 8
    for_statement                  shift and go to state 9
    switch_statement               shift and go to state 10
    break_statement                shift and go to state 11
    return_statement               shift and go to state 12
    function_call_statement        shift and go to state 13
    block_statement                shift and go to state 14
    function_definition            shift and go to state 15
    type_specifier                 shift and go to state 16
    left_hand_side                 shift and go to state 18
    function_call                  shift and go to state 27
    primitive_type                 shift and go to state 28
    array_type                     shift and go to state 29
    subscript_access               shift and go to state 30

state 219

    (23) switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .

    KEYWORD_IF      reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_WHILE   reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_DO      reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_FOR     reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_SWITCH  reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_BREAK   reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_RETURN  reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    LBRACE          reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    IDENTIFIER      reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    SYSTEM_INPUT    reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    SYSTEM_OUTPUT   reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_EXIT    reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_INT     reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_FLOAT   reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_CHAR    reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_VOID    reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_STRING  reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_BOOL    reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_FILE    reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_SOCKET  reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_DICT    reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    $end            reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    RBRACE          reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_ELSE    reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_CASE    reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)
    KEYWORD_DEFAULT reduce using rule 23 (switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE .)


state 220

    (25) case_list -> case_list case_clause .

    RBRACE          reduce using rule 25 (case_list -> case_list case_clause .)
    KEYWORD_CASE    reduce using rule 25 (case_list -> case_list case_clause .)
    KEYWORD_DEFAULT reduce using rule 25 (case_list -> case_list case_clause .)


state 221

    (26) case_clause -> KEYWORD_CASE expression . COLON statement_list

    COLON           shift and go to state 228


state 222

    (27) case_clause -> KEYWORD_DEFAULT COLON . statement_list
    (8) statement_list -> . statement
    (9) statement_list -> . statement_list statement
    (10) statement -> . declaration_statement
    (11) statement -> . assignment_statement
    (12) statement -> . if_statement
    (13) statement -> . while_statement
    (14) statement -> . do_while_statement
    (15) statement -> . for_statement
    (16) statement -> . switch_statement
    (17) statement -> . break_statement
    (18) statement -> . return_statement
    (19) statement -> . function_call_statement
    (20) statement -> . block_statement
    (21) statement -> . function_definition
    (29) declaration_statement -> . type_specifier IDENTIFIER SEMICOLON
    (30) declaration_statement -> . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (31) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON
    (32) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (48) assignment_statement -> . left_hand_side ASSIGN expression SEMICOLON
    (52) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (53) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement
    (54) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (22) do_while_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (55) for_statement -> . KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement
    (23) switch_statement -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE
    (28) break_statement -> . KEYWORD_BREAK SEMICOLON
    (65) return_statement -> . KEYWORD_RETURN SEMICOLON
    (66) return_statement -> . KEYWORD_RETURN expression SEMICOLON
    (67) function_call_statement -> . function_call SEMICOLON
    (76) block_statement -> . LBRACE RBRACE
    (77) block_statement -> . LBRACE statement_list RBRACE
    (2) function_definition -> . type_specifier IDENTIFIER LPAREN params RPAREN block_statement
    (36) type_specifier -> . primitive_type
    (37) type_specifier -> . array_type
    (49) left_hand_side -> . IDENTIFIER
    (50) left_hand_side -> . subscript_access
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (38) primitive_type -> . KEYWORD_INT
    (39) primitive_type -> . KEYWORD_FLOAT
    (40) primitive_type -> . KEYWORD_CHAR
    (41) primitive_type -> . KEYWORD_VOID
    (42) primitive_type -> . KEYWORD_STRING
    (43) primitive_type -> . KEYWORD_BOOL
    (44) primitive_type -> . KEYWORD_FILE
    (45) primitive_type -> . KEYWORD_SOCKET
    (46) primitive_type -> . KEYWORD_DICT
    (47) array_type -> . primitive_type LBRACKET RBRACKET
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET

    KEYWORD_IF      shift and go to state 19
    KEYWORD_WHILE   shift and go to state 20
    KEYWORD_DO      shift and go to state 21
    KEYWORD_FOR     shift and go to state 22
    KEYWORD_SWITCH  shift and go to state 23
    KEYWORD_BREAK   shift and go to state 25
    KEYWORD_RETURN  shift and go to state 26
    LBRACE          shift and go to state 24
    IDENTIFIER      shift and go to state 17
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    KEYWORD_INT     shift and go to state 34
    KEYWORD_FLOAT   shift and go to state 35
    KEYWORD_CHAR    shift and go to state 36
    KEYWORD_VOID    shift and go to state 37
    KEYWORD_STRING  shift and go to state 38
    KEYWORD_BOOL    shift and go to state 39
    KEYWORD_FILE    shift and go to state 40
    KEYWORD_SOCKET  shift and go to state 41
    KEYWORD_DICT    shift and go to state 42

    statement_list                 shift and go to state 229
    statement                      shift and go to state 3
    declaration_statement          shift and go to state 4
    assignment_statement           shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    do_while_statement             shift and go to state 8
    for_statement                  shift and go to state 9
    switch_statement               shift and go to state 10
    break_statement                shift and go to state 11
    return_statement               shift and go to state 12
    function_call_statement        shift and go to state 13
    block_statement                shift and go to state 14
    function_definition            shift and go to state 15
    type_specifier                 shift and go to state 16
    left_hand_side                 shift and go to state 18
    function_call                  shift and go to state 27
    primitive_type                 shift and go to state 28
    array_type                     shift and go to state 29
    subscript_access               shift and go to state 30

state 223

    (72) function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression . RPAREN

    RPAREN          shift and go to state 230


state 224

    (34) declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .

    KEYWORD_IF      reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_WHILE   reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_DO      reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_FOR     reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_SWITCH  reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_BREAK   reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_RETURN  reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    LBRACE          reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    IDENTIFIER      reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    SYSTEM_INPUT    reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    SYSTEM_OUTPUT   reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_EXIT    reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_INT     reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_FLOAT   reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_CHAR    reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_VOID    reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_STRING  reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_BOOL    reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_FILE    reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_SOCKET  reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_DICT    reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    $end            reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    RBRACE          reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    MINUS           reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    INT_LITERAL     reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    FLOAT_LITERAL   reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    STRING_LITERAL  reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    CHAR_LITERAL    reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_TRUE    reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_FALSE   reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_NULL    reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    LPAREN          reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    SEMICOLON       reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_ELSE    reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_CASE    reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)
    KEYWORD_DEFAULT reduce using rule 34 (declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON .)


state 225

    (78) initializer_list -> LBRACKET expression_list_opt RBRACKET .

    SEMICOLON       reduce using rule 78 (initializer_list -> LBRACKET expression_list_opt RBRACKET .)


state 226

    (82) expression_list -> expression_list COMMA . expression
    (83) expression -> . logical_expression
    (84) logical_expression -> . equality_expression
    (85) logical_expression -> . logical_expression AND equality_expression
    (86) logical_expression -> . logical_expression OR equality_expression
    (87) equality_expression -> . relational_expression
    (88) equality_expression -> . equality_expression EQ relational_expression
    (89) equality_expression -> . equality_expression NEQ relational_expression
    (90) relational_expression -> . additive_expression
    (91) relational_expression -> . relational_expression GT additive_expression
    (92) relational_expression -> . relational_expression LT additive_expression
    (93) relational_expression -> . relational_expression GEQ additive_expression
    (94) relational_expression -> . relational_expression LEQ additive_expression
    (95) additive_expression -> . multiplicative_expression
    (96) additive_expression -> . additive_expression PLUS multiplicative_expression
    (97) additive_expression -> . additive_expression MINUS multiplicative_expression
    (98) multiplicative_expression -> . unary_expression
    (99) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (100) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (101) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (102) unary_expression -> . primary_expression
    (103) unary_expression -> . MINUS unary_expression
    (104) primary_expression -> . IDENTIFIER
    (105) primary_expression -> . INT_LITERAL
    (106) primary_expression -> . FLOAT_LITERAL
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . CHAR_LITERAL
    (109) primary_expression -> . KEYWORD_TRUE
    (110) primary_expression -> . KEYWORD_FALSE
    (111) primary_expression -> . KEYWORD_NULL
    (112) primary_expression -> . LPAREN expression RPAREN
    (113) primary_expression -> . function_call
    (114) primary_expression -> . subscript_access
    (115) primary_expression -> . dictionary_literal
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET
    (116) dictionary_literal -> . LBRACE key_value_list_opt RBRACE

    MINUS           shift and go to state 63
    IDENTIFIER      shift and go to state 66
    INT_LITERAL     shift and go to state 67
    FLOAT_LITERAL   shift and go to state 68
    STRING_LITERAL  shift and go to state 69
    CHAR_LITERAL    shift and go to state 70
    KEYWORD_TRUE    shift and go to state 71
    KEYWORD_FALSE   shift and go to state 72
    KEYWORD_NULL    shift and go to state 73
    LPAREN          shift and go to state 74
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    LBRACE          shift and go to state 78

    expression                     shift and go to state 231
    logical_expression             shift and go to state 58
    equality_expression            shift and go to state 59
    relational_expression          shift and go to state 60
    additive_expression            shift and go to state 61
    multiplicative_expression      shift and go to state 62
    unary_expression               shift and go to state 64
    primary_expression             shift and go to state 65
    function_call                  shift and go to state 75
    subscript_access               shift and go to state 76
    dictionary_literal             shift and go to state 77

state 227

    (55) for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .

    KEYWORD_IF      reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_WHILE   reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_DO      reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_FOR     reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_SWITCH  reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_BREAK   reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_RETURN  reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    LBRACE          reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    IDENTIFIER      reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    SYSTEM_INPUT    reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    SYSTEM_OUTPUT   reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_EXIT    reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_INT     reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_FLOAT   reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_CHAR    reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_VOID    reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_STRING  reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_BOOL    reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_FILE    reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_SOCKET  reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_DICT    reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    $end            reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    RBRACE          reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_ELSE    reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_CASE    reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)
    KEYWORD_DEFAULT reduce using rule 55 (for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement .)


state 228

    (26) case_clause -> KEYWORD_CASE expression COLON . statement_list
    (8) statement_list -> . statement
    (9) statement_list -> . statement_list statement
    (10) statement -> . declaration_statement
    (11) statement -> . assignment_statement
    (12) statement -> . if_statement
    (13) statement -> . while_statement
    (14) statement -> . do_while_statement
    (15) statement -> . for_statement
    (16) statement -> . switch_statement
    (17) statement -> . break_statement
    (18) statement -> . return_statement
    (19) statement -> . function_call_statement
    (20) statement -> . block_statement
    (21) statement -> . function_definition
    (29) declaration_statement -> . type_specifier IDENTIFIER SEMICOLON
    (30) declaration_statement -> . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (31) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON
    (32) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (48) assignment_statement -> . left_hand_side ASSIGN expression SEMICOLON
    (52) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (53) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement
    (54) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (22) do_while_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (55) for_statement -> . KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement
    (23) switch_statement -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE
    (28) break_statement -> . KEYWORD_BREAK SEMICOLON
    (65) return_statement -> . KEYWORD_RETURN SEMICOLON
    (66) return_statement -> . KEYWORD_RETURN expression SEMICOLON
    (67) function_call_statement -> . function_call SEMICOLON
    (76) block_statement -> . LBRACE RBRACE
    (77) block_statement -> . LBRACE statement_list RBRACE
    (2) function_definition -> . type_specifier IDENTIFIER LPAREN params RPAREN block_statement
    (36) type_specifier -> . primitive_type
    (37) type_specifier -> . array_type
    (49) left_hand_side -> . IDENTIFIER
    (50) left_hand_side -> . subscript_access
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (38) primitive_type -> . KEYWORD_INT
    (39) primitive_type -> . KEYWORD_FLOAT
    (40) primitive_type -> . KEYWORD_CHAR
    (41) primitive_type -> . KEYWORD_VOID
    (42) primitive_type -> . KEYWORD_STRING
    (43) primitive_type -> . KEYWORD_BOOL
    (44) primitive_type -> . KEYWORD_FILE
    (45) primitive_type -> . KEYWORD_SOCKET
    (46) primitive_type -> . KEYWORD_DICT
    (47) array_type -> . primitive_type LBRACKET RBRACKET
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET

    KEYWORD_IF      shift and go to state 19
    KEYWORD_WHILE   shift and go to state 20
    KEYWORD_DO      shift and go to state 21
    KEYWORD_FOR     shift and go to state 22
    KEYWORD_SWITCH  shift and go to state 23
    KEYWORD_BREAK   shift and go to state 25
    KEYWORD_RETURN  shift and go to state 26
    LBRACE          shift and go to state 24
    IDENTIFIER      shift and go to state 17
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    KEYWORD_INT     shift and go to state 34
    KEYWORD_FLOAT   shift and go to state 35
    KEYWORD_CHAR    shift and go to state 36
    KEYWORD_VOID    shift and go to state 37
    KEYWORD_STRING  shift and go to state 38
    KEYWORD_BOOL    shift and go to state 39
    KEYWORD_FILE    shift and go to state 40
    KEYWORD_SOCKET  shift and go to state 41
    KEYWORD_DICT    shift and go to state 42

    statement_list                 shift and go to state 232
    statement                      shift and go to state 3
    declaration_statement          shift and go to state 4
    assignment_statement           shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    do_while_statement             shift and go to state 8
    for_statement                  shift and go to state 9
    switch_statement               shift and go to state 10
    break_statement                shift and go to state 11
    return_statement               shift and go to state 12
    function_call_statement        shift and go to state 13
    block_statement                shift and go to state 14
    function_definition            shift and go to state 15
    type_specifier                 shift and go to state 16
    left_hand_side                 shift and go to state 18
    function_call                  shift and go to state 27
    primitive_type                 shift and go to state 28
    array_type                     shift and go to state 29
    subscript_access               shift and go to state 30

state 229

    (27) case_clause -> KEYWORD_DEFAULT COLON statement_list .
    (9) statement_list -> statement_list . statement
    (10) statement -> . declaration_statement
    (11) statement -> . assignment_statement
    (12) statement -> . if_statement
    (13) statement -> . while_statement
    (14) statement -> . do_while_statement
    (15) statement -> . for_statement
    (16) statement -> . switch_statement
    (17) statement -> . break_statement
    (18) statement -> . return_statement
    (19) statement -> . function_call_statement
    (20) statement -> . block_statement
    (21) statement -> . function_definition
    (29) declaration_statement -> . type_specifier IDENTIFIER SEMICOLON
    (30) declaration_statement -> . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (31) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON
    (32) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (48) assignment_statement -> . left_hand_side ASSIGN expression SEMICOLON
    (52) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (53) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement
    (54) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (22) do_while_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (55) for_statement -> . KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement
    (23) switch_statement -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE
    (28) break_statement -> . KEYWORD_BREAK SEMICOLON
    (65) return_statement -> . KEYWORD_RETURN SEMICOLON
    (66) return_statement -> . KEYWORD_RETURN expression SEMICOLON
    (67) function_call_statement -> . function_call SEMICOLON
    (76) block_statement -> . LBRACE RBRACE
    (77) block_statement -> . LBRACE statement_list RBRACE
    (2) function_definition -> . type_specifier IDENTIFIER LPAREN params RPAREN block_statement
    (36) type_specifier -> . primitive_type
    (37) type_specifier -> . array_type
    (49) left_hand_side -> . IDENTIFIER
    (50) left_hand_side -> . subscript_access
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (38) primitive_type -> . KEYWORD_INT
    (39) primitive_type -> . KEYWORD_FLOAT
    (40) primitive_type -> . KEYWORD_CHAR
    (41) primitive_type -> . KEYWORD_VOID
    (42) primitive_type -> . KEYWORD_STRING
    (43) primitive_type -> . KEYWORD_BOOL
    (44) primitive_type -> . KEYWORD_FILE
    (45) primitive_type -> . KEYWORD_SOCKET
    (46) primitive_type -> . KEYWORD_DICT
    (47) array_type -> . primitive_type LBRACKET RBRACKET
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET

    RBRACE          reduce using rule 27 (case_clause -> KEYWORD_DEFAULT COLON statement_list .)
    KEYWORD_CASE    reduce using rule 27 (case_clause -> KEYWORD_DEFAULT COLON statement_list .)
    KEYWORD_DEFAULT reduce using rule 27 (case_clause -> KEYWORD_DEFAULT COLON statement_list .)
    KEYWORD_IF      shift and go to state 19
    KEYWORD_WHILE   shift and go to state 20
    KEYWORD_DO      shift and go to state 21
    KEYWORD_FOR     shift and go to state 22
    KEYWORD_SWITCH  shift and go to state 23
    KEYWORD_BREAK   shift and go to state 25
    KEYWORD_RETURN  shift and go to state 26
    LBRACE          shift and go to state 24
    IDENTIFIER      shift and go to state 17
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    KEYWORD_INT     shift and go to state 34
    KEYWORD_FLOAT   shift and go to state 35
    KEYWORD_CHAR    shift and go to state 36
    KEYWORD_VOID    shift and go to state 37
    KEYWORD_STRING  shift and go to state 38
    KEYWORD_BOOL    shift and go to state 39
    KEYWORD_FILE    shift and go to state 40
    KEYWORD_SOCKET  shift and go to state 41
    KEYWORD_DICT    shift and go to state 42

    statement                      shift and go to state 43
    declaration_statement          shift and go to state 4
    assignment_statement           shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    do_while_statement             shift and go to state 8
    for_statement                  shift and go to state 9
    switch_statement               shift and go to state 10
    break_statement                shift and go to state 11
    return_statement               shift and go to state 12
    function_call_statement        shift and go to state 13
    block_statement                shift and go to state 14
    function_definition            shift and go to state 15
    type_specifier                 shift and go to state 16
    left_hand_side                 shift and go to state 18
    function_call                  shift and go to state 27
    primitive_type                 shift and go to state 28
    array_type                     shift and go to state 29
    subscript_access               shift and go to state 30

state 230

    (72) function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .

    SEMICOLON       reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)
    MUL             reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)
    DIV             reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)
    MOD             reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)
    PLUS            reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)
    MINUS           reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)
    GT              reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)
    LT              reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)
    GEQ             reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)
    LEQ             reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)
    EQ              reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)
    NEQ             reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)
    AND             reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)
    OR              reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)
    RPAREN          reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)
    COMMA           reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)
    RBRACKET        reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)
    COLON           reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)
    RBRACE          reduce using rule 72 (function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN .)


state 231

    (82) expression_list -> expression_list COMMA expression .

    COMMA           reduce using rule 82 (expression_list -> expression_list COMMA expression .)
    RBRACKET        reduce using rule 82 (expression_list -> expression_list COMMA expression .)


state 232

    (26) case_clause -> KEYWORD_CASE expression COLON statement_list .
    (9) statement_list -> statement_list . statement
    (10) statement -> . declaration_statement
    (11) statement -> . assignment_statement
    (12) statement -> . if_statement
    (13) statement -> . while_statement
    (14) statement -> . do_while_statement
    (15) statement -> . for_statement
    (16) statement -> . switch_statement
    (17) statement -> . break_statement
    (18) statement -> . return_statement
    (19) statement -> . function_call_statement
    (20) statement -> . block_statement
    (21) statement -> . function_definition
    (29) declaration_statement -> . type_specifier IDENTIFIER SEMICOLON
    (30) declaration_statement -> . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (31) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON
    (32) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON
    (33) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON
    (34) declaration_statement -> . type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON
    (35) declaration_statement -> . type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (48) assignment_statement -> . left_hand_side ASSIGN expression SEMICOLON
    (52) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement
    (53) if_statement -> . KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement
    (54) while_statement -> . KEYWORD_WHILE LPAREN expression RPAREN statement
    (22) do_while_statement -> . KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON
    (55) for_statement -> . KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement
    (23) switch_statement -> . KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE
    (28) break_statement -> . KEYWORD_BREAK SEMICOLON
    (65) return_statement -> . KEYWORD_RETURN SEMICOLON
    (66) return_statement -> . KEYWORD_RETURN expression SEMICOLON
    (67) function_call_statement -> . function_call SEMICOLON
    (76) block_statement -> . LBRACE RBRACE
    (77) block_statement -> . LBRACE statement_list RBRACE
    (2) function_definition -> . type_specifier IDENTIFIER LPAREN params RPAREN block_statement
    (36) type_specifier -> . primitive_type
    (37) type_specifier -> . array_type
    (49) left_hand_side -> . IDENTIFIER
    (50) left_hand_side -> . subscript_access
    (68) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (69) function_call -> . IDENTIFIER LPAREN RPAREN
    (70) function_call -> . SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN
    (71) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN
    (72) function_call -> . SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN
    (73) function_call -> . KEYWORD_EXIT LPAREN RPAREN
    (38) primitive_type -> . KEYWORD_INT
    (39) primitive_type -> . KEYWORD_FLOAT
    (40) primitive_type -> . KEYWORD_CHAR
    (41) primitive_type -> . KEYWORD_VOID
    (42) primitive_type -> . KEYWORD_STRING
    (43) primitive_type -> . KEYWORD_BOOL
    (44) primitive_type -> . KEYWORD_FILE
    (45) primitive_type -> . KEYWORD_SOCKET
    (46) primitive_type -> . KEYWORD_DICT
    (47) array_type -> . primitive_type LBRACKET RBRACKET
    (122) subscript_access -> . IDENTIFIER LBRACKET expression RBRACKET

    RBRACE          reduce using rule 26 (case_clause -> KEYWORD_CASE expression COLON statement_list .)
    KEYWORD_CASE    reduce using rule 26 (case_clause -> KEYWORD_CASE expression COLON statement_list .)
    KEYWORD_DEFAULT reduce using rule 26 (case_clause -> KEYWORD_CASE expression COLON statement_list .)
    KEYWORD_IF      shift and go to state 19
    KEYWORD_WHILE   shift and go to state 20
    KEYWORD_DO      shift and go to state 21
    KEYWORD_FOR     shift and go to state 22
    KEYWORD_SWITCH  shift and go to state 23
    KEYWORD_BREAK   shift and go to state 25
    KEYWORD_RETURN  shift and go to state 26
    LBRACE          shift and go to state 24
    IDENTIFIER      shift and go to state 17
    SYSTEM_INPUT    shift and go to state 31
    SYSTEM_OUTPUT   shift and go to state 32
    KEYWORD_EXIT    shift and go to state 33
    KEYWORD_INT     shift and go to state 34
    KEYWORD_FLOAT   shift and go to state 35
    KEYWORD_CHAR    shift and go to state 36
    KEYWORD_VOID    shift and go to state 37
    KEYWORD_STRING  shift and go to state 38
    KEYWORD_BOOL    shift and go to state 39
    KEYWORD_FILE    shift and go to state 40
    KEYWORD_SOCKET  shift and go to state 41
    KEYWORD_DICT    shift and go to state 42

    statement                      shift and go to state 43
    declaration_statement          shift and go to state 4
    assignment_statement           shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    do_while_statement             shift and go to state 8
    for_statement                  shift and go to state 9
    switch_statement               shift and go to state 10
    break_statement                shift and go to state 11
    return_statement               shift and go to state 12
    function_call_statement        shift and go to state 13
    block_statement                shift and go to state 14
    function_definition            shift and go to state 15
    type_specifier                 shift and go to state 16
    left_hand_side                 shift and go to state 18
    function_call                  shift and go to state 27
    primitive_type                 shift and go to state 28
    array_type                     shift and go to state 29
    subscript_access               shift and go to state 30
