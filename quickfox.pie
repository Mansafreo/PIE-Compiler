// ================================================================
// PIE Compiler Comprehensive Test Suite - "quickfox.pie"
// ================================================================
// 1. DATA TYPES AND VARIABLE DECLARATIONS
// ================================================================
// Primitive types
int my_int = 42;
float my_float = 3.14159;
char my_char = 'Q';
string my_string = "The quick brown fox jumps over the lazy dog";
//int str_length=strlen(my_string);
// // Basic variable tests
output("=== Basic Variable Tests ===", string);
output("Integer:", string);
output(my_int, int);
output("Float:", string);
output(my_float, float, 5);
output("Character:", string);
output(my_char, char);
// output("String length:", string);
// output(str_length, int);
// ================================================================

// ================================================================
// 2. ARRAYS - DYNAMIC ARRAYS WITH ALL TYPES
// ================================================================

// Integer arrays
int numbers[] = [1, 2, 3, 4, 5];
int fibonacci[] = [1, 1, 2, 3, 5, 8, 13];

// String arrays  
string animals[] = ["fox", "dog", "cat", "bird"];
string colors[] = ["red", "green", "blue"];

// Character arrays
char letters[] = ['A', 'B', 'C', 'D'];
char vowels[] = ['a', 'e', 'i', 'o', 'u'];

// Float arrays
float prices[] = [19.99, 29.99, 39.99];
float coordinates[] = [1.5, 2.7, 3.8, 4.2];

// ================================================================
// 3. DICTIONARIES - STATIC AND DYNAMIC
// ================================================================

// Static dictionary initialization
dict person = {"name": "John Fox", "age": 30, "height": 5.9};
dict config = {"debug": 1, "timeout": 30.5, "host": "localhost"};

// ================================================================
// 4. MATHEMATICAL OPERATIONS AND FUNCTIONS 
// ================================================================

// Basic arithmetic
int sum_result = 10 + 5;
int diff_result = 10 - 3;
int mult_result = 6 * 7;
float div_result = 20.0 / 4.0;
int mod_result = 17 % 5;

// Float arithmetic
float float_sum = 10.5 + 2.3;
float float_div = 22.0 / 7.0;

// Mathematical constants and functions
float pi_value = pi();
float e_value = e();

// Trigonometric functions
float angle = pi_value / 4.0;  // 45 degrees
float sin_45 = sin(angle);
float cos_45 = cos(angle);
float tan_45 = tan(angle);

// Power and roots
float power_result = pow(2.0, 3.0);
float sqrt_result = sqrt(16.0);

// Rounding functions
float round_up = round(3.7);
float round_down = round(3.2);
float floor_result = floor(3.9);
float ceil_result = ceil(3.1);

// Absolute values
float abs_result = abs(-5.5);
int abs_int_result = abs_int(-10);

// Min/Max functions
float min_result = min(3.5, 7.2);
float max_result = max(3.5, 7.2);
int min_int_result = min_int(15, 8);
int max_int_result = max_int(15, 8);

// ================================================================
// 5. STRING OPERATIONS
// ================================================================

// String manipulation
string hello = "Hello";
string world = "World";
string greeting = concat_strings(hello, world);
int str_length = strlen(my_string);

// // ================================================================
// // 6. ARRAY OPERATIONS AND FUNCTIONS
// // ================================================================

// Display header
output("================================================================", string);
output("PIE COMPILER COMPREHENSIVE TEST SUITE", string);
output("Testing all major language features", string);
output("================================================================", string);

// Test array push operations
arr_push(numbers, 6);
arr_push(animals, "elephant");
arr_push(letters, 'Z');
arr_push(prices, 49.99);

// Array sizes
int numbers_size = arr_size(numbers);
int animals_size = arr_size(animals);
int letters_size = arr_size(letters);

// Array searches and contains
int search_index = arr_indexof(numbers, 3);
int not_found = arr_indexof(animals, "zebra");

// Array concatenation
int more_numbers[] = [7, 8, 9];
int combined[] = numbers + more_numbers;

// Array average (for numeric arrays)
float numbers_avg = arr_avg(numbers);
float prices_avg = arr_avg(prices);

// // ================================================================
// // 7. TEST OUTPUT - DISPLAY RESULTS
// // ================================================================

// Basic variable tests
output("=== Variable Tests ===", string);
output("Integer:", string);
output(my_int, int);
output("Float:", string);
output(my_float, float, 5);
output("Character:", string);
output(my_char, char);
output("String length:", string);
output(str_length, int);

// Math function tests
output("=== Math Function Tests ===", string);
output("Pi value:", string);
output(pi_value, float, 5);
output("E value:", string);
output(e_value, float, 5);
output("Sin(45 degrees):", string);
output(sin_45, float, 3);
output("Cos(45 degrees):", string);
output(cos_45, float, 3);
output("2^3 =", string);
output(power_result, float, 1);
output("Square root of 16 =", string);
output(sqrt_result, float, 1);
output("Round(3.7):", string);
output(round_up, float, 1);
output("Floor(3.9):", string);
output(floor_result, float, 1);
output("Ceil(3.1):", string);
output(ceil_result, float, 1);
output("Abs(-5.5):", string);
output(abs_result, float, 1);
output("Min(3.5, 7.2):", string);
output(min_result, float, 1);
output("Max(15, 8):", string);
output(max_int_result, int);

// Array operation tests
output("=== Array Operations Test ===", string);

// Test array contains
if (arr_contains(numbers, 3)) {
    output("Numbers array contains 3", string);
}

if (arr_contains(animals, "fox")) {
    output("Animals array contains fox", string);
}

// Display array sizes
output("Numbers array size:", string);
output(numbers_size, int);

output("Animals array size:", string);
output(animals_size, int);

// Display array averages
output("Numbers average:", string);
output(numbers_avg, float, 2);

output("Prices average:", string);
output(prices_avg, float, 2);

// Test array indexing
output("First number:", string);
output(numbers[0], int);

output("First animal:", string);
output(animals[0], string);

output("First letter:", string);
output(letters[0], char);

// Dictionary operation tests
output("=== Dictionary Operations Test ===", string);

// Test static dictionary access
string person_name = dict_get_string(person, "name");
int person_age = dict_get_int(person, "age");
float person_height = dict_get_float(person, "height");

output("Person name:", string);
output(person_name, string);
output("Person age:", string);
output(person_age, int);
output("Person height:", string);
output(person_height, float, 1);

// String function tests
output("=== String Functions Test ===", string);

output("Concatenated greeting:", string);
output(greeting, string);

// Test string comparison
int cmp_result = strcmp("apple", "banana");
output("strcmp result (apple vs banana):", string);
output(cmp_result, int);

// Comparison operator tests
output("=== Comparison Operators Test ===", string);

int a = 10;
int b = 20;

if (a == 10) output("Equality test passed", string);
if (a != b) output("Inequality test passed", string);
if (a < b) output("Less than test passed", string);
if (b > a) output("Greater than test passed", string);
if (a <= 10) output("Less than or equal test passed", string);
if (b >= 20) output("Greater than or equal test passed", string);

// Display array contents
output("=== Array Contents ===", string);

output("Numbers array:", string);
output(numbers, array);

output("Animals array:", string);
output(animals, array);

output("Letters array:", string);
output(letters, array);

output("Prices array:", string);
output(prices, array);

output("Combined array:", string);
output(combined, array);

// ================================================================
// 8. NULL CHECKING TESTS
// ================================================================

string nullable_string;
if (nullable_string == null) {
    output("Nullable string is null", string);
} else {
    output("Nullable string is not null: ", string);
    output(nullable_string, string);
}

int nullable_int;
if (nullable_int == null) {
    output("Nullable int is null", string);
} else {
    output("Nullable int is not null: ", string);
    output(nullable_int, int);
}

// ================================================================
// 9 CONDITIONAL TESTS AND (&&) OPERATOR
// ================================================================

if (a > 5 && b < 10) {
    output("Both conditions are true", string);
}
if (a < 5 && b > 15) {
    output("At least one condition is false", string);
} else {
    output("One or both conditions are false", string);
}

// ================================================================
// 10. OR CONDITIONAL TESTS AND (||) OPERATOR
// ================================================================
if (a > 5 || b < 10) {
    output("At least one condition is true", string);
}
if (a < 5 || b < 15) {
    output("Both conditions are false", string);
} else {
    output("At least one condition is true", string);
}

// Final summary
output("=== Test Summary ===", string);

output("Primitive types tested: int, float, char, string", string);
output("Array types tested: int[], string[], char[], float[]", string);
output("Dictionary operations tested: static initialization and access", string);
output("Math functions tested: trigonometry, powers, rounding", string);
output("String operations tested: concatenation, length, comparison", string);
output("Control flow tested: conditionals and comparisons", string);
output("Array functions tested: push, size, contains, indexof, avg", string);
output("Dictionary functions tested: get_string, get_int, get_float", string);
output("Null checking tested for strings and integers", string);
output("Logical operators tested: AND (&&), OR (||)", string);

output("Total variables created: ~50+", string);
output("Total functions called: ~20+", string);
output("PIE Compiler Test Suite: COMPLETE", string);


output("================================================================", string);
output("All tests completed successfully!", string);
output("The quick brown fox has tested every PIE feature!", string);
output("================================================================", string);
